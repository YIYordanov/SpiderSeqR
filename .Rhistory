options()
temp <- orderDFColumns(df_sa2)
devtools::load_all()
df_sa2 <- searchAnywhere("TRIMKD")
devtools::load_all()
devtools::test()
devtools::test()
devtools::test()
View(df_sa)
?searchForTerm
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::document()
?news
startSpiderSeqRDemo()
df1 <- searchAnywhere("sth")
getAnywhere(displayVector)
displayVector <- function(x){
#print(x)
#cat(paste0(x, "\n"), sep="", fill = TRUE) #Gives a random break
cat(paste0(x, "\n"), sep="", fill = FALSE)
}
startSpiderSeqRDemo()
df1 <- searchAnywhere("sth")
View(temp_searchAnywhereSRA)
devtools::load_all()
df1 <- searchAnywhere("sth")
temp_anywhere_geo_df
temp_anywhere_geo_df$sth <- NA
is.na(temp_anywhere_sra_df$SRA_sample_attribute)
sum(is.na(temp_anywhere_sra_df$SRA_sample_attribute))
dim(temp_anywhere_geo_df)
devtools::load_all()
df1 <- searchAnywhere("sth")
temp_anywhere_sra_df
devtools::load_all()
df1 <- searchAnywhere("sth")
devtools::load_all()
df1 <- searchAnywhere("sth")
temp_TEN_df_out
listValidColumns()
devtools::load_all()
df1 <- searchAnywhere("sth")
devtools::load_all()
df1 <- searchAnywhere("sth")
devtools::load_all()
df1 <- searchAnywhere("sth")
devtools::load_all()
df1 <- searchAnywhere("sth")
devtools::load_all()
df1 <- searchAnywhere("sth")
devtools::load_all()
df1 <- searchAnywhere("sth")
createEmptyColumns <- function(df, x){
if (dim(df)[1]==0){
for (i in seq_along(x)){
df[, x[i]] <- character(0)
}
} else {
df[ , x] <- NA
}
return(df)
}
createEmptyColumns(temp_df_diag)
createEmptyColumns(temp_df_diag, "sth")
df2 <- searchAnywhere("ara*")
View(df2)
createEmptyColumns(df2, "sth")
df2b <- .Last.value
class(df2b$OTH_lane)
class(df2b$sth)
createEmptyColumns <- function(df, x){
if (dim(df)[1]==0){
for (i in seq_along(x)){
df[, x[i]] <- character(0)
}
} else {
df[ , x] <- as.character(NA)
}
return(df)
}
df2bb <- createEmptyColumns(df2, "sth")
class(df2bb$sth)
df2bb
rm(createEmptyColumns)
df1 <- searchAnywhere("sth")
devtools::load_all()
df1 <- searchAnywhere("sth")
listValidColumns()$Other
devtools::load_all()
df1 <- searchAnywhere("sth")
devtools::load_all()
df1 <- searchAnywhere("sth")
.Last.value
df1 <- searchAnywhere("sth", acc_levels = "gsm")
devtools::load_all()
df1 <- searchAnywhere("sth", acc_levels = "gsm")
devtools::load_all()
df1 <- searchAnywhere("sth", acc_levels = "gsm")
devtools::load_all()
df1 <- searchAnywhere("sth", acc_levels = "gsm")
df1
devtools::load_all()
df1 <- searchAnywhere("sth", acc_levels = "gsm")
colnames(df_out)
colnames(temp_df_out)
displayVector(colnames(temp_df_out))
displayVector(as.character(unlist(listValidColumns())))
df1 <- searchAnywhere("sth", acc_levels = "gsm")
displayVector(colnames(temp_df_out))
View(temp_df_out)
devtools::load_all()
df1 <- searchAnywhere("sth", acc_levels = "gsm")
colnames(temp_df_out)
temp_df_out$OTH_n
unique(colnames(temp_df_out))
View(temp_df_out)
colnames(temp_df_out)
?%in%
?match
c(1,2) %in% 1
getAnywhere(createEmptyColumns)
createEmptyColumns <- function(df, x){
if (dim(df)[1]==0){
for (i in seq_along(x)){
if (!(x[i] %in% colnames(df))) {
df[, x[i]] <- character(0)
}
}
} else {
x <- x[!(x %in% colnames(df))]
df[ , x] <- as.character(NA)
}
return(df)
}
createEmptyColumns(temp_df_out, "OTH_n")
createEmptyColumns(temp_df_out, "OTH_pairedEnd")
devtools::load_all()
df1 <- searchAnywhere("sth", acc_levels = "gsm")
View(temp_TEN_df_out)
colnames(temp_TEN_df_out)
df_sa <- searchAnywhere("TRIMKD")
devtools::load_all()
df_sa <- searchAnywhere("TRIMKD")
View(selectColumns_Overview(df_sa))
findSRAAccessionLevelColumnNames()
listValidColumns()$Other
renameSRAColumns()
listValidColumns()
listValidColumns()$GSM
findAccessionLevelColumnNames <- function(acc_levels = c("run", "experiment", "sample", "study")){
sra_accessions <- c("run", "experiment", "sample", "study")
accessions <- c(sra_accessions, "gsm", "gse")
# ===*=== sth about matching
acc_columns <- character()
if (sum(acc_levels %in% sra_accessions)>0){
sra_columns <- findSRAAccessionLevelColumnNames(acc_levels = acc_levels[acc_levels %in% sra_accessions])
df <- stats::setNames(data.frame(matrix(ncol = length(sra_columns),
nrow = 0)), sra_columns)
df <- renameSRAColumns(df)
sra_columns <- colnames(df)
acc_columns <- c(acc_columns, sra_columns)
}
if ("gsm" %in% acc_levels){
acc_columns <- c(acc_columns, listValidColumns()$GSM)
}
if ("gse" %in% acc_levels){
acc_columns <- c(acc_columns, listValidColumns()$GSE)
}
return(acc_columns)
}
findAccessionLevelColumnNames()
findAccessionLevelColumnNames("gsm")
findAccessionLevelColumnNames("gse")
findAccessionLevelColumnNames("run")
findAccessionLevelColumnNames(c("run"))
findAccessionLevelColumnNames(c("run", "gsm"))
findAccessionLevelColumnNames(c("run", "sth"))
findAccessionLevelColumnNames <- function(acc_levels = c("run", "experiment", "sample", "gsm")){
sra_accessions <- c("run", "experiment", "sample", "study")
acc_possible <- c(sra_accessions, "gsm", "gse")
acc_levels <- match.arg(acc_levels, acc_possible, several.ok = TRUE)
acc_columns <- character()
if (sum(acc_levels %in% sra_accessions)>0){
sra_columns <-
findSRAAccessionLevelColumnNames(acc_levels =
acc_levels[acc_levels %in% sra_accessions])
df <- stats::setNames(data.frame(matrix(ncol = length(sra_columns),
nrow = 0)), sra_columns)
df <- renameSRAColumns(df)
sra_columns <- colnames(df)
acc_columns <- c(acc_columns, sra_columns)
}
if ("gsm" %in% acc_levels){
acc_columns <- c(acc_columns, listValidColumns()$GSM)
}
if ("gse" %in% acc_levels){
acc_columns <- c(acc_columns, listValidColumns()$GSE)
}
return(acc_columns)
}
findAccessionLevelColumnNames(c("run", ""))
findAccessionLevelColumnNames(c("run", "g"))
findAccessionLevelColumnNames(c("run", "nothing"))
findAccessionLevelColumnNames(c("run", "ngs"))
findAccessionLevelColumnNames(c("run", "gs"))
findAccessionLevelColumnNames(c("run", "sampl"))
findAccessionLevelColumnNames(c("run", "sampl", "gse"))
filterByTermByAccessionLevel <- function(
query,
df,
acc_levels = c("run", "experiment", "sample", "gsm")){
# =====================================================================
# warning("Only works for SRA") # ===*===
# =====================================================================
acc_possible <- c("run", "experiment", "sample", "study", "gsm", "gse")
acc_levels <- match.arg(acc_levels, acc_possible, several.ok = TRUE)
mm(paste0("Filtering for the following acc_levels: ",
paste0(acc_levels, collapse = ", ")), "search")
if (sum(unique(acc_levels) %in% c("study",
"sample",
"experiment",
"run", "gsm", "gse"))==6){
mm("Nothing to filter - returning original df", "adverse")
return(df)
}
acc_columns <- findAccessionLevelColumnNames(acc_levels = acc_levels)
df_out <- filterByTerm(df = df,query = query, filter_columns = )
return(df_out)
}
sra_df <- searchForAccession(sra_demo$study_accession, FALSE)
df1 <- filterByTermByAccessionLevel("trimkd", sra_df)
df1 <- filterByTermByAccessionLevel("trimkd", sra_df, acc_levels = "run")
df1 <- filterByTermByAccessionLevel("trimkd", sra_df, acc_levels = "gsm")
df1 <- filterByTermByAccessionLevel("trimkd", sra_df, acc_levels = "run")
View(selectColumns_Overview(df1))
df1[,findSRAAccessionLevelColumnNames("run")]
df1[,findAccessionLevelColumnNames("run")]
View(df1[,findAccessionLevelColumnNames("run")])
filterByTermByAccessionLevel <- function(
query,
df,
acc_levels = c("run", "experiment", "sample", "gsm")){
# =====================================================================
# warning("Only works for SRA") # ===*===
# =====================================================================
acc_possible <- c("run", "experiment", "sample", "study", "gsm", "gse")
acc_levels <- match.arg(acc_levels, acc_possible, several.ok = TRUE)
mm(paste0("Filtering for the following acc_levels: ",
paste0(acc_levels, collapse = ", ")), "search")
if (sum(unique(acc_levels) %in% c("study",
"sample",
"experiment",
"run", "gsm", "gse"))==6){
mm("Nothing to filter - returning original df", "adverse")
return(df)
}
acc_columns <- findAccessionLevelColumnNames(acc_levels = acc_levels)
df_out <- filterByTerm(df = df,query = query, filter_columns = acc_levels)
return(df_out)
}
df1 <- filterByTermByAccessionLevel("trimkd", sra_df, acc_levels = "run")
filterByTermByAccessionLevel <- function(
query,
df,
acc_levels = c("run", "experiment", "sample", "gsm")){
# =====================================================================
# warning("Only works for SRA") # ===*===
# =====================================================================
acc_possible <- c("run", "experiment", "sample", "study", "gsm", "gse")
acc_levels <- match.arg(acc_levels, acc_possible, several.ok = TRUE)
mm(paste0("Filtering for the following acc_levels: ",
paste0(acc_levels, collapse = ", ")), "search")
if (sum(unique(acc_levels) %in% c("study",
"sample",
"experiment",
"run", "gsm", "gse"))==6){
mm("Nothing to filter - returning original df", "adverse")
return(df)
}
acc_columns <- findAccessionLevelColumnNames(acc_levels = acc_levels)
df_out <- filterByTerm(df = df,query = query, filter_columns = acc_columns)
return(df_out)
}
df1 <- filterByTermByAccessionLevel("trimkd", sra_df, acc_levels = "run")
df1 <- filterByTermByAccessionLevel("trimkd", sra_df, acc_levels = "gse")
df1 <- filterByTermByAccessionLevel("trimkd", sra_df, acc_levels = "gsm")
View(selectColumns_Overview(df1))
df1 <- filterByTermByAccessionLevel("trimkd", sra_df)
df1 <- filterByTermByAccessionLevel("trimkd", sra_df)
df1 <- filterByTerm("trimkd", sra_df)
df1 <- filterByTerm(sra_df,"trimkd")
View(df1)
View(df1)
devtools::load_all()
devtools::document()
?searchAnywhere
?searchAnywhere
devtools::document()
devtools::document()
?filterSRAByTermByAccessionLevel
devtools::document()
?filterSRAByTermByAccessionLevel
?filterByTermByAccessionLevel
?findSRAAccessionLevelColumnNames
?findAccessionLevelColumnNames
?chExtractor
?filterByTerm
?searchForAccession
?convertAccession
devtools::dev_mode()
dev_mode()
devtools::dev_mode()
sth <- function(x){
callRecordGenerator(file = do.call(generateFileName,
c(x, list(output="CALL"),
list(file_type="Rda"))))
}
sth("s")
devtools::load_all()
sth("s")
paste0(1:2)
paste0(1:2, collapse = ".")
generateCallFile_SFA <- function(acc_vector){
mm("Running generateCallFileName", "fn")
name <- "SFA_"
if (length(acc_vector) > 2){
acc_name <- paste0(acc_vector[1:2], collapse = "-")
acc_name <- paste0(acc_name, "_", length(acc_vector), "n")
} else {
acc_name <- paste0(acc_vector, collapse = "-")
}
name <- paste0(name, acc_name)
today <- Sys.time()
today <- format(today, format = "%Y-%m-%d-%H%M%S")
name <- paste0(name, "_", today)
name <- paste0(name, ".Rda")
mm("generateCallFileName completed", "fn")
return(name)
}
generateCallFile_SFA(unique(sra_demo$study_accession))
generateCallFile_SFA <- function(acc_vector){
mm("Running generateCallFileName", "fn")
name <- "SFA_"
if (length(acc_vector) > 2){
acc_name <- paste0(acc_vector[c(1, length(acc_vector))], collapse = "-")
acc_name <- paste0(acc_name, "_", length(acc_vector), "n")
} else {
acc_name <- paste0(acc_vector, collapse = "-")
}
name <- paste0(name, acc_name)
today <- Sys.time()
today <- format(today, format = "%Y-%m-%d-%H%M%S")
name <- paste0(name, "_", today)
name <- paste0(name, ".Rda")
mm("generateCallFileName completed", "fn")
return(name)
}
generateCallFile_SFA(unique(sra_demo$study_accession))
devtools::load_all()
dfa <- searchForAccession(sra_demo$study_accession, call_output = T)
orderAccessions(sra_demo$study_accession)
devtools::load_all()
dfa <- searchForAccession(sra_demo$study_accession, call_output = T)
devtools::load_all()
dfa <- searchForAccession(sra_demo$study_accession, call_output = T)
devtools::check()
devtools::test(0)
devtools::test()
colnames(sra_demo)
saExtractor(sra_demo$sample_attribute)
saExtractor(sra_demo[,55])
saExtractor(sra_demo[,c(1,55)])
View(.Last.value)
devtools::load_all()
searchAnywhere("sth")
devtools::test()
?append
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
class(df_sa)
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
length(df_sa)
dim(df_sa)
devtools::load_all()
devtools::test()
searchAnywhere("sth")
searchAnywhere("sth")
devtools::load_all()
searchAnywhere("sth")
devtools::test()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::test()
devtools::load_all()
devtools::test()
df11 <- filterByTerm(searchForAccession(sra_demo$study_accession), "trimkd")
View(df11)
devtools::test()
getAnywhere(filter_con)
devtools::load_all()
devtools::test()
getAnywhere(displayVector)
displayVector <- function(x){
#print(x)
#cat(paste0(x, "\n"), sep="", fill = TRUE) #Gives a random break
cat(paste0(x, "\n"), sep="", fill = FALSE)
}
devtools::test()
df1 <- filterByTerm(searchForAccession(sra_demo$study_accession), "trimkd")
startSpiderSeqRDemo()
df1 <- filterByTerm(searchForAccession(sra_demo$study_accession), "trimkd")
getSpiderSeqROption()
getSpiderSeqROption("internal")
df1 <- filterByTerm(searchForAccession(sra_demo$study_accession), "trimkd")
devtools::load_all()
df1 <- filterByTerm(searchForAccession(sra_demo$study_accession), "trimkd")
devtools::load_all()
df1 <- filterByTerm(searchForAccession(sra_demo$study_accession), "trimkd")
View(output_df)
devtools::load_all()
df1 <- filterByTerm(searchForAccession(sra_demo$study_accession), "trimkd")
devtools::load_all()
df1 <- filterByTerm(searchForAccession(sra_demo$study_accession), "trimkd")
devtools::load_all()
df1 <- filterByTerm(searchForAccession(sra_demo$study_accession), "trimkd")
getAnywhere(displayVector)
devtools
devtools::load_all()
startSpiderSeqRDemo()
df1 <- filterByTerm(searchForAccession(sra_demo$study_accession), "trimkd")
df1 <- searchForAccession(sra_demo$study_accession), "trimkd")
df1 <- searchForAccession(sra_demo$study_accession)
startSpiderSeqRDemo()
df1 <- searchForAccession(sra_demo$study_accession)
devtools::load_all()
startSpiderSeqRDemo()
df1 <- searchForAccession(sra_demo$study_accession)
ls()
devtools::load_all()
df1 <- searchForAccession(sra_demo$study_accession)
devtools::load_all()
df1 <- searchForAccession(sra_demo$study_accession)
devtools::load_all()
df1 <- searchForAccession(sra_demo$study_accession)
?get
devtools::load_all()
df1 <- searchForAccession(sra_demo$study_accession)
devtools::load_all()
df1 <- searchForAccession(sra_demo$study_accession)
devtools::load_all()
df1 <- searchForAccession(sra_demo$study_accession)
.GlobalEnv
print(.GlobalEnv)
devtools::load_all()
df1 <- searchForAccession(sra_demo$study_accession)
startSpiderSeqRDemo()
df1 <- searchForAccession(sra_demo$study_accession)
startSpiderSeqRDemo()
df1 <- searchForAccession(sra_demo$study_accession)
devtools::load_all()
df1 <- searchForAccession(sra_demo$study_accession)
?assign
devtools::load_all()
df1 <- searchForAccession(sra_demo$study_accession)
devtools::load_all()
df1 <- searchForAccession(sra_demo$study_accession)
View(output_df)
identical(output_df, output_df_1)
identical(output_df, output_df_2)
devtools::load_all()
df1 <- searchForAccession(sra_demo$study_accession)
startSpiderSeqRDemo()
df1 <- searchForAccession(sra_demo$study_accession)
devtools::load_all()
df1 <- searchForAccession(sra_demo$study_accession)
devtools::load_all()
startSpiderSeqRDemo()
df1 <- searchForAccession(sra_demo$study_accession)
devtools::load_all()
startSpiderSeqRDemo()
df1 <- searchForAccession(sra_demo$study_accession)
startSpiderSeqR("C:\\DD\\Projects\\SpideRs\\SpiderSeqR-Auxillaries\\Database_Files")
startSpiderSeqR("C:\\DD\\Projects\\SpideRs\\SpiderSeqR-Auxillaries\\Database_Files")
startSpiderSeqRDemo()
df1 <- searchForAccession(sra_demo$study_accession)
devtools::test()
getwd()
setwd("C:/DD/Projects/SpideRs/SpiderSeqR")
devtools::test()
devtools::test()
startSpiderSeqR("C:\\DD\\Projects\\SpideRs\\SpiderSeqR-Auxillaries\\Database_Files")
getwd()
startSpiderSeqRDemo()
