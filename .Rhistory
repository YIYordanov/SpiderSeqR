x <- c("3", NA, "2", "1", NA)
x_i <- rep(0, length(x))
if (na.last == TRUE){
x_i[is.na(x)] <- seq(from=(length(x)+1-sum(is.na(x))), to = length(x))
}
if (na.last == FALSE){
x_i[is.na(x)] <- seq(from=1, to = sum(is.na(x)))
}
x_val <- x[!is.na(x)]
x_val <- gsub("[[:alpha:]]", "", x_val)
x_val_i <- order(as.numeric(x_val))
if (na.last == FALSE){
x_val_i <- x_val_i + sum(is.na(x))
}
x_i[!is.na(x)] <- x_val_i
x_i
na.last = FALSE
x <- c("3", NA, "2", "1", NA)
x_i <- rep(0, length(x))
if (na.last == TRUE){
x_i[is.na(x)] <- seq(from=(length(x)+1-sum(is.na(x))), to = length(x))
}
if (na.last == FALSE){
x_i[is.na(x)] <- seq(from=1, to = sum(is.na(x)))
}
x_val <- x[!is.na(x)]
x_val <- gsub("[[:alpha:]]", "", x_val)
x_val_i <- order(as.numeric(x_val))
if (na.last == FALSE){
x_val_i <- x_val_i + sum(is.na(x))
}
x_i[!is.na(x)] <- x_val_i
x_i
orderAccessions <- function(x, na.last = TRUE){
x_i <- rep(0, length(x))
if (na.last == TRUE){
x_i[is.na(x)] <- seq(from=(length(x)+1-sum(is.na(x))), to = length(x))
}
if (na.last == FALSE){
x_i[is.na(x)] <- seq(from=1, to = sum(is.na(x)))
}
x_val <- x[!is.na(x)]
x_val <- gsub("[[:alpha:]]", "", x_val)
x_val_i <- order(as.numeric(x_val))
if (na.last == FALSE){
x_val_i <- x_val_i + sum(is.na(x))
}
x_i[!is.na(x)] <- x_val_i
return(x_i)
}
orderAccessions(c("a811", "2c", NA, "7y"))
?order
orderAccessions <- function(x, na.last = TRUE){
x_i <- rep(0, length(x))
if (na.last == TRUE){
x_i[is.na(x)] <- seq(from=(length(x)+1-sum(is.na(x))), to = length(x))
}
if (na.last == FALSE){
x_i[is.na(x)] <- seq(from=1, to = sum(is.na(x)))
}
x_val <- x[!is.na(x)]
x_val <- gsub("[[:alpha:]]", "", x_val)
x_val_i <- order(as.numeric(x_val))
print(x_val_i)
if (na.last == FALSE){
x_val_i <- x_val_i + sum(is.na(x))
}
x_i[!is.na(x)] <- x_val_i
return(x_i)
}
orderAccessions(c("a811", "2c", NA, "7y"))
orderAccessions <- function(x, na.last = TRUE){
x_i <- rep(0, length(x))
if (na.last == TRUE){
x_i[is.na(x)] <- seq(from=(length(x)+1-sum(is.na(x))), to = length(x))
}
if (na.last == FALSE){
x_i[is.na(x)] <- seq(from=1, to = sum(is.na(x)))
}
x_val <- x[!is.na(x)]
x_val <- gsub("[[:alpha:]]", "", x_val)
x_val_i <- order(as.numeric(x_val))
print(x_val)
print(x_val_i)
if (na.last == FALSE){
x_val_i <- x_val_i + sum(is.na(x))
}
x_i[!is.na(x)] <- x_val_i
return(x_i)
}
orderAccessions(c("a811", "2c", NA, "7y"))
orderAccessions <- function(x, na.last = TRUE){
x_i <- rep(0, length(x))
if (na.last == TRUE){
x_i[is.na(x)] <- seq(from=(length(x)+1-sum(is.na(x))), to = length(x))
}
if (na.last == FALSE){
x_i[is.na(x)] <- seq(from=1, to = sum(is.na(x)))
}
x_val <- x[!is.na(x)]
x_val <- gsub("[[:alpha:]]", "", x_val)
x_val <- as.numeric(x_val)
x_val_i <- order(x_val)
print(x_val)
print(x_val_i)
if (na.last == FALSE){
x_val_i <- x_val_i + sum(is.na(x))
}
x_i[!is.na(x)] <- x_val_i
return(x_i)
}
orderAccessions(c("a811", "2c", NA, "7y"))
order(c(811,2,7))
order(c(8,2,7))
t
t <- c(8,2,7)
t
order(t)
t[order(t)]
x <- c("3", NA, "2", "1", NA)
x_i <- rep(0, length(x))
x_i_na <- which(is.na(x))
x_i_val <- which(!is.na(x))
x_num <- gsub("[[:alpha:]]", "", x[x_i_val])
x_i
x_i_na
x_i_val
x_i_num <- order(x_num)
x_i_num
x <- c("3", NA, "2", "1", NA)
x_i <- rep(0, length(x))
x_i_na <- which(is.na(x))
x_i_val <- which(!is.na(x))
x_num <- gsub("[[:alpha:]]", "", x[x_i_val])
x_i_num <- order(x_num)
x_i_val <- x_i_val[x_i_num]
x_i <- c(x_i_val, x_i_na)
x_i
orderAccessions <- function(x, na.last = TRUE){
x_i <- rep(0, length(x))
x_i_na <- which(is.na(x))
x_i_val <- which(!is.na(x))
x_num <- gsub("[[:alpha:]]", "", x[x_i_val])
x_i_num <- order(x_num)
x_i_val <- x_i_val[x_i_num]
if (na.last == TRUE){
x_i <- c(x_i_val, x_i_na)
}
if (na.last == FALSE){
x_i <- c(x_i_na, x_i_val)
}
}
orderAccessions(c("2", "4r", NA, "e", "33"))
orderAccessions <- function(x, na.last = TRUE){
x_i <- rep(0, length(x))
x_i_na <- which(is.na(x))
x_i_val <- which(!is.na(x))
x_num <- gsub("[[:alpha:]]", "", x[x_i_val])
x_i_num <- order(x_num)
x_i_val <- x_i_val[x_i_num]
if (na.last == TRUE){
x_i <- c(x_i_val, x_i_na)
}
if (na.last == FALSE){
x_i <- c(x_i_na, x_i_val)
}
return(x_i)
}
orderAccessions(c("2", "4r", NA, "e", "33"))
x <- c("2", "4r", NA, "e", "33")
orderAccessions(x)
x[orderAccessions(x)]
orderAccessions <- function(x, na.last = TRUE){
x_i <- rep(0, length(x))
x_i_na <- which(is.na(x))
x_i_val <- which(!is.na(x))
x_num <- gsub("[[:alpha:]]", "", x[x_i_val])
print(x_num)
x_i_num <- order(x_num)
x_i_val <- x_i_val[x_i_num]
if (na.last == TRUE){
x_i <- c(x_i_val, x_i_na)
}
if (na.last == FALSE){
x_i <- c(x_i_na, x_i_val)
}
return(x_i)
}
x[orderAccessions(x)]
orderAccessions <- function(x, na.last = TRUE){
x_i <- rep(0, length(x))
x_i_na <- which(is.na(x))
x_i_val <- which(!is.na(x))
x_num <- as.numeric(gsub("[[:alpha:]]", "", x[x_i_val]))
print(x_num)
x_i_num <- order(x_num)
x_i_val <- x_i_val[x_i_num]
if (na.last == TRUE){
x_i <- c(x_i_val, x_i_na)
}
if (na.last == FALSE){
x_i <- c(x_i_na, x_i_val)
}
return(x_i)
}
x[orderAccessions(x)]
?set.seed
set.seed(001)
sample(1:10)
sample(1:10)
set.seed(001)
sample(1:10)
set.seed(002)
sample(1:10)
set.seed(002)
sample(1:10)
t <- (1,2,NA)
t <- c(1,2,NA)
is.na(t) <- 1
t
order(c(1,2,5)
)
order(c(6,1,2,5))
order(c("", " ", "0"))
devtools::test()
devtools::test()
ls(pos="package:SpideR")
library(SpideR)
devtools::load_all()
ls(pos="package:SpideR")
devtools::load_all()
ls(pos="package:SpideR")
getAnywhere(searchSRA)
searchSRAForAccession("SRR1", "*")
class(searchSRAForAccession("SRR1", "*"))
class(searchSRAForAccession("SR1", "*"))
devtools::test()
class(searchSRAForAccession("SR1", "*"))
class(searchSRAForAccession("SR1", "*"))
searchSRAForAccession("SRR1", "*")
devtools::test()
devtools::test()
devtools::test()
devtools::test()
searchSRAForAccession("SRR1", "*")
searchSRAForAccession("SR.", "*")
devtools::test()
searchSRAForAccession("SR", "*")
searchSRAForAccession("SRG", "*")
searchSRAForAccession("SRG223", "*")
devtools::test()
searchSRAForAccession("SRR223", "*")
searchSRAForAccession("SRR1", "*")
devtools::test()
searchSRAForAccession("SRR1", "*")
length(searchSRAForAccession("SRR1", "*"))
dim(searchSRAForAccession("SRR1", "*"))
dim(searchSRAForAccession("SRR1", "*"))[1]
dim(searchSRAForAccession("SRR1", "*"))[1]==0
devtools::test()
dim(suppressWarnings(searchSRAForAccession("SRR1", "*")))[1]==0
devtools::test()
searchSRAForAccession("SRR1", "nth")
searchSRAForAccession("SRR23333", "nth")
searchSRAForAccession("SRR23333", "*")
searchSRAForAccession("SRR233337", "*")
searchSRAForAccession("SRR2333371", "*")
searchSRAForAccession("SRR23333", "*")
dbGetQuery(sra_con, "SELECT run_accession FROM sra GROUP_BY RANDOM() LIMIT 3")
dbGetQuery(sra_con, "SELECT run_accession FROM sra GROUP BY RANDOM() LIMIT 3")
devtools::test()
searchSRAForAccession("GSE23333", "*")
searchSRAForAccession("GSM23333", "*")
searchSRAForAccession("GSM1000", "*")
dbGetQuery(sra_con, "SELECT study_accession FROM sra GROUP BY RANDOM() LIMIT 3")
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE study_accession = 'SRP030489'")
searchSRAForAccession("SRP030489", "*")
dim(searchSRAForAccession("SRP030489", "*"))
dim(searchSRAForAccession("SRP030489", "*"))[1]
devtools::test()
dim(searchSRAForAccession("SRP065890", "*"))
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE study_accession = 'SRP065890'")
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE study_accession = 'SRP019664'")
dbGetQuery(sra_con, "SELECT sample_accession FROM sra GROUP BY RANDOM() LIMIT 3")
dbGetQuery(sra_con, "SELECT sample_accession FROM sra GROUP BY RANDOM() LIMIT 3")
devtools::test()
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE sample_accession = 'ERS502184'")
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE sample_accession = 'SRS1236919'")
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE sample_accession = 'SRS1105782'")
dbGetQuery(sra_con, "SELECT experiment_accession FROM sra GROUP BY RANDOM() LIMIT 3")
dbGetQuery(sra_con, "SELECT experiment_accession FROM sra GROUP BY RANDOM() LIMIT 3")
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE experiment_accession = 'SRX2370783'")
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE experiment_accession = 'SRX160621'")
dbGetQuery(sra_con, "SELECT experiment_accession FROM sra GROUP BY RANDOM() LIMIT 3")
dbGetQuery(sra_con, "SELECT experiment_accession FROM sra GROUP BY RANDOM() LIMIT 3")
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE experiment_accession = 'SRX021642'")
devtools::test()
dbGetQuery(sra_con, "SELECT run_accession FROM sra GROUP BY RANDOM() LIMIT 3")
dbGetQuery(sra_con, "SELECT run_accession FROM sra GROUP BY RANDOM() LIMIT 3")
dbGetQuery(sra_con, "SELECT run_accession FROM sra GROUP BY RANDOM() LIMIT 3")
dbGetQuery(sra_con, "SELECT run_accession FROM sra WHERE run_accession LIKE '%D%' GROUP BY RANDOM() LIMIT 3")
devtools::test()
convertAccession("ERR1641060")
convertAccession("SRR1641060")
accessionClassifier("ERR1641060")
devtools::test()
convertAccession("SRR1641060")
getAnywhere(accessionClassifier)
convertAccession("SRR5000245")
devtools::load_all()
DRIP_full <- readRDS("/HDD/Anna/SpideR_Packaging201709/DRIP-Seq/DRIP_full.Rda")
DRIP_combined <- readRDS("/HDD/Anna/SpideR_Packaging201709/DRIP-Seq/DRIP_combined.Rda")
df
df <- DRIP_combined[DRIP_combined$study_accession=="SRP010068",]
View(df)
required_columns <- c("run_accession",
"experiment_accession",
"study_accession",
"run_alias",
"experiment_title",
"study_alias",
"sample_name",
"library_name",
"sample_attribute",
"taxon_id",
"library_strategy",
"library_layout")
columnVerifier(df, required_columns)
order_columns <- list(df$study_accession,
#df$sample_accession,
df$experiment_accession,
df$run_accession)
df <- df[digitSort(order_columns),]
View(df)
View(viewSamples_db(df))
if(!("input" %in% colnames(df))){
df$input <- NA
}
df
if(!("control"%in% colnames(df))){
df$control <- NA
}
df
if(!("sa_tissue"%in% colnames(df))){
df <- saExtractor(df)
}
df
class(df)
if(!("mer"%in%colnames(df))){
df <- mergeDetector(df)
}
df
getAnywhere(mergeDetector())
class(df)
df_cp <- as.data.frame(df)
df
df_cp
class(df_cp)
df <- df_cp
df
if(!("pairedEnd"%in%colnames(df))){
df <- pairedEndConverter(df)
}
df
View(df)
int_columns <- c("run_accession", "experiment_accession", "study_accession", "run_alias", "experiment_title", "study_alias", "sample_name", "library_name", "sample_attribute", "taxon_id", "library_strategy")
indices <- integer()
for (i in int_columns){
indices <- append(indices, grep(i, colnames(df)))
}
sample_sheet <- df[, indices]
View(sample_sheet)
colnames(sample_sheet)
#Create the sample_sheet
sample_sheet$ID <- df[ , c("run_accession")]
colnames(sample_sheet)
sample_sheet$fileName <- ""
sample_sheet$fileNamePE <- ""
sample_sheet$experiment <- df[ , c("study_accession")]
#sample_sheet$experiment <- df[ , c("series_id")] #Previously used column
sample_sheet$tissue <- df[ , c("sa_tissue")]
#sample_sheet$tissue <- df[ , c("source_name_ch1")] #Another option
sample_sheet$condition <- df[, c("experiment_title")]
sample_sheet$replicate <- ""
sample_sheet$lane <- df[ , c("lane")]
sample_sheet$merge <- df[ , c("mer")]
sample_sheet$input <- df[ , c("input")]
sample_sheet$pairedEnd <- df[ , c("pairedEnd")]
sample_sheet$macsGroup <- ""
sample_sheet$phredScore <- ""
sample_sheet$adapter <- ""
sample_sheet$trimQuality <- ""
sample_sheet$adapterPE <- ""
sample_sheet$trimQualityPE <- ""
View(sample_sheet)
manualSRASampleSheetGenerator <- function(df){
# Arg: df from which sample sheet will be generated (this should be a raw extract from SRA)
# Returns: sample_sheet (format compatible with the pipeline) with extra preceding columns which are view-friendly
print("Running manualSRASampleSheetGenerator")
#List of required columns
#required_columns <- c("run_accession",
#                      "study_accession",
#                      "sa_tissue",
#                      "experiment_title",
#                      "lane",
#                      "mer",
#                      "input",
#                      "pairedEnd")
print(colnames(df))
required_columns <- c("run_accession",
"experiment_accession",
"study_accession",
"run_alias",
"experiment_title",
"study_alias",
"sample_name",
"library_name",
"sample_attribute",
"taxon_id",
"library_strategy",
"library_layout")
#Check if required columns exist within the data frame
columnVerifier(df, required_columns)
#Order entries
order_columns <- list(df$study_accession,
#df$sample_accession,
df$experiment_accession,
df$run_accession)
df <- df[digitSort(order_columns),]
if(!("input" %in% colnames(df))){
df$input <- NA
}
if(!("control"%in% colnames(df))){
df$control <- NA
}
if(!("sa_tissue"%in% colnames(df))){
df <- saExtractor(df)
}
#df <- chExtractor(df)
if(!("mer"%in%colnames(df))){
df <- as.data.frame(mergeDetector(df))
}
if(!("pairedEnd"%in%colnames(df))){
df <- pairedEndConverter(df)
}
int_columns <- c("run_accession", "experiment_accession", "study_accession", "run_alias", "experiment_title", "study_alias", "sample_name", "library_name", "sample_attribute", "taxon_id", "library_strategy")
indices <- integer()
for (i in int_columns){
indices <- append(indices, grep(i, colnames(df)))
}
sample_sheet <- df[, indices]
#Create the sample_sheet
sample_sheet$ID <- df[ , c("run_accession")]
#sample_sheet$ID <- df[ , c("run_accession")]
sample_sheet$fileName <- ""
sample_sheet$fileNamePE <- ""
sample_sheet$experiment <- df[ , c("study_accession")]
#sample_sheet$experiment <- df[ , c("series_id")] #Previously used column
sample_sheet$tissue <- df[ , c("sa_tissue")]
#sample_sheet$tissue <- df[ , c("source_name_ch1")] #Another option
sample_sheet$condition <- df[, c("experiment_title")]
sample_sheet$replicate <- ""
sample_sheet$lane <- df[ , c("lane")]
sample_sheet$merge <- df[ , c("mer")]
sample_sheet$input <- df[ , c("input")]
sample_sheet$pairedEnd <- df[ , c("pairedEnd")]
sample_sheet$macsGroup <- ""
sample_sheet$phredScore <- ""
sample_sheet$adapter <- ""
sample_sheet$trimQuality <- ""
sample_sheet$adapterPE <- ""
sample_sheet$trimQualityPE <- ""
print("manualSRASampleSheetGenerator completed")
return(sample_sheet)
}
test <- DRIP_combined[DRIP_combined$study_accession=="SRP010068",]
View(test)
test_after <- manualSRASampleSheetGenerator(test)
dim(test_after)
class(test_after)
test_after
View(test_after)
DRIP_full_sample_sheet <- manualSRASampleSheetGenerator(DRIP_full)
View(DRIP_full_sample_sheet)
saveRDS(DRIP_full_sample_sheet, "DRIP_full_sample_sheet.Rda")
write.table(x = DRIP_full_sample_sheet,
file = "DRIP_full_sample_sheet.csv",
sep = "\t",
row.names = FALSE,
quote = FALSE)
dim(DRIP_full)
length(unique(DRIP_full$study_accession))
unique(DRIP_full$study_accession)
SRP010068 <- dbGetQuery("SELECT * FROM sra WHERE study_accession = 'SRP010068'")
devtools::load_all()
SRP010068 <- dbGetQuery("SELECT * FROM sra WHERE study_accession = 'SRP010068'")
library(SRAdb)
library(GEOmetadb)
SRP010068 <- dbGetQuery("SELECT * FROM sra WHERE study_accession = 'SRP010068'")
library(DBI)
SRP010068 <- dbGetQuery("SELECT * FROM sra WHERE study_accession = 'SRP010068'")
SRP010068 <- dbGetQuery("SELECT * FROM sra WHERE study_accession = 'SRP010068'")
dbGetQuery("SELECT count(*) FROM sra")
SRP010068 <- dbGetQuery(sra_con, "SELECT * FROM sra WHERE study_accession = 'SRP010068'")
View(viewSamples_db(SRP010068))
View(SRP010068)
getwd()
devtools::load_all()
searchForTerm(library_strategy = "ChIP-Seq", antibody = "STAT1", secondary_library_strategy = "RNA-Seq")
devtools::load_all()
devtools::load_all()
getwd()
