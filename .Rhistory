viewSamples_sp <- function(df){
int_columns <- c("run_accession", "experiment_accession", "study_accession", "run_alias", "experiment_title", "study_alias", "sample_name", "library_name", "sample_attribute", "taxon_id", "library_strategy", "input")
indices <- integer()
for (i in int_columns){
indices <- append(indices, grep(i, colnames(df)))
}
df <- df[, indices]
return(df)
}
paf1b_extr <- viewSamples_sp(paf1b)
View(paf1b_extr)
viewSamples_sp <- function(df){
int_columns <- c("run_accession", "experiment_accession", "study_accession", "run_alias", "experiment_title", "study_alias", "sample_name", "library_name", "sample_attribute", "taxon_id", "library_strategy", "input", "sa_antibody", "sa_gene", "sa_tissue")
indices <- integer()
for (i in int_columns){
indices <- append(indices, grep(i, colnames(df)))
}
df <- df[, indices]
return(df)
}
paf1b_extr <- viewSamples_sp(paf1b)
View(paf1b_extr)
viewSamples_sp <- function(df){
int_columns <- c("run_accession", "experiment_accession", "study_accession", "run_alias", "experiment_title", "study_alias", "sample_name", "library_name", "sample_attribute", "taxon_id", "library_strategy", "input", "sa_antibody", "sa_gene", "sa_tissue", "sa_treatment")
indices <- integer()
for (i in int_columns){
indices <- append(indices, grep(i, colnames(df)))
}
df <- df[, indices]
return(df)
}
paf1b_extr <- viewSamples_sp(paf1b)
View(paf1b_extr)
temp <- searchForAccession(c("SRR1607720", "SRR1607741"))
View(temp)
View(viewSamples_db(temp))
temp <- searchForAccession(c("SRR4101221", "SRR4101222, "SRR4101223", "SRR4101224"))
temp <- searchForAccession(c("SRR4101221", "SRR4101222", "SRR4101223", "SRR4101224"))
View(temp)
View(viewSamples_db(temp))
temp <- searchForAccession(c("SRR408105", "SRR408106"))
View(viewSamples_db(temp))
temp <- searchForAccession(c("SRR408110
"))
temp <- searchForAccession(c("SRR408110"))
View(viewSamples_db(temp))
View(paf1b_extr)
rm(all_list)
identical(paf1a, paf1b)
View(paf1)
rm(paf1)
paf1 <- paf1a
paf1_extr <- paf1b_extr
rm(paf1b_extr)
View(temp2)
rm(temp)
rm(temp2)
rm(temp3)
rm(temp4)
rm(temp5)
View(x)
rm(paf1a)
rm(paf1b)
rm(sample_list)
rm(spider_combined)
rm(spider_sra_attr)
rm(samples)
View(p4)
rm(v)
viewSamples_db <- function(df){
#function for visualising SRA_db-like dfs
int_columns <- c("run_accession", "experiment_accession", "study_accession", "run_alias", "experiment_title", "study_alias", "sample_name", "library_name", "sample_attribute", "taxon_id", "library_strategy")
indices <- integer()
for (i in int_columns){
indices <- append(indices, grep(i, colnames(df)))
}
df <- df[, indices]
return(df)
}
viewSamples_sp <- function(df){
#function for visualising spider_combined-type dfs
int_columns <- c("run_accession", "experiment_accession", "study_accession", "run_alias", "experiment_title", "study_alias", "sample_name", "library_name", "sample_attribute", "taxon_id", "library_strategy", "input", "sa_antibody", "sa_gene", "sa_tissue", "sa_treatment")
indices <- integer()
for (i in int_columns){
indices <- append(indices, grep(i, colnames(df)))
}
df <- df[, indices]
return(df)
}
rm(tars)
rm(tar)
View(t2)
rm(t2)
View(t)
rm(t)
rm(ex1)
rm(chunk)
rm(current_chunk)
rm(db_df)
dr1
rm(dr1)
rm(dr1b)
rm(dr2)
rm(f)
rm(gs)
rm(inputs)
View(inv)
rm(inv)
View(output_df)
rm(output_df)
rm(p)
rm(p2)
rm(p3)
rm(p4)
search()
devtools::load_all()
.GlobalEnv$sra_con <- dbConnect(SQLite(), dbname = 'SRAmetadb.sqlite')
.GlobalEnv$geo_con <- dbConnect(SQLite(),'GEOmetadb.sqlite')
dbGetQuery(sra_con, "SELECT rowid, project accession, experiment_accession, run_accession FROM project_accession, experiment_accession, run_accession ORDER BY project_accession GROUP BY RANDOM () LIMIT 50")
dbGetQuery(sra_con, "SELECT rowid, project accession, experiment_accession, run_accession FROM project_accession, experiment_accession, run_accession GROUP BY RANDOM () ORDER BY project_accession LIMIT 50")
dbGetQuery(sra_con, "SELECT rowid, study_accession, experiment_accession, run_accession FROM project_accession, experiment_accession, run_accession GROUP BY RANDOM () ORDER BY study_accession LIMIT 50")
dbGetQuery(sra_con, "SELECT rowid, study_accession, experiment_accession, run_accession FROM sra GROUP BY RANDOM () ORDER BY study_accession LIMIT 50")
dbGetQuery(sra_con, "SELECT rowid, study_accession, experiment_accession, run_accession FROM sra GROUP BY RANDOM () ORDER BY study_accession LIMIT 50")
dbGetQuery(sra_con, "SELECT count(*) FROM sra")
dbGetQuery(sra_con, "SELECT study_accession, experiment_accession, run_accession FROM sra WHERE experiment_accession = 'SRX317247'")
dbGetQuery(sra_con, "SELECT study_accession, experiment_accession, run_accession FROM sra WHERE study_accession = '-'")
dbGetQuery(sra_con, "SELECT rowid, study_accession, experiment_accession, run_accession FROM sra ORDER BY study_accession LIMIT 50")
dbGetQuery(sra_con, "SELECT rowid, study_accession, experiment_accession, run_accession FROM sra ORDER BY study_accession LIMIT 150")
?dbConnect
db_df <- data.frame()
rs <- dbSendQuery(sra_con, "SELECT
run_accession,
experiment_accession,
sample_accession,
study_accession,
run_alias, #For GSM
experiment_attribute #For GSM
FROM sra WHERE run_alias LIKE 'GSM%' OR experiment_attribute LIKE '%GSM%'")
#while (!dbHasCompleted(rs)){
chunk <- dbFetch(rs, 1000)
#Create intermediate columns for extracting GSM information
chunk$run_gsm <- NA #from run_alias
chunk$exp_gsm <- NA #from experiment_attribute
#Find indices where GSM is present
run_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$run_alias)
#exp_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$experiment_attribute)
exp_gsm_indices <- grepl("GEO Accession: GSM\\d\\d\\d+", chunk$experiment_attribute)
#Extract GSM information
chunk$run_gsm[run_gsm_indices] <- gsub(".*?(GSM\\d\\d\\d+).*", "\\1", chunk$run_alias[run_gsm_indices])
chunk$exp_gsm[exp_gsm_indices] <- gsub(".*?GEO Accession: (GSM\\d\\d\\d+).*", "\\1", chunk$experiment_attribute[exp_gsm_indices])
#Create a column to indicate whether GSMs agree between two columns
chunk$gsm_check <- NA
#Fill in check column
both_indices <- !(is.na(chunk$run_gsm) | is.na(chunk$exp_gsm)) #Get indices where run_alias and experiment_attribute are both present
chunk$gsm_check[both_indices] <- chunk$run_gsm[both_indices] == chunk$exp_gsm[both_indices] #Check those indices for equality
#GSM_CHECK: NA - either one or both missing
#           F - run_gsm and exp_gsm NOT the same
#           T - run_gsm and exp_gsm the same
#Create a new column for storing GSMs
chunk$gsm <- NA
#Extract information from exp_gsm and run_gsm columns
chunk$gsm[!is.na(chunk$exp_gsm)] <- chunk$exp_gsm[!is.na(chunk$exp_gsm)] #Non-NA entries from experiment_attribute
chunk$gsm[!is.na(chunk$run_gsm)] <- chunk$run_gsm[!is.na(chunk$run_gsm)] #Non-NA entries from run_alias
#NOTE: if both exp_gsm and run_gsm are present, the GSM obtained from run_alias will be retained
#Chunk columns at present: "run_accession", "experiment_accession", "sample_accession", "study_accession", "run_alias", "experiment_attribute", "run_gsm", "exp_gsm", "gsm_check"
#Select columns
chunk <- chunk[,c("run_accession", "experiment_accession", "sample_accession", "study_accession", "gsm", "gsm_check")]
#Get the number of entries with GSM content
print(sum(run_gsm_indices | exp_gsm_indices))
db_df <- rbind(db_df, chunk)
#}
order_columns <- list(db_df$study_accession,
db_df$sample_accession,
db_df$experiment_accession,
db_df$run_accession,
db_df$gsm)
db_df <- db_df[digitSort(order_columns),]
srr_gsm <- dbConnect(SQLite(), dbname = 'SRR_GSM.sqlite')
dbWriteTable(conn = srr_gsm, name = "srr_gsm", value = "db_df")
db_df <- data.frame()
rs <- dbSendQuery(sra_con, "SELECT
run_accession,
experiment_accession,
sample_accession,
study_accession,
run_alias, --For GSM
experiment_attribute --For GSM
FROM sra WHERE run_alias LIKE 'GSM%' OR experiment_attribute LIKE '%GSM%'")
#while (!dbHasCompleted(rs)){
chunk <- dbFetch(rs, 1000)
#Create intermediate columns for extracting GSM information
chunk$run_gsm <- NA #from run_alias
chunk$exp_gsm <- NA #from experiment_attribute
#Find indices where GSM is present
run_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$run_alias)
#exp_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$experiment_attribute)
exp_gsm_indices <- grepl("GEO Accession: GSM\\d\\d\\d+", chunk$experiment_attribute)
#Extract GSM information
chunk$run_gsm[run_gsm_indices] <- gsub(".*?(GSM\\d\\d\\d+).*", "\\1", chunk$run_alias[run_gsm_indices])
chunk$exp_gsm[exp_gsm_indices] <- gsub(".*?GEO Accession: (GSM\\d\\d\\d+).*", "\\1", chunk$experiment_attribute[exp_gsm_indices])
#Create a column to indicate whether GSMs agree between two columns
chunk$gsm_check <- NA
#Fill in check column
both_indices <- !(is.na(chunk$run_gsm) | is.na(chunk$exp_gsm)) #Get indices where run_alias and experiment_attribute are both present
chunk$gsm_check[both_indices] <- chunk$run_gsm[both_indices] == chunk$exp_gsm[both_indices] #Check those indices for equality
#GSM_CHECK: NA - either one or both missing
#           F - run_gsm and exp_gsm NOT the same
#           T - run_gsm and exp_gsm the same
#Create a new column for storing GSMs
chunk$gsm <- NA
#Extract information from exp_gsm and run_gsm columns
chunk$gsm[!is.na(chunk$exp_gsm)] <- chunk$exp_gsm[!is.na(chunk$exp_gsm)] #Non-NA entries from experiment_attribute
chunk$gsm[!is.na(chunk$run_gsm)] <- chunk$run_gsm[!is.na(chunk$run_gsm)] #Non-NA entries from run_alias
#NOTE: if both exp_gsm and run_gsm are present, the GSM obtained from run_alias will be retained
#Chunk columns at present: "run_accession", "experiment_accession", "sample_accession", "study_accession", "run_alias", "experiment_attribute", "run_gsm", "exp_gsm", "gsm_check"
#Select columns
chunk <- chunk[,c("run_accession", "experiment_accession", "sample_accession", "study_accession", "gsm", "gsm_check")]
#Get the number of entries with GSM content
print(sum(run_gsm_indices | exp_gsm_indices))
db_df <- rbind(db_df, chunk)
#}
order_columns <- list(db_df$study_accession,
db_df$sample_accession,
db_df$experiment_accession,
db_df$run_accession,
db_df$gsm)
db_df <- db_df[digitSort(order_columns),]
srr_gsm <- dbConnect(SQLite(), dbname = 'SRR_GSM.sqlite')
dbWriteTable(conn = srr_gsm, name = "srr_gsm", value = "db_df")
dbListTables(srr_gsm)
dbWriteTable(conn = srr_gsm, name = "srr_gsm", value = db_df)
dbListTables(srr_gsm)
t <- dbGetQuery(srr_gsm, "SELECT * FROM srr_gsm")
View(t)
is.identical(t, db_df)
identical(t, db_df)
View(db_df)
str(t)
str(db_df)
sum(db_df[,i]==t[,i])
i = 1
sum(db_df[,i]==t[,i])
i = 2
sum(db_df[,i]==t[,i])
i = 3
sum(db_df[,i]==t[,i])
i = 4
sum(db_df[,i]==t[,i])
i = 5
sum(db_df[,i]==t[,i])
i = 6
sum(db_df[,i]==t[,i])
identical(t[,1:5], db_df[,1:5])
db_df <- data.frame()
rs <- dbSendQuery(sra_con, "SELECT
run_accession,
experiment_accession,
sample_accession,
study_accession,
run_alias, --For GSM
experiment_attribute --For GSM
FROM sra WHERE run_alias LIKE 'GSM%' OR experiment_attribute LIKE '%GSM%'")
#while (!dbHasCompleted(rs)){
chunk <- dbFetch(rs, 1000)
#Create intermediate columns for extracting GSM information
chunk$run_gsm <- NA #from run_alias
chunk$exp_gsm <- NA #from experiment_attribute
#Find indices where GSM is present
run_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$run_alias)
#exp_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$experiment_attribute)
exp_gsm_indices <- grepl("GEO Accession: GSM\\d\\d\\d+", chunk$experiment_attribute)
#Extract GSM information
chunk$run_gsm[run_gsm_indices] <- gsub(".*?(GSM\\d\\d\\d+).*", "\\1", chunk$run_alias[run_gsm_indices])
chunk$exp_gsm[exp_gsm_indices] <- gsub(".*?GEO Accession: (GSM\\d\\d\\d+).*", "\\1", chunk$experiment_attribute[exp_gsm_indices])
#Create a column to indicate whether GSMs agree between two columns
chunk$gsm_check <- NA
#Fill in check column
both_indices <- !(is.na(chunk$run_gsm) | is.na(chunk$exp_gsm)) #Get indices where run_alias and experiment_attribute are both present
chunk$gsm_check[both_indices] <- chunk$run_gsm[both_indices] == chunk$exp_gsm[both_indices] #Check those indices for equality
#GSM_CHECK: NA - either one or both missing
#           F - run_gsm and exp_gsm NOT the same
#           T - run_gsm and exp_gsm the same
#Create a new column for storing GSMs
chunk$gsm <- NA
#Extract information from exp_gsm and run_gsm columns
chunk$gsm[!is.na(chunk$exp_gsm)] <- chunk$exp_gsm[!is.na(chunk$exp_gsm)] #Non-NA entries from experiment_attribute
chunk$gsm[!is.na(chunk$run_gsm)] <- chunk$run_gsm[!is.na(chunk$run_gsm)] #Non-NA entries from run_alias
#NOTE: if both exp_gsm and run_gsm are present, the GSM obtained from run_alias will be retained
#Chunk columns at present: "run_accession", "experiment_accession", "sample_accession", "study_accession", "run_alias", "experiment_attribute", "run_gsm", "exp_gsm", "gsm_check"
#Select columns
chunk <- chunk[,c("run_accession", "experiment_accession", "sample_accession", "study_accession", "gsm", "gsm_check")]
#Get the number of entries with GSM content
print(sum(run_gsm_indices | exp_gsm_indices))
db_df <- rbind(db_df, chunk)
#}
db_df <- unique(db_df)
order_columns <- list(db_df$study_accession,
db_df$sample_accession,
db_df$experiment_accession,
db_df$run_accession,
db_df$gsm)
db_df <- db_df[digitSort(order_columns),]
srr_gsm <- dbConnect(SQLite(), dbname = 'SRR_GSM.sqlite')
dbWriteTable(conn = srr_gsm, name = "srr_gsm", value = db_df)
db_df <- data.frame()
rs <- dbSendQuery(sra_con, "SELECT
run_accession,
experiment_accession,
sample_accession,
study_accession,
run_alias, --For GSM
experiment_attribute --For GSM
FROM sra WHERE run_alias LIKE 'GSM%' OR experiment_attribute LIKE '%GSM%'")
#while (!dbHasCompleted(rs)){
chunk <- dbFetch(rs, 1000)
#Create intermediate columns for extracting GSM information
chunk$run_gsm <- NA #from run_alias
chunk$exp_gsm <- NA #from experiment_attribute
#Find indices where GSM is present
run_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$run_alias)
#exp_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$experiment_attribute)
exp_gsm_indices <- grepl("GEO Accession: GSM\\d\\d\\d+", chunk$experiment_attribute)
#Extract GSM information
chunk$run_gsm[run_gsm_indices] <- gsub(".*?(GSM\\d\\d\\d+).*", "\\1", chunk$run_alias[run_gsm_indices])
chunk$exp_gsm[exp_gsm_indices] <- gsub(".*?GEO Accession: (GSM\\d\\d\\d+).*", "\\1", chunk$experiment_attribute[exp_gsm_indices])
#Create a column to indicate whether GSMs agree between two columns
chunk$gsm_check <- NA
#Fill in check column
both_indices <- !(is.na(chunk$run_gsm) | is.na(chunk$exp_gsm)) #Get indices where run_alias and experiment_attribute are both present
chunk$gsm_check[both_indices] <- chunk$run_gsm[both_indices] == chunk$exp_gsm[both_indices] #Check those indices for equality
#GSM_CHECK: NA - either one or both missing
#           F - run_gsm and exp_gsm NOT the same
#           T - run_gsm and exp_gsm the same
#Create a new column for storing GSMs
chunk$gsm <- NA
#Extract information from exp_gsm and run_gsm columns
chunk$gsm[!is.na(chunk$exp_gsm)] <- chunk$exp_gsm[!is.na(chunk$exp_gsm)] #Non-NA entries from experiment_attribute
chunk$gsm[!is.na(chunk$run_gsm)] <- chunk$run_gsm[!is.na(chunk$run_gsm)] #Non-NA entries from run_alias
#NOTE: if both exp_gsm and run_gsm are present, the GSM obtained from run_alias will be retained
#Chunk columns at present: "run_accession", "experiment_accession", "sample_accession", "study_accession", "run_alias", "experiment_attribute", "run_gsm", "exp_gsm", "gsm_check"
#Select columns
chunk <- chunk[,c("run_accession", "experiment_accession", "sample_accession", "study_accession", "gsm", "gsm_check")]
#Get the number of entries with GSM content
print(sum(run_gsm_indices | exp_gsm_indices))
db_df <- rbind(db_df, chunk)
#}
db_df <- unique(db_df)
order_columns <- list(db_df$study_accession,
db_df$sample_accession,
db_df$experiment_accession,
db_df$run_accession,
db_df$gsm)
db_df <- db_df[digitSort(order_columns),]
srr_gsm <- dbConnect(SQLite(), dbname = 'SRR_GSM.sqlite')
dbWriteTable(conn = srr_gsm, name = "srr_gsm", value = db_df)
View(db_df)
dbListFields(srr_gsm, "srr_gsm")
# Creating a new database for SRA runs:
#IDEA
# find entries which contain GSM in run alias
#                               or in experiment_attribute (GEO Accession: GSM)
#BY CHUNK
#Select: SRR, SRX, SRS, SRP, run_alias, experiment_attribute
#create two new columns: run_gsm, exp_gsm
#do grepl(gsm) on run_alias and experiment_attribute
#for grepled rows, extract run_gsm and exp_gsm respectively
#check two columns are identical - if not, have a false in a new column
#MERGE CHUNKS
#WRITE AS AN SQLITE FILE (ESTABLISH THE CONNECTION?)
db_df <- data.frame()
rs <- dbSendQuery(sra_con, "SELECT
run_accession,
experiment_accession,
sample_accession,
study_accession,
run_alias, --For GSM
experiment_attribute --For GSM
FROM sra WHERE run_alias LIKE 'GSM%' OR experiment_attribute LIKE '%GSM%'")
while (!dbHasCompleted(rs)){
chunk <- dbFetch(rs, 1000)
#Create intermediate columns for extracting GSM information
chunk$run_gsm <- NA #from run_alias
chunk$exp_gsm <- NA #from experiment_attribute
#Find indices where GSM is present
run_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$run_alias)
#exp_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$experiment_attribute)
exp_gsm_indices <- grepl("GEO Accession: GSM\\d\\d\\d+", chunk$experiment_attribute)
#Extract GSM information
chunk$run_gsm[run_gsm_indices] <- gsub(".*?(GSM\\d\\d\\d+).*", "\\1", chunk$run_alias[run_gsm_indices])
chunk$exp_gsm[exp_gsm_indices] <- gsub(".*?GEO Accession: (GSM\\d\\d\\d+).*", "\\1", chunk$experiment_attribute[exp_gsm_indices])
#Create a column to indicate whether GSMs agree between two columns
chunk$gsm_check <- NA
#Fill in check column
both_indices <- !(is.na(chunk$run_gsm) | is.na(chunk$exp_gsm)) #Get indices where run_alias and experiment_attribute are both present
chunk$gsm_check[both_indices] <- chunk$run_gsm[both_indices] == chunk$exp_gsm[both_indices] #Check those indices for equality
#GSM_CHECK: NA - either one or both missing
#           F - run_gsm and exp_gsm NOT the same
#           T - run_gsm and exp_gsm the same
#Create a new column for storing GSMs
chunk$gsm <- NA
#Extract information from exp_gsm and run_gsm columns
chunk$gsm[!is.na(chunk$exp_gsm)] <- chunk$exp_gsm[!is.na(chunk$exp_gsm)] #Non-NA entries from experiment_attribute
chunk$gsm[!is.na(chunk$run_gsm)] <- chunk$run_gsm[!is.na(chunk$run_gsm)] #Non-NA entries from run_alias
#NOTE: if both exp_gsm and run_gsm are present, the GSM obtained from run_alias will be retained
#Chunk columns at present: "run_accession", "experiment_accession", "sample_accession", "study_accession", "run_alias", "experiment_attribute", "run_gsm", "exp_gsm", "gsm_check"
#Select columns
chunk <- chunk[,c("run_accession", "experiment_accession", "sample_accession", "study_accession", "gsm", "gsm_check")]
#Get the number of entries with GSM content
print(sum(run_gsm_indices | exp_gsm_indices))
db_df <- rbind(db_df, chunk)
}
rm(rs)
rm(srr_gsm)
# Creating a new database for SRA runs:
#IDEA
# find entries which contain GSM in run alias
#                               or in experiment_attribute (GEO Accession: GSM)
#BY CHUNK
#Select: SRR, SRX, SRS, SRP, run_alias, experiment_attribute
#create two new columns: run_gsm, exp_gsm
#do grepl(gsm) on run_alias and experiment_attribute
#for grepled rows, extract run_gsm and exp_gsm respectively
#check two columns are identical - if not, have a false in a new column
#MERGE CHUNKS
#WRITE AS AN SQLITE FILE (ESTABLISH THE CONNECTION?)
db_df <- data.frame()
rs <- dbSendQuery(sra_con, "SELECT
run_accession,
experiment_accession,
sample_accession,
study_accession,
run_alias, --For GSM
experiment_attribute --For GSM
FROM sra WHERE run_alias LIKE 'GSM%' OR experiment_attribute LIKE '%GSM%'")
while (!dbHasCompleted(rs)){
chunk <- dbFetch(rs, 1000)
#Create intermediate columns for extracting GSM information
chunk$run_gsm <- NA #from run_alias
chunk$exp_gsm <- NA #from experiment_attribute
#Find indices where GSM is present
run_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$run_alias)
#exp_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$experiment_attribute)
exp_gsm_indices <- grepl("GEO Accession: GSM\\d\\d\\d+", chunk$experiment_attribute)
#Extract GSM information
chunk$run_gsm[run_gsm_indices] <- gsub(".*?(GSM\\d\\d\\d+).*", "\\1", chunk$run_alias[run_gsm_indices])
chunk$exp_gsm[exp_gsm_indices] <- gsub(".*?GEO Accession: (GSM\\d\\d\\d+).*", "\\1", chunk$experiment_attribute[exp_gsm_indices])
#Create a column to indicate whether GSMs agree between two columns
chunk$gsm_check <- NA
#Fill in check column
both_indices <- !(is.na(chunk$run_gsm) | is.na(chunk$exp_gsm)) #Get indices where run_alias and experiment_attribute are both present
chunk$gsm_check[both_indices] <- chunk$run_gsm[both_indices] == chunk$exp_gsm[both_indices] #Check those indices for equality
#GSM_CHECK: NA - either one or both missing
#           F - run_gsm and exp_gsm NOT the same
#           T - run_gsm and exp_gsm the same
#Create a new column for storing GSMs
chunk$gsm <- NA
#Extract information from exp_gsm and run_gsm columns
chunk$gsm[!is.na(chunk$exp_gsm)] <- chunk$exp_gsm[!is.na(chunk$exp_gsm)] #Non-NA entries from experiment_attribute
chunk$gsm[!is.na(chunk$run_gsm)] <- chunk$run_gsm[!is.na(chunk$run_gsm)] #Non-NA entries from run_alias
#NOTE: if both exp_gsm and run_gsm are present, the GSM obtained from run_alias will be retained
#Chunk columns at present: "run_accession", "experiment_accession", "sample_accession", "study_accession", "run_alias", "experiment_attribute", "run_gsm", "exp_gsm", "gsm_check"
#Select columns
chunk <- chunk[,c("run_accession", "experiment_accession", "sample_accession", "study_accession", "gsm", "gsm_check")]
#Get the number of entries with GSM content
print(sum(run_gsm_indices | exp_gsm_indices))
db_df <- rbind(db_df, chunk)
}
#Remove duplicates
db_df <- unique(db_df)
#Order
order_columns <- list(db_df$study_accession,
db_df$sample_accession,
db_df$experiment_accession,
db_df$run_accession,
db_df$gsm)
db_df <- db_df[digitSort(order_columns),]
#Save df as an slite object
srr_gsm <- dbConnect(SQLite(), dbname = 'SRR_GSM.sqlite')
dbWriteTable(conn = srr_gsm, name = "srr_gsm", value = db_df)
dim(db_df)
View(db_df)
i <- dbGetQuery(sra_con, "SELECT * FROM sra WHERE study_accession = 'SRP000179'")
View(i)
io <- i[digitSort(list(i$experiment_accession,i$run_accession)),]
View(io)
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE run_alias LIKE 'GSM%' OR experiment_attribute LIKE '%GSM%'")
ii <- dbGetQuery(sra_con, "SELECT * FROM sra WHERE run_accession ='SRR271943'")
View(ii)
saveRDS(db_df, "srr_gsm_database.Rda")
db_df_f <- db_df[,db_df$gsm_check=="FALSE"]
db_df_f <- db_df[db_df$gsm_check=="FALSE",]
View(db_df_f)
db_df_f <- db_df[which(db_df$gsm_check=="FALSE"),]
saveRDS(db_df_f, "srr_gsm_database_gsm_check_FALSE.Rda")
write.table(db_df_f, "srr_gsm_database_gsm_check_FALSE.csv", sep = ",")
View(db_df_f)
ii <- dbGetQuery(sra_con, "SELECT * FROM sra WHERE run_accession ='SRR271944'")
View(ii)
ii <- dbGetQuery(sra_con, "SELECT * FROM sra WHERE run_accession ='SRR271642'")
View(ii)
ii <- dbGetQuery(sra_con, "SELECT * FROM sra WHERE run_accession ='SRR488372'")
View(ii)
ii <- dbGetQuery(sra_con, "SELECT * FROM sra WHERE run_accession ='SRR488371'")
View(ii)
rs
dbClearResult(rs)
rs
search()
devtools::load_all()
devtools::load_all()
rm(sra_con)
rm(geo_con)
