if (outcome){
print("Ordering was successful!")
}
return(outcome)
}
checkOrder(a, "orderAccessions")
#Modified version for dealing with lists
orderAccessions <- function(x, na.last = TRUE){
#Function for ordering accessions
# - ignores alphanumeric strings (removes them for the purpose of ordering)
# - returns order based on the order of numeric remainder
# - NAs are treated separately - and returned at the end (unless na.last = FALSE)
print("Running orderAccessions")
if(class(x)!="list"){
#Convert "NA" and "" to NA
x <- naConverter(x)
x_i <- rep(0, length(x))
#Indices of NA
x_i_na <- which(is.na(x))
print("x_i_na")
print(x_i_na)
#Indices of non-NA values
x_i_val <- which(!is.na(x))
print("x_i_val")
print(x_i_val)
#Stop if the values do not conform to alphanumeric requirement
#Might relieve this requirement in the future
if ( sum(grepl("^[[:alnum:]]*$", x[x_i_val])) != length(x[x_i_val]) ){
stop("Only alphanumeric characters are allowed")
}
#Remove alphanumeric characters and convert remainder to numeric
x_num <- as.numeric(gsub("[[:alpha:]]", "", x[x_i_val]))
print("x_num")
print(x_num)
#Order numeric remainders
#x_i_num - vector of ordered
x_i_num <- order(x_num)
print("x_i_num")
print(x_i_num)
x_i_val <- x_i_val[x_i_num]
print("x_i_val")
print(x_i_val)
if (na.last == TRUE){
x_i <- c(x_i_val, x_i_na)
}
if (na.last == FALSE){
x_i <- c(x_i_na, x_i_val)
}
} else {
print(x)
#PROCEDURE FOR LISTS
#INITIALISE SOMETHING...???
t <- x #Make a copy of x
for (i in seq_along(x)){
#Convert "NA" and "" to NA
x[[i]] <- naConverter(x[[i]])
x_i <- rep(0, length(x)) #Keeping it as a vector (will get overwritten on each iteration)
#Indices of NA #Seem unneeded here
#x_i_na <- which(is.na(x[[i]]))
#print("x_i_na")
#print(x_i_na)
#Indices of non-NA values
x_i_val <- which(!is.na(x[[i]]))
print("x_i_val")
print(x_i_val)
#Stop if the values do not conform to alphanumeric requirement
#Might relieve this requirement in the future
if ( sum(grepl("^[[:alnum:]]*$", x[[i]][x_i_val])) != length(x[[i]][x_i_val]) ){
stop("Only alphanumeric characters are allowed")
}
#Remove alphanumeric characters and convert remainder to numeric
t[[i]][x_i_val] <- as.numeric(gsub("[[:alpha:]]", "", x[[i]][x_i_val]))
t[[i]] <- as.numeric(t[[i]])
print(t[[i]])
}
#x_i <- do.call(order, list(x=t, na.last = na.last)) #t is already a list #Does not work
#x_i <- do.call(order, t) #t is already a list #Minimal version, which does not implement na.last
x_i <- do.call(order, c(x=t, na.last = na.last))
}
print(x_i)
print("orderAccessions completed")
return(x_i)
}
checkOrder(a, "orderAccessions")
b1 <- c(rep("c1", 3), rep("b2", 3), rep("a3", 3))
b2 <- c(11:13, 21:23, 31:33)
b <- list(b1, b2)
orderAccessions <- function(x, na.last = TRUE){
# - warning if not just alphanumeric
# - remove alpha
# - sort by numeric
x_num <- list()
for (i in seq_along(x)){
if ( sum(grepl("^[[:alnum:]]*$", x[[i]])) != length(x[[i]]) ){
stop("Only alphanumeric characters are allowed")
}
#Remove alphanumeric characters and convert remainder to numeric
x_num[[i]] <- as.numeric(gsub("[[:alpha:]]", "", x[[i]]))
}
ord <- do.call(order, c(x_num, na.last = na.last))
return(ord)
}
checkOrder(a, "orderAccessions")
c1 <- c(rep("c1", 3), rep("b2", 3), rep("a3", 3))
c2 <- c(31:33, 11:13, 21:23)
c <- list(c1, c2)
checkOrder(c, "orderAccessions")
c1 <- c(rep("c1", 3), rep("b2", 3), rep("a3", 3))
c2 <- c(31:33, 11:13, 21:23)
c1 <- c(c1, NA, NA)
c2 <- c(c2, NA, NA)
c <- list(c1, c2)
checkOrder(c, "orderAccessions")
orderAccessions <- function(x, na.last = TRUE){
# - warning if not just alphanumeric
# - remove alpha
# - sort by numeric
x_num <- list()
for (i in seq_along(x)){
print(sum(grepl("^[[:alnum:]]*$", x[[i]])))
if ( sum(grepl("^[[:alnum:]]*$", x[[i]])) != length(x[[i]]) ){
stop("Only alphanumeric characters are allowed")
}
#Remove alphanumeric characters and convert remainder to numeric
x_num[[i]] <- as.numeric(gsub("[[:alpha:]]", "", x[[i]]))
}
ord <- do.call(order, c(x_num, na.last = na.last))
return(ord)
}
checkOrder(c, "orderAccessions")
orderAccessions <- function(x, na.last = TRUE){
# - warning if not just alphanumeric
# - remove alpha
# - sort by numeric
x_num <- list()
for (i in seq_along(x)){
#print(sum(grepl("^[[:alnum:]]*$", x[[i]])))
n_nas <- sum(is.na(x[[i]]))
if ( sum(grepl("^[[:alnum:]]*$", x[[i]])) != (length(x[[i]]) - n_nas) ){
stop("Only alphanumeric characters are allowed")
}
#Remove alphanumeric characters and convert remainder to numeric
x_num[[i]] <- as.numeric(gsub("[[:alpha:]]", "", x[[i]]))
}
ord <- do.call(order, c(x_num, na.last = na.last))
return(ord)
}
checkOrder(c, "orderAccessions")
orderAccessions <- function(x, na.last = TRUE){
# - warning if not just alphanumeric
# - remove alpha
# - sort by numeric
x_num <- list()
for (i in seq_along(x)){
n_nas <- sum(is.na(x[[i]])) # NOTE: NAs do not give TRUE on grepl below
if ( sum(grepl("^[[:alnum:]]*$", x[[i]])) != (length(x[[i]]) - n_nas) ){
stop("Only alphanumeric characters are allowed")
}
#Remove alphanumeric characters and convert remainder to numeric
x_num[[i]] <- as.numeric(gsub("[[:alpha:]]", "", x[[i]]))
}
ord <- do.call(order, c(x_num, na.last = na.last))
return(ord)
}
checkOrder(c, "orderAccessions")
d <- c("SRP1", "DRP02", "SRP20", "ERP000500")
checkOrder(d, "orderAccessions")
checkOrder(1:10, "orderAccessions")
checkOrder <- function(x, order_function){
# A function which shuffles lists and uses an ordering function to order the list
# Args:
# x - list (should be in desired order!)
# order_function - name of the ordering function to be used
# Returns:
# logical (whether ordering led to identical list as provided on input)
# ALSO: prints results etc.
#
print("Original list:")
print(x)
x_original <- x # Make a copy
x <- shuffleList(x)
print("Shuffled list:")
print(x)
x_shuffled <- x # Store shuffled x
if (is.list(x_shuffled)){
ord <- do.call(order_function, list(x_shuffled)) # NOTE: must pass the list wrapped as a list
} else {
ord <- do.call(order_function, x_shuffled) # NOTE: must pass the list wrapped as a list
}
print(ord)
for (i in seq_along(x)){
x[[i]] <- x[[i]][ord]
}
print("List after ordering:")
print(x)
outcome <- identical(x_original, x)
if (outcome){
print("Ordering was successful!")
}
return(outcome)
}
checkOrder(1:10, "orderAccessions")
checkOrder(1:10, "order")
list(1:10)
#=============================================================
checkOrder <- function(x, order_function){
# A function which shuffles lists and uses an ordering function to order the list
# Args:
# x - list (should be in desired order!)
# order_function - name of the ordering function to be used
# Returns:
# logical (whether ordering led to identical list as provided on input)
# ALSO: prints results etc.
#
print("Original list:")
print(x)
x_original <- x # Make a copy
x <- shuffleList(x)
print("Shuffled list:")
print(x)
x_shuffled <- x # Store shuffled x
if (is.list(x_shuffled)){
ord <- do.call(order_function, list(x_shuffled)) # NOTE: must pass the list wrapped as a list
} else {
ord <- do.call(order_function, list(list(x_shuffled))) # NOTE: must pass the list wrapped as a list
}
print(ord)
for (i in seq_along(x)){
x[[i]] <- x[[i]][ord]
}
print("List after ordering:")
print(x)
outcome <- identical(x_original, x)
if (outcome){
print("Ordering was successful!")
}
return(outcome)
}
#=============================================================
#=============================================================
checkOrder(1:10, "order")
checkOrder(1:10, "orderAccessions")
orderAccessions(1:10)
orderAccessions <- function(x, na.last = TRUE){
# Steps:
# - warning if not just alphanumeric
# - remove alpha
# - sort by numeric
if (is.list(x)){
x_num <- list()
for (i in seq_along(x)){
n_nas <- sum(is.na(x[[i]])) # NOTE: NAs do not give TRUE on grepl below
if ( sum(grepl("^[[:alnum:]]*$", x[[i]])) != (length(x[[i]]) - n_nas) ){
stop("Only alphanumeric characters are allowed")
}
#Remove alphanumeric characters and convert remainder to numeric
x_num[[i]] <- as.numeric(gsub("[[:alpha:]]", "", x[[i]]))
}
ord <- do.call(order, c(x_num, na.last = na.last))
} else {
n_nas <- sum(is.na(x)) # NOTE: NAs do not give TRUE on grepl below
if ( sum(grepl("^[[:alnum:]]*$", x)) != (length(x) - n_nas) ){
stop("Only alphanumeric characters are allowed")
}
#Remove alphanumeric characters and convert remainder to numeric
x_num <- as.numeric(gsub("[[:alpha:]]", "", x))
ord <- do.call(order, c(x_num, na.last = na.last))
}
return(ord)
}
orderAccessions(1:10)
orderAccessions <- function(x, na.last = TRUE){
# Steps:
# - warning if not just alphanumeric
# - remove alpha
# - sort by numeric
if (is.list(x)){
x_num <- list()
for (i in seq_along(x)){
n_nas <- sum(is.na(x[[i]])) # NOTE: NAs do not give TRUE on grepl below
if ( sum(grepl("^[[:alnum:]]*$", x[[i]])) != (length(x[[i]]) - n_nas) ){
stop("Only alphanumeric characters are allowed")
}
#Remove alphanumeric characters and convert remainder to numeric
x_num[[i]] <- as.numeric(gsub("[[:alpha:]]", "", x[[i]]))
}
ord <- do.call(order, c(x_num, na.last = na.last))
} else {
n_nas <- sum(is.na(x)) # NOTE: NAs do not give TRUE on grepl below
if ( sum(grepl("^[[:alnum:]]*$", x)) != (length(x) - n_nas) ){
stop("Only alphanumeric characters are allowed")
}
#Remove alphanumeric characters and convert remainder to numeric
x_num <- as.numeric(gsub("[[:alpha:]]", "", x))
ord <- do.call(order, list(x_num, na.last = na.last))
}
return(ord)
}
orderAccessions(1:10)
b1 <- c(rep("c1", 3), rep("b2", 3), rep("a3", 3))
b2 <- c(11:13, 21:23, 31:33)
b <- list(b1, b2)
checkOrder(b, "orderAccessions")
c1 <- c(rep("c1", 3), rep("b2", 3), rep("a3", 3))
c2 <- c(31:33, 11:13, 21:23)
c1 <- c(c1, NA, NA)
c2 <- c(c2, NA, NA)
c <- list(c1, c2)
checkOrder(c, "orderAccessions")
d <- c("SRP1", "DRP02", "SRP20", "ERP000500")
checkOrder(d, "orderAccessions")
d
class(d)
is.list(d)
d <- c("SRP1", "DRP02", "SRP20", "ERP000500")
checkOrder(d, "orderAccessions")
checkOrder(d, "orderAccessions")
#=============================================================
# Functions for testing an ordering function
#=============================================================
shuffleList <- function(x){
# Function for shuffling 2nd levels of lists (designed to work on a list of vectors)
# Args:
# x - list to be shuffled
# Returns:
# shuffled x (relationships between levels are preserved)
if (is.list(x)){
subs <- length(x)
ind <- sample(1:length(x[[1]]), length(x[[1]]))
for (s in 1:subs){
if (length(ind)!=length(x[[s]])){
stop("Sublists must have the same length")
}
x[[s]] <- x[[s]][ind]
}
} else {
x <- x[sample(1:length(x), length(x))]
}
return(x)
}
checkOrder(d, "orderAccessions")
#=============================================================
checkOrder <- function(x, order_function){
# A function which shuffles lists and uses an ordering function to order the list
# Args:
# x - list (should be in desired order!)
# order_function - name of the ordering function to be used
# Returns:
# logical (whether ordering led to identical list as provided on input)
# ALSO: prints results etc.
#
print("Original list:")
print(x)
x_original <- x # Make a copy
x <- shuffleList(x)
print("Shuffled list:")
print(x)
x_shuffled <- x # Store shuffled x
if (is.list(x_shuffled)){
ord <- do.call(order_function, list(x_shuffled)) # NOTE: must pass the list wrapped as a list
} else {
ord <- do.call(order_function, list(list(x_shuffled))) # NOTE: must pass the list wrapped as a list
}
print(ord)
for (i in seq_along(x)){
x[[i]] <- x[[i]][ord]
}
print("List after ordering:")
print(x)
outcome <- identical(x_original, x)
if (outcome){
print("Ordering was successful!")
}
return(outcome)
}
checkOrder(d, "orderAccessions")
checkOrder <- function(x, order_function){
# A function which shuffles lists and uses an ordering function to order the list
# Args:
# x - list (should be in desired order!)
# order_function - name of the ordering function to be used
# Returns:
# logical (whether ordering led to identical list as provided on input)
# ALSO: prints results etc.
#
print("Original list:")
print(x)
x_original <- x # Make a copy
x <- shuffleList(x)
print("Shuffled list:")
print(x)
x_shuffled <- x # Store shuffled x
if (is.list(x_shuffled)){
ord <- do.call(order_function, list(x_shuffled)) # NOTE: must pass the list wrapped as a list
print(ord)
for (i in seq_along(x)){
x[[i]] <- x[[i]][ord]
}
} else {
ord <- do.call(order_function, list(list(x_shuffled))) # NOTE: must pass the list wrapped as a list
print(ord)
x <- x[ord]
}
print("List after ordering:")
print(x)
outcome <- identical(x_original, x)
if (outcome){
print("Ordering was successful!")
}
return(outcome)
}
#=============================================================
checkOrder(d, "orderAccessions")
d <- c("SRP1", "DRP02", "SRP20", "ERP000500", NA)
checkOrder(d, "orderAccessions")
d1 <- c(rep("SRP1", 3), rep("DRP02", 3), rep("ERP000500", 3), rep(NA, 3))
d2 <- c("e111", "d112", "c113", "788", "789", "790", "c1", "b2", "a3", "11", "12", "13")
d <- list (d1, d2)
checkOrder(d, "orderAccessions")
View(t2)
t2[orderAccessions(list(t2$run_accession, t2$experiment_accession))]
t2[orderAccessions(list(t2$run_accession, t2$experiment_accession)),]
t2[orderAccessions(list(t2$study_accession, t2$sample_accession, t2$experiment_accession, t2$run_accession)),]
t2[orderAccessions(list(t2$study_accession, t2$sample_accession, t2$run_accession)),]
?mass
?MASS
devtools::document()
checkOrder(a, "orderAccessions") # Does not seem to work atm
checkOrder(list(1:10), "orderAccessions") # This works
checkOrder(a, "order") # A demo for order() function
devtools::document()
?orderAccessions
devtools::document()
?orderAccessions
devtools::document()
?orderAccessions
devtools::document()
?orderAccessions
orderAccessions <- function(x, na.last = TRUE){
# Steps (separate tracks for lists and vectors):
# - warning if not just alphanumeric (correct for NAs)
# - remove alpha
# - sort by numeric
if (is.list(x)){
x_num <- list()
for (i in seq_along(x)){
n_nas <- sum(is.na(x[[i]])) # NOTE: NAs do not give TRUE on grepl below
if ( sum(grepl("^[[:alnum:]]*$", x[[i]])) != (length(x[[i]]) - n_nas) ){
stop("Only alphanumeric characters are allowed")
}
#Remove alphanumeric characters and convert remainder to numeric
x_num[[i]] <- as.numeric(gsub("[[:alpha:]]", "", x[[i]]))
}
ord <- do.call(order, c(x_num, na.last = na.last))
} else {
n_nas <- sum(is.na(x)) # NOTE: NAs do not give TRUE on grepl below
if ( sum(grepl("^[[:alnum:]]*$", x)) != (length(x) - n_nas) ){
stop("Only alphanumeric characters are allowed")
}
#Remove alphanumeric characters and convert remainder to numeric
x_num <- as.numeric(gsub("[[:alpha:]]", "", x))
ord <- do.call(order, list(x_num, na.last = na.last))
}
return(ord)
}
devtools::load_all()
devtools::document()
devtools::load_all()
?convertAccession
convertAccession(c("SRP010068", "SRP020088"))
e1<-convertAccession(c("SRP010068", "SRP020088"))
View(e1)
devtools::load_all()
e1b<-convertAccession(c("SRP010068", "SRP020088"))
View(e2)
View(e1b)
browseVignettes(package="dplyr")
devtools::use_vignette("Intro_To_SpideR")
searchForTerm(library_strategy = "ChIP-Seq", antibody = c("p53", "tp53"), species = c("9606", "10090"))
devtools::build()
DBI::dbDisconnect(sra_con)
DBI::dbDisconnect(geo_con)
startSpideR
startSpideR()
startSpideR(getwd())
devtools::build()
.libPaths()
devtools::document(0)
devtools::document()
?startSpideR
devtools::document()
?startSpideR
devtools::document()
?startSpideR
devtools::document()
?orderAccessions
devtools::document()
?startSpideARZ
?startSpideR
?startSpideR
devtools::document()
devtools::document()
?startSpideR
devtools::document()
?startSpideR
devtools::document()
?startSpideR
devtools::document()
devtools::document()
?startSpideR
package?SpideR
devtools::install()
