accession_df <- unique(accession_df)
return(accession_df)
}
View(v)
convertSRA_GEO("GSM881156")
convertSRA_GEO <- function(acc_list, srr_gsm_columns = c("run_accession", "gsm", "gsm_check")){
accession_class <- accessionClassifier(acc_list)
#This is a safeguard in case incomplete SRA accessions had equivalents in GEO
#Can only remove it if it is certain that this is not the case
if (!(accession_class %in% c("run_accession", "gsm"))){
stop("Only SRRs and GSMs are accepted")
}
acc_list <- unique(acc_list)
acc_list <- acc_list[digitSort(acc_list)]
search_count <- 0
accession_df <- data.frame()
query_beg <- paste0("SELECT ", srr_gsm_columns, " FROM srr_gsm WHERE ", accession_class, " = '")
for (a in seq_along(acc_list)){
query <- paste0(query_beg, acc_list[a], "'")
print(query)
chunk <- dbGetQuery(get("srr_gsm"), query)
search_count <- search_count + as.integer(dim(chunk)[1]>=1)
accession_df <- rbind(accession_df, chunk)
}
print(paste0("Found results for ", search_count, " out of ", length(acc_list), " accession search terms"))
if (search_count!=length(acc_list)){
warning("Some accessions were not found in the database")
}
accession_df <- unique(accession_df)
return(accession_df)
}
convertSRA_GEO("GSM881156")
convertSRA_GEO <- function(acc_list, srr_gsm_columns = c("run_accession", "gsm", "gsm_check")){
accession_class <- accessionClassifier(acc_list)
#This is a safeguard in case incomplete SRA accessions had equivalents in GEO
#Can only remove it if it is certain that this is not the case
if (!(accession_class %in% c("run_accession", "gsm"))){
stop("Only SRRs and GSMs are accepted")
}
acc_list <- unique(acc_list)
acc_list <- acc_list[digitSort(acc_list)]
srr_gsm_columns <- paste0(srr_gsm_columns, collapse = ", ")
search_count <- 0
accession_df <- data.frame()
query_beg <- paste0("SELECT ", srr_gsm_columns, " FROM srr_gsm WHERE ", accession_class, " = '")
for (a in seq_along(acc_list)){
query <- paste0(query_beg, acc_list[a], "'")
print(query)
chunk <- dbGetQuery(get("srr_gsm"), query)
search_count <- search_count + as.integer(dim(chunk)[1]>=1)
accession_df <- rbind(accession_df, chunk)
}
print(paste0("Found results for ", search_count, " out of ", length(acc_list), " accession search terms"))
if (search_count!=length(acc_list)){
warning("Some accessions were not found in the database")
}
accession_df <- unique(accession_df)
return(accession_df)
}
convertSRA_GEO("GSM881156")
convertSRA_GEO(c("GSM881156", "GSM881157"))
dbListFields(geo_con, "gsm")
t1 <- data.frame(x=1:4, y=11:14)
t2 <- data.frame(a=1:3, b=c("k", "l", "m"))
t1
t2
merge(t1, t2)
merge(t1,t2, by.x = "x", by.y="a")
merge(t1,t2, by.x = "x", by.y="a", all.x = TRUE)
?merge
merge
getAnywhere(merge)
merge(t1,t2, by.x = "x", by.y="a", all = TRUE)
merge(t1,t2, by.x = "x", by.y="a", all.x = TRUE)
convertAccessions <- function(acc_list){
geo_columns <- c("gsm", "series_id")
#srr_gsm_columns <- c("gsm", "gsm_check", "run_accession")
sra_columns <- c("run_accession", "experiment_accession", "sample_accession", "study_accession")
accession_class <- accessionClassifier(acc_list)
if (!(accession_class %in% c("gsm", "series_id", "run_accesion", "experiment_accession", "sample_accession", "study_accession"))){
stop("Accession needs to belong to one of the supported classes")
}
#=============================================================
# GEO accession as input
#=============================================================
if (accession_class %in% c("gsm", "series_id")){
if (accession_class == "gsm"){
geo_df <- searchGEOForGSM(acc_list, geo_columns)
}
if (accession_class == "series_id"){
geo_df <- searchGEOForGSE(acc_list, geo_columns)
}
srr_gsm_df <- convertSRA_GEO(geo_df$gsm)
sra_df <- searchSRAForAccession(srr_gsm_df$run_accession, sra_columns)
#DOUBLE CHECK IF WANT ALL OR ALL.X ===*===
geo_srr_gsm_df <- merge(geo_df, srr_gsm_df, by.x = "gsm", by.y = "gsm", all = TRUE)
geo_srr_gsm_sra_df <- merge(geo_srr_gsm_df, sra_df, by.x = "run_accession", by.y = "run_accession", all = TRUE)
}
#=============================================================
#=============================================================
# SRA accession as input
#=============================================================
#=============================================================
}
convertAccessions <- function(acc_list){
geo_columns <- c("gsm", "series_id")
#srr_gsm_columns <- c("gsm", "gsm_check", "run_accession")
sra_columns <- c("run_accession", "experiment_accession", "sample_accession", "study_accession")
accession_class <- accessionClassifier(acc_list)
if (!(accession_class %in% c("gsm", "series_id", "run_accesion", "experiment_accession", "sample_accession", "study_accession"))){
stop("Accession needs to belong to one of the supported classes")
}
#=============================================================
# GEO accession as input
#=============================================================
if (accession_class %in% c("gsm", "series_id")){
if (accession_class == "gsm"){
geo_df <- searchGEOForGSM(acc_list, geo_columns)
}
if (accession_class == "series_id"){
geo_df <- searchGEOForGSE(acc_list, geo_columns)
}
srr_gsm_df <- convertSRA_GEO(geo_df$gsm)
sra_df <- searchSRAForAccession(srr_gsm_df$run_accession, sra_columns)
#DOUBLE CHECK IF WANT ALL OR ALL.X ===*===
geo_srr_gsm_df <- merge(geo_df, srr_gsm_df, by.x = "gsm", by.y = "gsm", all = TRUE)
geo_srr_gsm_sra_df <- merge(geo_srr_gsm_df, sra_df, by.x = "run_accession", by.y = "run_accession", all = TRUE)
output_df <- geo_srr_gsm_sra_df
}
#=============================================================
#=============================================================
# SRA accession as input
#=============================================================
#=============================================================
return(output_df)
}
convertAccessions("GSM881156")
convertSRA_GEO <- function(acc_list, srr_gsm_columns = c("run_accession", "gsm", "gsm_check")){
accession_class <- accessionClassifier(acc_list)
#This is a safeguard in case incomplete SRA accessions had equivalents in GEO
#Can only remove it if it is certain that this is not the case
if (!(accession_class %in% c("run_accession", "gsm"))){
stop("Only SRRs and GSMs are accepted")
}
acc_list <- unique(acc_list)
acc_list <- acc_list[digitSort(acc_list)]
srr_gsm_columns <- paste0(srr_gsm_columns, collapse = ", ")
search_count <- 0
accession_df <- data.frame()
query_beg <- paste0("SELECT ", srr_gsm_columns, " FROM srr_gsm WHERE ", accession_class, " = '")
for (a in seq_along(acc_list)){
query <- paste0(query_beg, acc_list[a], "'")
print(query)
chunk <- dbGetQuery(get("srr_gsm"), query)
search_count <- search_count + as.integer(dim(chunk)[1]>=1)
accession_df <- rbind(accession_df, chunk)
}
print(paste0("Found results for ", search_count, " out of ", length(acc_list), " accession search terms"))
if (search_count!=length(acc_list)){
warning("Some accessions were not found in the database")
}
accession_df <- unique(accession_df)
return(accession_df)
}
convertAccessions <- function(acc_list){
geo_columns <- c("gsm", "series_id")
#srr_gsm_columns <- c("gsm", "gsm_check", "run_accession")
sra_columns <- c("run_accession", "experiment_accession", "sample_accession", "study_accession")
accession_class <- accessionClassifier(acc_list)
if (!(accession_class %in% c("gsm", "series_id", "run_accesion", "experiment_accession", "sample_accession", "study_accession"))){
stop("Accession needs to belong to one of the supported classes")
}
#=============================================================
# GEO accession as input
#=============================================================
if (accession_class %in% c("gsm", "series_id")){
if (accession_class == "gsm"){
geo_df <- searchGEOForGSM(acc_list, geo_columns)
}
if (accession_class == "series_id"){
geo_df <- searchGEOForGSE(acc_list, geo_columns)
}
srr_gsm_df <- convertSRA_GEO(geo_df$gsm)
sra_df <- searchSRAForAccession(srr_gsm_df$run_accession, sra_columns)
#DOUBLE CHECK IF WANT ALL OR ALL.X ===*===
geo_srr_gsm_df <- merge(geo_df, srr_gsm_df, by.x = "gsm", by.y = "gsm", all = TRUE)
geo_srr_gsm_sra_df <- merge(geo_srr_gsm_df, sra_df, by.x = "run_accession", by.y = "run_accession", all = TRUE)
output_df <- geo_srr_gsm_sra_df
}
#=============================================================
#=============================================================
# SRA accession as input
#=============================================================
#=============================================================
output_df <- output_df[ , c("run_accession", "experiment_accession", "sample_accession", "study_accession", "gsm", "series_id", "gsm_check")]
return(output_df)
}
convertAccessions("GSM881156")
convertAccessions <- function(acc_list){
geo_columns <- c("gsm", "series_id")
#srr_gsm_columns <- c("gsm", "gsm_check", "run_accession")
sra_columns <- c("run_accession", "experiment_accession", "sample_accession", "study_accession")
accession_class <- accessionClassifier(acc_list)
if (!(accession_class %in% c("gsm", "series_id", "run_accesion", "experiment_accession", "sample_accession", "study_accession"))){
stop("Accession needs to belong to one of the supported classes")
}
#=============================================================
# GEO accession as input
#=============================================================
if (accession_class %in% c("gsm", "series_id")){
#GEO data frame
if (accession_class == "gsm"){
geo_df <- searchGEOForGSM(acc_list, geo_columns)
}
if (accession_class == "series_id"){
geo_df <- searchGEOForGSE(acc_list, geo_columns)
}
#SRR_GSM data frame
srr_gsm_df <- convertSRA_GEO(geo_df$gsm)
#SRA data frame
sra_df <- searchSRAForAccession(srr_gsm_df$run_accession, sra_columns)
#Merge
#DOUBLE CHECK IF WANT ALL OR ALL.X ===*===
geo_srr_gsm_df <- merge(geo_df, srr_gsm_df, by.x = "gsm", by.y = "gsm", all = TRUE)
geo_srr_gsm_sra_df <- merge(geo_srr_gsm_df, sra_df, by.x = "run_accession", by.y = "run_accession", all = TRUE)
#Rename data frame
output_df <- geo_srr_gsm_sra_df
}
#=============================================================
#=============================================================
# SRA accession as input
#=============================================================
if (accession_class %in% c("run_accession", "experiment_accession", "sample_accession", "study_accession")){
#SRA data frame
sra_df <- searchSRAForAccession(acc_list, sra_columns)
#SRR_GSM data frame
srr_gsm_df <- convertSRA_GEO(sra_df$run_accession)
#GEO data frame
geo_df <- searchGEOForGSM(srr_gsm_df$gsm, geo_columns)
#Merge
#DOUBLE CHECK IF WANT ALL OR ALL.X ===*===
sra_srr_gsm_df <- merge(sra_df, srr_gsm_df, by.x = "run_accession", by.y = "run_accession", all = TRUE)
sra_srr_gsm_geo_df <- merge(sra_srr_gsm_geo_df, geo_df, by.x = "gsm", by.y = "gsm", all = TRUE)
output_df <- sra_srr_gsm_geo_df
}
#=============================================================
output_df <- output_df[ , c("run_accession", "experiment_accession", "sample_accession", "study_accession", "gsm", "series_id", "gsm_check")]
return(output_df)
}
ss <- convertAccessions("SRP011071")
convertAccessions <- function(acc_list){
geo_columns <- c("gsm", "series_id")
#srr_gsm_columns <- c("gsm", "gsm_check", "run_accession")
sra_columns <- c("run_accession", "experiment_accession", "sample_accession", "study_accession")
accession_class <- accessionClassifier(acc_list)
if (!(accession_class %in% c("gsm", "series_id", "run_accesion", "experiment_accession", "sample_accession", "study_accession"))){
stop("Accession needs to belong to one of the supported classes")
}
#=============================================================
# GEO accession as input
#=============================================================
if (accession_class %in% c("gsm", "series_id")){
#GEO data frame
if (accession_class == "gsm"){
geo_df <- searchGEOForGSM(acc_list, geo_columns)
}
if (accession_class == "series_id"){
geo_df <- searchGEOForGSE(acc_list, geo_columns)
}
#SRR_GSM data frame
srr_gsm_df <- convertSRA_GEO(geo_df$gsm)
#SRA data frame
sra_df <- searchSRAForAccession(srr_gsm_df$run_accession, sra_columns)
#Merge
#DOUBLE CHECK IF WANT ALL OR ALL.X ===*===
geo_srr_gsm_df <- merge(geo_df, srr_gsm_df, by.x = "gsm", by.y = "gsm", all = TRUE)
geo_srr_gsm_sra_df <- merge(geo_srr_gsm_df, sra_df, by.x = "run_accession", by.y = "run_accession", all = TRUE)
#Rename data frame
output_df <- geo_srr_gsm_sra_df
}
#=============================================================
#=============================================================
# SRA accession as input
#=============================================================
if (accession_class %in% c("run_accession", "experiment_accession", "sample_accession", "study_accession")){
#SRA data frame
sra_df <- searchSRAForAccession(acc_list, sra_columns)
#SRR_GSM data frame
srr_gsm_df <- convertSRA_GEO(sra_df$run_accession)
#GEO data frame
geo_df <- searchGEOForGSM(srr_gsm_df$gsm, geo_columns)
#Merge
#DOUBLE CHECK IF WANT ALL OR ALL.X ===*===
sra_srr_gsm_df <- merge(sra_df, srr_gsm_df, by.x = "run_accession", by.y = "run_accession", all = TRUE)
sra_srr_gsm_geo_df <- merge(sra_srr_gsm_df, geo_df, by.x = "gsm", by.y = "gsm", all = TRUE)
output_df <- sra_srr_gsm_geo_df
}
#=============================================================
output_df <- output_df[ , c("run_accession", "experiment_accession", "sample_accession", "study_accession", "gsm", "series_id", "gsm_check")]
return(output_df)
}
ss <- convertAccessions("SRP011071")
View(ss)
accessionConverter <- function(acc_list){
geo_columns <- c("gsm", "series_id")
#srr_gsm_columns <- c("gsm", "gsm_check", "run_accession")
sra_columns <- c("run_accession", "experiment_accession", "sample_accession", "study_accession")
accession_class <- accessionClassifier(acc_list)
if (!(accession_class %in% c("gsm", "series_id", "run_accesion", "experiment_accession", "sample_accession", "study_accession"))){
stop("Accession needs to belong to one of the supported classes")
}
#=============================================================
# GEO accession as input
#=============================================================
if (accession_class %in% c("gsm", "series_id")){
#GEO data frame
if (accession_class == "gsm"){
geo_df <- searchGEOForGSM(acc_list, geo_columns)
}
if (accession_class == "series_id"){
geo_df <- searchGEOForGSE(acc_list, geo_columns)
}
#SRR_GSM data frame
srr_gsm_df <- convertSRA_GEO(geo_df$gsm)
#SRA data frame
sra_df <- searchSRAForAccession(srr_gsm_df$run_accession, sra_columns)
#Merge
#DOUBLE CHECK IF WANT ALL OR ALL.X ===*===
geo_srr_gsm_df <- merge(geo_df, srr_gsm_df, by.x = "gsm", by.y = "gsm", all = TRUE)
geo_srr_gsm_sra_df <- merge(geo_srr_gsm_df, sra_df, by.x = "run_accession", by.y = "run_accession", all = TRUE)
#Rename data frame
output_df <- geo_srr_gsm_sra_df
}
#=============================================================
#=============================================================
# SRA accession as input
#=============================================================
if (accession_class %in% c("run_accession", "experiment_accession", "sample_accession", "study_accession")){
#SRA data frame
sra_df <- searchSRAForAccession(acc_list, sra_columns)
#SRR_GSM data frame
srr_gsm_df <- convertSRA_GEO(sra_df$run_accession)
#GEO data frame
geo_df <- searchGEOForGSM(srr_gsm_df$gsm, geo_columns)
#Merge
#DOUBLE CHECK IF WANT ALL OR ALL.X ===*===
sra_srr_gsm_df <- merge(sra_df, srr_gsm_df, by.x = "run_accession", by.y = "run_accession", all = TRUE)
sra_srr_gsm_geo_df <- merge(sra_srr_gsm_df, geo_df, by.x = "gsm", by.y = "gsm", all = TRUE)
output_df <- sra_srr_gsm_geo_df
}
#=============================================================
output_df <- output_df[ , c("run_accession", "experiment_accession", "sample_accession", "study_accession", "gsm", "series_id", "gsm_check")]
return(output_df)
}
rm(convertAccessions)
convertGEO("GSE36104")
convertGEO("GSM881156")
convertGEO("GSE36099")
s2 <- searchForAccession("GSE36104")
s2 <- searchForAccession("GSE36099")
View(s2)
rm(iewVector)
dbListFields(geo_con, "gsm")
accessionConverter
accessionConverter("GSM881156")
searchSRR_GSM <- function(acc_list, srr_gsm_columns = c("run_accession", "gsm", "gsm_check")){
accession_class <- accessionClassifier(acc_list)
#This is a safeguard in case incomplete SRA accessions had equivalents in GEO
#Can only remove it if it is certain that this is not the case
if (!(accession_class %in% c("run_accession", "gsm"))){
stop("Only SRRs and GSMs are accepted")
}
acc_list <- unique(acc_list)
acc_list <- acc_list[digitSort(acc_list)]
srr_gsm_columns <- paste0(srr_gsm_columns, collapse = ", ")
search_count <- 0
accession_df <- data.frame()
query_beg <- paste0("SELECT ", srr_gsm_columns, " FROM srr_gsm WHERE ", accession_class, " = '")
for (a in seq_along(acc_list)){
query <- paste0(query_beg, acc_list[a], "'")
print(query)
chunk <- dbGetQuery(get("srr_gsm"), query)
search_count <- search_count + as.integer(dim(chunk)[1]>=1)
accession_df <- rbind(accession_df, chunk)
}
print(paste0("Found results for ", search_count, " out of ", length(acc_list), " accession search terms"))
if (search_count!=length(acc_list)){
warning("Some accessions were not found in the database")
}
accession_df <- unique(accession_df)
return(accession_df)
}
accessionConverter <- function(acc_list){
geo_columns <- c("gsm", "series_id")
#srr_gsm_columns <- c("gsm", "gsm_check", "run_accession")
sra_columns <- c("run_accession", "experiment_accession", "sample_accession", "study_accession")
accession_class <- accessionClassifier(acc_list)
if (!(accession_class %in% c("gsm", "series_id", "run_accesion", "experiment_accession", "sample_accession", "study_accession"))){
stop("Accession needs to belong to one of the supported classes")
}
#=============================================================
# GEO accession as input
#=============================================================
if (accession_class %in% c("gsm", "series_id")){
#GEO data frame
if (accession_class == "gsm"){
geo_df <- searchGEOForGSM(acc_list, geo_columns)
}
if (accession_class == "series_id"){
geo_df <- searchGEOForGSE(acc_list, geo_columns)
}
#SRR_GSM data frame
srr_gsm_df <- searchSRR_GSM(geo_df$gsm)
#SRA data frame
sra_df <- searchSRAForAccession(srr_gsm_df$run_accession, sra_columns)
#Merge
#DOUBLE CHECK IF WANT ALL OR ALL.X ===*===
geo_srr_gsm_df <- merge(geo_df, srr_gsm_df, by.x = "gsm", by.y = "gsm", all = TRUE)
geo_srr_gsm_sra_df <- merge(geo_srr_gsm_df, sra_df, by.x = "run_accession", by.y = "run_accession", all = TRUE)
#Rename data frame
output_df <- geo_srr_gsm_sra_df
}
#=============================================================
#=============================================================
# SRA accession as input
#=============================================================
if (accession_class %in% c("run_accession", "experiment_accession", "sample_accession", "study_accession")){
#SRA data frame
sra_df <- searchSRAForAccession(acc_list, sra_columns)
#SRR_GSM data frame
srr_gsm_df <- searchSRR_GSM(sra_df$run_accession)
#GEO data frame
geo_df <- searchGEOForGSM(srr_gsm_df$gsm, geo_columns)
#Merge
#DOUBLE CHECK IF WANT ALL OR ALL.X ===*===
sra_srr_gsm_df <- merge(sra_df, srr_gsm_df, by.x = "run_accession", by.y = "run_accession", all = TRUE)
sra_srr_gsm_geo_df <- merge(sra_srr_gsm_df, geo_df, by.x = "gsm", by.y = "gsm", all = TRUE)
output_df <- sra_srr_gsm_geo_df
}
#=============================================================
output_df <- output_df[ , c("run_accession", "experiment_accession", "sample_accession", "study_accession", "gsm", "series_id", "gsm_check")]
return(output_df)
}
accessionConverter("GSM881156")
rm(convertSRA_GEO())
rm(convertSRA_GEO)
accessionConverter("GSM881156")
convertGEO
#accessionConverter.R
#Converts a list of accessions (of one type) into all possible accessions within SRA and GEO
#------------------------------------------------------
#------------------------------------------------------
accessionConverter <- function(acc_list){
geo_columns <- c("gsm", "series_id")
#srr_gsm_columns <- c("gsm", "gsm_check", "run_accession")
sra_columns <- c("run_accession", "experiment_accession", "sample_accession", "study_accession")
accession_class <- accessionClassifier(acc_list)
if (!(accession_class %in% c("gsm", "series_id", "run_accesion", "experiment_accession", "sample_accession", "study_accession"))){
stop("Accession needs to belong to one of the supported classes")
}
#=============================================================
# GEO accession as input
#=============================================================
if (accession_class %in% c("gsm", "series_id")){
#GEO data frame
if (accession_class == "gsm"){
geo_df <- searchGEOForGSM(acc_list, geo_columns)
}
if (accession_class == "series_id"){
geo_df <- searchGEOForGSE(acc_list, geo_columns)
}
#SRR_GSM data frame
srr_gsm_df <- searchSRR_GSM(geo_df$gsm)
#SRA data frame
sra_df <- searchSRAForAccession(srr_gsm_df$run_accession, sra_columns)
#Merge
#DOUBLE CHECK IF WANT ALL OR ALL.X ===*===
geo_srr_gsm_df <- merge(geo_df, srr_gsm_df, by.x = "gsm", by.y = "gsm", all = TRUE)
geo_srr_gsm_sra_df <- merge(geo_srr_gsm_df, sra_df, by.x = "run_accession", by.y = "run_accession", all = TRUE)
#Rename data frame
output_df <- geo_srr_gsm_sra_df
}
#=============================================================
#=============================================================
# SRA accession as input
#=============================================================
if (accession_class %in% c("run_accession", "experiment_accession", "sample_accession", "study_accession")){
#SRA data frame
sra_df <- searchSRAForAccession(acc_list, sra_columns)
#SRR_GSM data frame
srr_gsm_df <- searchSRR_GSM(sra_df$run_accession)
#GEO data frame
geo_df <- searchGEOForGSM(srr_gsm_df$gsm, geo_columns)
#Merge
#DOUBLE CHECK IF WANT ALL OR ALL.X ===*===
sra_srr_gsm_df <- merge(sra_df, srr_gsm_df, by.x = "run_accession", by.y = "run_accession", all = TRUE)
sra_srr_gsm_geo_df <- merge(sra_srr_gsm_df, geo_df, by.x = "gsm", by.y = "gsm", all = TRUE)
output_df <- sra_srr_gsm_geo_df
}
#=============================================================
output_df <- output_df[ , c("run_accession", "experiment_accession", "sample_accession", "study_accession", "gsm", "series_id", "gsm_check")]
return(output_df)
}
#------------------------------------------------------
#------------------------------------------------------
accessionConverter("GSM881156")
setwd
file.info("/home/sslab11/Documents/Anna/SpideR_Packaging201709/Historical_Files/SRA_runs.R")
file.info("/home/sslab11/Documents/Anna/SpideR_Packaging201709/Historical_Files/accessionConverter_revamped.R.R")
file.info("/home/sslab11/Documents/Anna/SpideR_Packaging201709/Historical_Files/accessionConverter_revamped.R")
file.info("/home/sslab11/Documents/Anna/SpideR_Packaging201709/Historical_Files/accessionConverter_revamped.R")$ctime
file.info("/home/sslab11/Documents/Anna/SpideR_Packaging201709/accessionConverter.R")$ctime
