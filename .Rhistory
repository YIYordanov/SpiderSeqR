gses
saveRDS(gses, "GSEs_List_1_100_by_5.Rda")
saveRDS(gses_small, "GSEs_List_1_4.Rda")
ggplot(query_comp, aes(Length, median, col = expr, group = expr, fill = expr)) + geom_point(size = 0.1) + geom_ribbon(aes(ymin = lq, ymax = uq), alpha = .3, linetype = 0) + geom_ribbon(aes(ymin = min, ymax = max), alpha =.1, linetype = 0)
ggplot(query_comp, aes(Length, median, col = expr, group = expr, fill = expr)) + geom_point(size = 0.4) + geom_ribbon(aes(ymin = lq, ymax = uq), alpha = .3, linetype = 0) + geom_ribbon(aes(ymin = min, ymax = max), alpha =.1, linetype = 0)
ggplot(query_comp, aes(Length, median, col = expr, group = expr, fill = expr)) + geom_point(size = 0.4) + geom_ribbon(aes(ymin = lq, ymax = uq), alpha = .3, linetype = 0) + geom_ribbon(aes(ymin = min, ymax = max), alpha =.1, linetype = 0)
ggplot(query_comp, aes(Length, median, col = expr, group = expr, fill = expr)) + geom_point(size = 0.4) + geom_ribbon(aes(ymin = lq, ymax = uq), alpha = .3, linetype = 0) + geom_ribbon(aes(ymin = min, ymax = max), alpha =.1, linetype = 0)
identical(gses, readRDS("gses.Rda"))
identical(gses, readRDS("gses_small.Rda.Rda"))
identical(gses_small, readRDS("gses_small.Rda"))
?scale_y_continuous
?labels
ggplot2?labels()
ggplot2?labels
ggplot(query_comp, aes(Length, median, col = expr, group = expr, fill = expr)) + geom_point(size = 0.4) + geom_ribbon(aes(ymin = lq, ymax = uq), alpha = .3, linetype = 0) + geom_ribbon(aes(ymin = min, ymax = max), alpha =.1, linetype = 0) + scale_y_continuous(labels = comma)
ggplot(query_comp, aes(Length, median, col = expr, group = expr, fill = expr)) + geom_point(size = 0.4) + geom_ribbon(aes(ymin = lq, ymax = uq), alpha = .3, linetype = 0) + geom_ribbon(aes(ymin = min, ymax = max), alpha =.1, linetype = 0) + scale_y_continuous(labels = sscales::comma)
ggplot(query_comp, aes(Length, median, col = expr, group = expr, fill = expr)) + geom_point(size = 0.4) + geom_ribbon(aes(ymin = lq, ymax = uq), alpha = .3, linetype = 0) + geom_ribbon(aes(ymin = min, ymax = max), alpha =.1, linetype = 0) + scale_y_continuous(labels = s=scales::comma)
ggplot(query_comp, aes(Length, median, col = expr, group = expr, fill = expr)) + geom_point(size = 0.4) + geom_ribbon(aes(ymin = lq, ymax = uq), alpha = .3, linetype = 0) + geom_ribbon(aes(ymin = min, ymax = max), alpha =.1, linetype = 0) + scale_y_continuous(labels = scales::comma)
ggplot(query_comp, aes(Length, median, col = expr, group = expr, fill = expr)) + geom_point(size = 0.4) + geom_ribbon(aes(ymin = lq, ymax = uq), alpha = .3, linetype = 0) + geom_ribbon(aes(ymin = min, ymax = max), alpha =.1, linetype = 0) + scale_y_continuous(labels = scales::comma)
ggplot(query_comp, aes(Length, median, col = expr, group = expr, fill = expr)) + geom_point(size = 0.4) + geom_ribbon(aes(ymin = lq, ymax = uq), alpha = .3, linetype = 0) + geom_ribbon(aes(ymin = min, ymax = max), alpha =.1, linetype = 0) + scale_y_continuous(labels = scales::comma)
ggplot(query_comp, aes(Length, median, col = expr, group = expr, fill = expr)) + geom_point(size = 0.4) + geom_ribbon(aes(ymin = lq, ymax = uq), alpha = .3, linetype = 0) + geom_ribbon(aes(ymin = min, ymax = max), alpha =.1, linetype = 0) + scale_y_time(labels = scales::comma)
query_comp2 <- query_comp
query_comp$median <- as.difftime(query_comp$median, units = "secs")
ggplot(query_comp, aes(Length, median, col = expr, group = expr, fill = expr)) + geom_point(size = 0.4) + geom_ribbon(aes(ymin = lq, ymax = uq), alpha = .3, linetype = 0) + geom_ribbon(aes(ymin = min, ymax = max), alpha =.1, linetype = 0) + scale_y_time(labels = scales::comma)
query_comp$min <- as.difftime(query_comp$min, units = "secs")
query_comp$max <- as.difftime(query_comp$max, units = "secs")
query_comp$uq <- as.difftime(query_comp$uq, units = "secs")
query_comp$lq <- as.difftime(query_comp$lq, units = "secs")
ggplot(query_comp, aes(Length, median, col = expr, group = expr, fill = expr)) + geom_point(size = 0.4) + geom_ribbon(aes(ymin = lq, ymax = uq), alpha = .3, linetype = 0) + geom_ribbon(aes(ymin = min, ymax = max), alpha =.1, linetype = 0) + scale_y_time(labels = scales::comma)
ggplot(query_comp, aes(Length, median, col = expr, group = expr, fill = expr)) + geom_point(size = 0.4) + geom_ribbon(aes(ymin = lq, ymax = uq), alpha = .3, linetype = 0) + geom_ribbon(aes(ymin = min, ymax = max), alpha =.1, linetype = 0) + scale_y_time()
?as.difftime
query_comp$median <- as.difftime(query_comp$median/1000, units = "secs")
query_comp$min <- as.difftime(query_comp$min/1000, units = "secs")
query_comp$max <- as.difftime(query_comp$max/1000, units = "secs")
query_comp$lq <- as.difftime(query_comp$lq/1000, units = "secs")
query_comp$uq <- as.difftime(query_comp$uq/1000, units = "secs")
ggplot(query_comp, aes(Length, median, col = expr, group = expr, fill = expr)) + geom_point(size = 0.4) + geom_ribbon(aes(ymin = lq, ymax = uq), alpha = .3, linetype = 0) + geom_ribbon(aes(ymin = min, ymax = max), alpha =.1, linetype = 0) + scale_y_time()
ggplot(query_comp, aes(Length, median, col = expr, group = expr, fill = expr)) + geom_point(size = 0.4) + geom_ribbon(aes(ymin = lq, ymax = uq), alpha = .3, linetype = 0) + geom_ribbon(aes(ymin = min, ymax = max), alpha =.1, linetype = 0) + scale_y_time()
ggplot(query_comp, aes(Length, median, col = expr, group = expr, fill = expr)) + geom_point(size = 0.4) + geom_ribbon(aes(ymin = lq, ymax = uq), alpha = .3, linetype = 0) + geom_ribbon(aes(ymin = min, ymax = max), alpha =.1, linetype = 0) + scale_y_time()
listValidColumns()
for (i in 1:dim(sample_sra)[2]) print(class(sample_sra[,i]))
for (i in 1:dim(sample_sra)[2]{
if (!class[sample_sra[,]] %in% "character"){
print(colnames(sample_sra[,i]))
print(class(sample_sra[,i]))
}
}
for (i in 1:dim(sample_sra)[2]{
if (!class(sample_sra[,]) %in% "character"){
print(colnames(sample_sra[,i]))
print(class(sample_sra[,i]))
}
}
for (i in 1:dim(sample_sra)[2]){
if (!class(sample_sra[,]) %in% "character"){
print(colnames(sample_sra[,i]))
print(class(sample_sra[,i]))
}
}
for (i in 1:dim(sample_sra)[2]){
if (!class(sample_sra[,i]) %in% "character"){
print(colnames(sample_sra[,i]))
print(class(sample_sra[,i]))
}
}
for (i in 1:dim(sample_sra)[2]){
if (!"character" %in% class(sample_sra[,i])){
print(colnames(sample_sra[,i]))
print(class(sample_sra[,i]))
}
}
dim(sample_sra)
dim(sample_sra)[2]
"character" %in% class(sample_sra[,2])
"character" %in% class(sample_sra[,4])
"character" %in% class(sample_sra[,5])
for (i in 1:dim(sample_sra)[2]){
if (!"character" %in% class(sample_sra[,i])){
print(colnames(sample_sra)[i])
print(class(sample_sra[,i]))
}
}
?setdiff
sampleColumnTypes <- function(n){
non_char <- list()
for (k in 1:n){
df <- dbGetQuery(sra_con, "SELECT * FROM sra GROUP BY RANDOM() LIMIT 50")
for (i in 1:dim(df)[2]){
if (!"character" %in% class(df[,i])){
non_char[[n]] <- c(non_char[[n]], colnames(df[i]))
print(non_char[[n]])
print(colnames(df)[i])
print(class(df[,i]))
}
}
}
return(non_char)
}
sampleColumnTypes(2)
sampleColumnTypes <- function(n){
non_char <- list()
for (k in 1:n){
df <- dbGetQuery(sra_con, "SELECT * FROM sra GROUP BY RANDOM() LIMIT 50")
for (i in 1:dim(df)[2]){
if (!"character" %in% class(df[,i])){
non_char[[k]] <- c(non_char[[k]], colnames(df[i]))
print(non_char[[k]])
print(colnames(df)[i])
print(class(df[,i]))
}
}
}
return(non_char)
}
sampleColumnTypes(2)
dbGetQuery(sra_con, "SELECT * FROM sra GROUP BY RANDOM() LIMIT 50")
library(tictoc)
tic()
dbGetQuery(sra_con, "SELECT * FROM sra GROUP BY RANDOM() LIMIT 50")
toc()
sampleColumnTypes(2)
sampleColumnTypes <- function(n){
non_char <- list()
for (k in 1:n){
df <- dbGetQuery(sra_con, "SELECT * FROM sra GROUP BY RANDOM() LIMIT 50")
for (i in 1:dim(df)[2]){
if (!"character" %in% class(df[,i])){
curr <- c(curr, colnames(df[i]))
print(curr)
print(colnames(df)[i])
print(class(df[,i]))
}
non_char[[k]] <- curr
}
}
return(non_char)
}
sampleColumnTypes(2)
sampleColumnTypes <- function(n){
non_char <- list()
for (k in 1:n){
df <- dbGetQuery(sra_con, "SELECT * FROM sra GROUP BY RANDOM() LIMIT 50")
currr <- character()
for (i in 1:dim(df)[2]){
if (!"character" %in% class(df[,i])){
curr <- c(curr, colnames(df[i]))
print(curr)
print(colnames(df)[i])
print(class(df[,i]))
}
non_char[[k]] <- curr
}
}
return(non_char)
}
sampleColumnTypes(2)
sampleColumnTypes <- function(n){
non_char <- list()
for (k in 1:n){
df <- dbGetQuery(sra_con, "SELECT * FROM sra GROUP BY RANDOM() LIMIT 50")
curr <- character()
for (i in 1:dim(df)[2]){
if (!"character" %in% class(df[,i])){
curr <- c(curr, colnames(df[i]))
print(curr)
print(colnames(df)[i])
print(class(df[,i]))
}
non_char[[k]] <- curr
}
}
return(non_char)
}
sampleColumnTypes(2)
num_list <- .Last.value
num_lisst
num_list
countPatternsInCols <- function(query, column_name){
df <- data.frame()
for (i in seq_along(column_name)){
for (q in query){
sql_char <- paste0("SELECT count(*) FROM sra WHERE ", column_name[i], " LIKE '%", q, "%'")
chunk <- dbGetQuery(sra_con, sql_char)
chunk$column_name <- column_name[i]
chunk$query <- q
df <- rbind(df, chunk)
}
}
}
countPatternsInCols <- function(query, column_name){
df <- data.frame()
for (i in seq_along(column_name)){
for (q in query){
sql_char <- paste0("SELECT count(*) FROM sra WHERE ", column_name[i], " LIKE '%", q, "%'")
print(sql_char)
#chunk <- dbGetQuery(sra_con, sql_char)
#chunk$column_name <- column_name[i]
#chunk$query <- q
#df <- rbind(df, chunk)
}
}
}
countPatternsInCols(c("a", "e","i", "o", "u", "y"), num_list[[1]])
countPatternsInCols <- function(query, column_name){
df <- data.frame()
for (i in seq_along(column_name)){
for (q in query){
sql_char <- paste0("SELECT count(*) FROM sra WHERE ", column_name[i], " LIKE '%", q, "%'")
print(sql_char)
chunk <- dbGetQuery(sra_con, sql_char)
chunk$column_name <- column_name[i]
chunk$query <- q
df <- rbind(df, chunk)
}
}
return(df)
}
pattern_counts <- countPatternsInCols(c("a", "e","i", "o", "u", "y"), num_list[[1]])
View(pattern_counts)
write.csv(pattern_counts, "Pattern_Counts_SRA_Columns.csv", row.names = FALSE)
intersectList <- function(l){
shared <- character()
i <- 1
for (item in l){
if (i == 1){
shared <- item
} else {
shared <- intersect(shared, item)
}
i <- i+1
}
return(shared)
}
intersectList(num_list)
intersectList(list(1:10, 1, c(1,2)))
intersectList(list(1:10, 1, c(1,2,10)))
intersectList(list(1:10, 10, c(1,2,10)))
intersectList(list(1:10, 10, c(1,2)))
rm(sampleColumnTypes)
sampleSRAColumnTypes <- function(n){
non_char <- list()
for (k in 1:n){
df <- dbGetQuery(sra_con, "SELECT * FROM sra GROUP BY RANDOM() LIMIT 50")
curr <- character()
for (i in 1:dim(df)[2]){
if (!"character" %in% class(df[,i])){
curr <- c(curr, colnames(df[i]))
print(curr)
print(colnames(df)[i])
print(class(df[,i]))
}
non_char[[k]] <- curr
}
}
return(non_char)
}
sampleGSMColumnTypes <- function(n){
non_char <- list()
for (k in 1:n){
df <- dbGetQuery(sra_con, "SELECT * FROM gsm GROUP BY RANDOM() LIMIT 50")
curr <- character()
for (i in 1:dim(df)[2]){
if (!"character" %in% class(df[,i])){
curr <- c(curr, colnames(df[i]))
print(curr)
print(colnames(df)[i])
print(class(df[,i]))
}
non_char[[k]] <- curr
}
}
return(non_char)
}
sampleGSMColumnTypes(2)
sampleGSMColumnTypes <- function(n){
non_char <- list()
for (k in 1:n){
df <- dbGetQuery(geo_con, "SELECT * FROM gsm GROUP BY RANDOM() LIMIT 50")
curr <- character()
for (i in 1:dim(df)[2]){
if (!"character" %in% class(df[,i])){
curr <- c(curr, colnames(df[i]))
print(curr)
print(colnames(df)[i])
print(class(df[,i]))
}
non_char[[k]] <- curr
}
}
return(non_char)
}
sampleGSMColumnTypes(2)
num_list_gsm <- .Last.value
num_list_gsm
intersectList(num_list_gsm)
devtools::document()
countPatternsInCols(c("a", "e","i", "o", "u", "y"), intersectList(num_list_gsm))
countPatternsInGSMCols <- function(query, column_name){
df <- data.frame()
for (i in seq_along(column_name)){
for (q in query){
sql_char <- paste0("SELECT count(*) FROM gsm WHERE ", column_name[i], " LIKE '%", q, "%'")
print(sql_char)
chunk <- dbGetQuery(geo_con, sql_char)
chunk$column_name <- column_name[i]
chunk$query <- q
df <- rbind(df, chunk)
}
}
return(df)
}
rm(countPatternsInCols)
countPatternsInSRACols <- function(query, column_name){
df <- data.frame()
for (i in seq_along(column_name)){
for (q in query){
sql_char <- paste0("SELECT count(*) FROM sra WHERE ", column_name[i], " LIKE '%", q, "%'")
print(sql_char)
chunk <- dbGetQuery(sra_con, sql_char)
chunk$column_name <- column_name[i]
chunk$query <- q
df <- rbind(df, chunk)
}
}
return(df)
}
countPatternsInCols(c("a", "e","i", "o", "u", "y"), intersectList(num_list_gsm))
countPatternsInGSMCols(c("a", "e","i", "o", "u", "y"), intersectList(num_list_gsm))
pattern_counts_gsm <- .Last.value
pattern_counts_sra <- pattern_counts
write.csv(pattern_counts_gsm, "Finding_Numerical_Columns_Pattern_Counts_GSM_Columns.csv", row.names = FALSE)
dbListTables(sra_con)
dbListTables(geo_con)
dbGetQuery(geo_con, "SELECT count(*) FROM geodb_column_desc")
geodb_column_desc <- dbGetQuery(geo_con, "SELECT * FROM geodb_column_desc")
View(geodb_column_desc)
sra_col_desc <- dbGetQuery(sra_con, "SELECT * FROM geodb_column_desc")
sra_col_desc <- dbGetQuery(sra_con, "SELECT * FROM col_desc")
View(ssra_col_desc)
View(sra_col_desc)
displayVector(sra_col_desc$field_name)
displayVector(dbListFields(sra_con, "sra"))
displayVector(dbListFields(sra_con, "run"))
displayVector(dbListFields(sra_con, "experiment"))
displayVector(dbListFields(sra_con, "sample"))
displayVector(dbListFields(sra_con, "study"))
displayVector(dbListFields(sra_con, "accession"))
displayVector(dbListFields(sra_con, "submission"))
displayVector(dbListFields(sra_con, "sra"))
getDatabaseInformation()
devtools::document()
stat6 <- searchAnywhere("stat6")
dim(stat6)
View(stat6)
sum(is.na(stat6$run_accession))
stat6_acc_sra <- searchForAccession(stat6$run_accession)
devtools::load_all()
stat6_acc_sra <- searchForAccession(stat6$run_accession)
library(DependenciesGraphs)
dep <- funDependencies("package:SpideR", "classifyAccession")
plot(dep)
devtools::load_all()
stat6_acc_sra <- searchForAccession(stat6$run_accession)
dim(stat6_acc_sra)
stat6_acc_geo <- searchForAccession(stat6$gsm)
colnames(stat6_acc_geo)
colnames(stat6_acc_sra)
stat6_acc_sra_ord <- unifyDFFormat(stat6_acc_sra)
stat6_acc_geo_ord <- unifyDFFormat(stat6_acc_geo)
stat6_acc <- rbind(stat6_acc_sra_ord, stat6_acc_geo_ord)
dim(stat6_acc)
dim(unique(stat6_acc))
dim(stat6)
stat6_acc <- unifyDFFormat(stat6_acc)
compare(stat6, stat6_acc)
compare(stat6, stat6_acc, allowAll = TRUE)
colnames(stat6_acc)
compare(stat6_acc, stat6, allowAll = TRUE)
?compare
compare(stat6_acc, stat6, allowAll = TRUE, colsOnly = TRUE)
colnames(stat6_acc)[!colnames(stat6_acc) %in% colnames(stat6)]
rm(pattern_counts)
rm(pattern_counts_gsm)
rm(pattern_counts_sra)
rm(t)
rm(t1a)
rm(gsm1)
rm(query_comp)
rm(query_comp_1_10)
rm(query_comp_1_5)
rm(query_comp_GSM)
rm(query_comp_small)
rm(query_comp2)
rm(temp1)
rm(sample_gse)
sample_gse <- dbGetQuery(geo_con, "SELECT * FROM gse GROUP BY RANDOM() LIMIT 200")
rm(chunk)
rm(acc_cols)
rm(df)
rm(df_mix)
rm(df_sorted)
rm(df_sorted_manually)
rm(df_unsorted)
rm(df2)
View(g1)
View(g2)
rm(g1)
rm(g2)
rm(geo_ft)
rm(gses)
rm(gse_columns)
rm(gses_small)
rm(gsms)
rm(gsms_copy)
rm(num_list)
rm(num_list_gsm)
rm(order_columns)
p
rm(p)
View(q2)
rm(q2)
View(res)
View(s5)
rm(s5)
rm(s5b)
rm(s5c)
rm(s5c_geo)
rm(s5c_geo_dup_gsms)
rm(sra_acc)
View(t2)
View(t2b)
rm(t2)
rm(t2b)
t3
rm(t3)
View(temp_convertCat)
View(temp_convertCat_y_later)
rm(temp_convertCat)
rm(temp_convertCat_u)
rm(temp_convertCat_y_later)
rm(temp_convertCat_y_ori)
View(temp_searchAnywhereSRA)
rm(temp_searchAnywhereSRA)
View(temp1b)
rm(temp1b)
View(temp2)
rm(temp2)
View(y)
rm(y)
rm(yy)
a_ref
rm(a_ref)
rm(a_rem)
rm(a1)
rm(acc_order)
rm(col_order)
rm(database_env)
rm(database_name)
rm(database_name_geo)
rm(database_name_sra)
rm(gse_ind)
rm(gsm_columns)
rm(gsm_ind)
rm(i)
rm(n)
rm(other_columns)
rm(other_ind)
rm(sra_columns)
rm(sra_ft_columns)
rm(sra_ind)
rm(x)
rm(t20)
rm(searchAnywhereCATTest())
rm(searchAnywhereCATTest)
appendGSE
getAnywhere(appendGSE)
rm(appendGSE)
rm(acrossDB)
rm(simpleQuery)
rm(batchedQuery)
rm(simpleGSEQuery)
rm(batchedGSEQuery)
rm(searchGSE)
View(tt1)
rm(tt1)
exists(geo_con)
exists("geo_con")
rbind(GSE48019, data.frame())
t1 <- rbind(GSE48019, data.frame())
identical(t1, GSE48019)
devtools::load_all()
devtools::document()
stat6 <- searchAnywhere("stat6")
columnVerifier
devtools::load_all()
stat6 <- searchAnywhere("stat6")
devtools::load_all()
stat6 <- searchAnywhere("stat6")
View(temp_anywhere_geo_out)
colnames(temp_anywhere_geo_out)
devtools::load_all()
checkDataHandling()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
startSpideRDemo()
dbGetQuery(sra_con, "SELECT * FROM sra")
devtools::check()
convertCategoriesToLibraryStrategyType("Transcriptome MA")
SRA_GEO_Category_Conversion
convertCategoriesToLibraryStrategyType("ChIP")
