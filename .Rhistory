devtools::load_all()
startSpideR(getwd())
gse_sample <- DBI::dbGetQuery(geo_con,"SELECT * FROM gse GROUP BY RANDOM() LIMIT 50")
view(gse_sample)
View(gse_sample)
gse_sample <- DBI::dbGetQuery(geo_con,"SELECT * FROM gse GROUP BY RANDOM() LIMIT 50")
#' Display vector in console
#'
#' @param x Vector to be displayed
#' @return Display a vector in console in a format that can be easily copied over for other use (each element separated by new line)
#'
#' @examples
#' displayVector(1:10)
#'
displayVector <- function(x){
#print(x)
#cat(paste0(x, "\n"), sep="", fill = TRUE) #Gives a random break
cat(paste0(x, "\n"), sep="", fill = FALSE)
}
displayVector(gse_sample$gse[1:50])
formatToVector <- function(x, split){
#Converts a split-separated string into format that can be input to R
if(missing(split)){
split <- "; "
}
z <- unlist(strsplit(x, split = split))
z <- paste0(z, sep = "', '", collapse = "")
z <- paste0("'", z) #Beginning
z <- substr(z, 1, (nchar(z)-3)) #Remove excess from the end
z <- paste0("c(", z, ")") #Add c() around
return(z)
}
t <- formatToVector(split = "\n", "GSE113574
GSE40690
GSE48019
GSE27579
GSE83767
GSE90297
GSE54353
GSE115135
GSE17875
GSE53893
GSE68926
GSE110427
GSE5242
GSE84787
GSE25123
GSE79270
GSE78461
GSE13293
GSE108826
GSE86511
GSE76336
GSE79274
GSE52057
GSE93325
GSE108707
GSE88386
GSE3454
GSE89920
GSE33908
GSE14063
GSE5484
GSE16510
GSE29116
GSE17485
GSE82952
GSE6933
GSE64780
GSE7678
GSE87712
GSE20832
GSE384
GSE31113
GSE81454
GSE98818
GSE9107
GSE30424
GSE22401
GSE10176
GSE12111
GSE42588")
t
eval(t)
print(eval(t))
t
x <- displayVector(gse_sample$gse[1:50])
x
.Last.value
x
x <- displayVector(gse_sample$gse[1:50])
.Last.value
eval(t)
eval(text=t)
parse(text = t)
eval(parse(text = t))
gses <- eval(parse(text = t))
gses
library(DBI)
gse_df <- data.frame()
for (g in seq_along(gses)){
gse_chunk <- dbGetQuery(geo_con, paste0("SELECT * FROM gse WHERE gse = '", gses[g], "'"))
}
library(DBI)
gse_df <- data.frame()
for (g in seq_along(gses)){
gse_chunk <- dbGetQuery(geo_con, paste0("SELECT * FROM gse WHERE gse = '", gses[g], "'"))
gse_df <- rbind(gse_df, gse_chunk)
}
View(gse_df)
identical(gse_df, gse_sample[1:50,])
gsm_df <- data.frame()
for (g in seq_along(gses)){
query <- paste0("SELECT * FROM gsm WHERE series_id LIKE '%", gses[g], "' OR series_id LIKE '%", gses[g], ",%'")
gsm_chunk <- dbGetQuery(geo_con, query)
gsm_df <- rbind(gsm_df, gsm_chunk)
}
q
View(gsm_df)
gsm_df_copy <- gsm_df
unique(gsm_df$series_id)
gses <- gses[1:10]
query <- paste0("SELECT * FROM gsm WHERE series_id LIKE '%", gses[g], "' OR series_id LIKE '%", gses[g], ",%'")
query
g
gses[18]
gses
gse_df <- data.frame()
for (g in seq_along(gses)){
gse_chunk <- dbGetQuery(geo_con, paste0("SELECT * FROM gse WHERE gse = '", gses[g], "'"))
gse_df <- rbind(gse_df, gse_chunk)
}
devtools::load_all()
startSpideR(getwd(0))
startSpideR(getwd())
gse_df <- data.frame()
for (g in seq_along(gses)){
gse_chunk <- dbGetQuery(geo_con, paste0("SELECT * FROM gse WHERE gse = '", gses[g], "'"))
gse_df <- rbind(gse_df, gse_chunk)
}
View(gse_df)
gsm_df <- data.frame()
#for (g in seq_along(gses)){
for (g in 1){
query <- paste0("SELECT * FROM gsm WHERE series_id LIKE '%", gses[g], "' OR series_id LIKE '%", gses[g], ",%'")
print(query)
gsm_chunk <- dbGetQuery(geo_con, query)
gsm_df <- rbind(gsm_df, gsm_chunk)
}
q
