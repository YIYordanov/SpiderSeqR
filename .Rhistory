devtools::load_all()
devtools::test()
?sample
unique(sra_demo$study_accession)
sample(unique(sra_demo$study_accession), 3)
sample(unique(sra_demo$study_accession), 3)
sample(unique(sra_demo$study_accession), 3)
?order
unifyDFFormat(convertAccession(sra_demo$study_accession[1]))
(convertAccession(sra_demo$study_accession[1]))
x <- sample(unique(sra_demo$study_accession), 3)
x1 <- convertAccession(x[1])
x2 <- convertAccession(x[2])
x3 <- convertAccession(x[3])
x_123 <- rbind(x1, x2, x3)
x_123
x_123 <- unifyDFFormat(x_123)
x_123
x_all <- convertAccession(x)
x_all
identical(x_123, x_all)
x_all <- convertAccession(x)
identical(x_123, x_all)
x <- sample(unique(sra_demo$study_accession), 3)
x1 <- convertAccession(x[1])
x2 <- convertAccession(x[2])
x3 <- convertAccession(x[3])
x_123 <- rbind(x1, x2, x3)
x_123 <- unifyDFFormat(x_123)
x_all <- convertAccession(x)
identical(x_123, x_all)
dim(x_123)
dim(x_all)
View(x_123)
View(x_all)
devtools::load_all()
x <- sample(unique(sra_demo$study_accession), 3)
x1 <- convertAccession(x[1])
x2 <- convertAccession(x[2])
x3 <- convertAccession(x[3])
x_123 <- rbind(x1, x2, x3)
x_123 <- unifyDFFormat(x_123)
x_all <- convertAccession(x)
devtools::load_all()
x <- sample(unique(sra_demo$study_accession), 3)
x1 <- convertAccession(x[1])
x2 <- convertAccession(x[2])
x3 <- convertAccession(x[3])
x_123 <- rbind(x1, x2, x3)
x_123 <- unifyDFFormat(x_123)
x_all <- convertAccession(x)
identical(x_123, x_all)
devtools::test()
devtools::test()
devtools::test()
DBI::dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE study_accession = 'SRP111'")
sample(sra_demo$study_accession, 1)
DBI::dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE study_accession = 'SRP061795'")
x <- .Last.value
dim(x)
as.numeric(x)
x <- "SRP061795"
x_count <- as.numeric(DBI::dbGetQuery(sra_con, paste0("SELECT count(DISTINCT run_accession) FROM sra WHERE study_accession = '", x, "'")))
x_count
devtools::test()
devtools::test()
convertAccession(sample(gse_demo$gse, ))
convertAccession(sample(gse_demo$gse, 1))
setSpiderSeqROption("quiet", FALSE)
convertAccession(sample(gse_demo$gse, 1))
devtools::test()
paste0("SELECT count(DISTINCT gsm) FROM gsm WHERE series_id LIKE '%", x, ",%' OR LIKE '%", x, "'")
x <- sample(gse_demo$gse, 1)
x_count <- as.numeric(DBI::dbGetQuery(geo_con, paste0("SELECT count(DISTINCT gsm) FROM gsm WHERE series_id LIKE '%", x, ",%' OR LIKE '%", x, "'")))
x_conv <- convertAccession(x)
x <- sample(gse_demo$gse, 1)
x_count <- as.numeric(DBI::dbGetQuery(geo_con, paste0("SELECT count(DISTINCT gsm) FROM gsm WHERE series_id LIKE '%", x, ",%' OR series_id LIKE '%", x, "'")))
x_conv <- convertAccession(x)
devtools::test()
devtools::test()
devtools::test()
randomSRA <- function(x, n){
y <- character()
for (i in 1:n){
a <- DBI::dbGetQuery(sra_con, "SELECT study_accession FROM sra GROUP BY RANDOM() LIMIT 1")
y <- c(y, as.character(a))
}
}
randomSRA <- function(x, n){
y <- character()
for (i in 1:n){
a <- DBI::dbGetQuery(sra_con, paste0("SELECT", x, "FROM sra GROUP BY RANDOM() LIMIT 1"))
y <- c(y, as.character(a))
}
return(y)
}
randomSRA("study_accession", 2)
randomSRA <- function(x, n){
y <- character()
for (i in 1:n){
a <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT 1"))
y <- c(y, as.character(a))
}
return(y)
}
randomSRA("study_accession", 2)
randomSRA <- function(x, n){
y <- character()
#for (i in 1:n){
a <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", n))
y <- c(y, as.character(a))
#}
return(y)
}
randomSRA("study_accession", 2)
randomSRA <- function(x, n){
y <- character()
#for (i in 1:n){
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", n))
#y <- c(y, as.character(a))
#}
return(y)
}
randomSRA("study_accession", 2)
randomSRA <- function(x, n){
y <- character()
#for (i in 1:n){
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", n))
#y <- c(y, as.character(a))
#}
y <- as.character(y)
return(y)
}
randomSRA("study_accession", 2)
randomSRA <- function(x, n){
y <- character()
#for (i in 1:n){
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", n))
#y <- c(y, as.character(a))
#}
y <- y[,1]
return(y)
}
randomSRA("study_accession", 2)
randomSRA <- function(x, n){
y <- character()
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", n))
y <- y[,1]
return(y)
}
devtools::test()
devtools::test()
devtools::load_all()
n_tests <- 1
#demo <- TRUE
demo <- FALSE
if (demo){
setSpiderSeqROption("quiet", TRUE)
startSpiderSeqRDemo()
} else {
startSpiderSeqR("C:/DD/Projects/SpideRs/SpiderSeqR-Auxillaries/Database_Files")
setSpiderSeqROption("quiet", TRUE)
}
?startSpiderSeqR
n_tests <- 1
#demo <- TRUE
demo <- FALSE
if (demo){
setSpiderSeqROption("quiet", TRUE)
startSpiderSeqRDemo()
} else {
startSpiderSeqR("C:/DD/Projects/SpideRs/SpiderSeqR-Auxillaries/Database_Files", general_expiry = 100000)
setSpiderSeqROption("quiet", TRUE)
}
# Helper functions ####
#' Generate random accessions from SRA
#'
#' @param x Character with accession type
#' @param n Number of accessions desired
#' @return A character vector with the randomly generated accessions
#'
randomSRA <- function(x, n){
y <- character()
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", n))
y <- y[,1]
return(y)
}
# Commutative ####
# SRA first
i <- 0
while (i < n_tests){ # Test up to 20x
# Get random SRP
if (demo){
x <- sample(unique(sra_demo$study_accession), 1)
} else {
x <- randomSRA("study_accession", 1)
}
sra_input <- convertAccession(x)
if (sum(grepl("GSM\\d\\d\\d+", sra_input$gsm))>0){
i <- i + 1
geo_input <- convertAccession(sra_input$gsm)
test_that("Commutative conversion SRA -> GEO", {
expect_identical(sra_input, geo_input)
})
}
}
randomSRA("run_accession", 1)
randomSRA("study_accession", 1)
x
x <- study_accession
x <- "study_accession"
y <- character()
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", n))
y <- y[,1]
acc_number <- DBI::dbGetQuery(sra_con, paste0("SELECT count(*) FROM sra WHERE ", x, " = '", y, "'"))
while(acc_number > 100){
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", n))
y <- y[,1]
acc_number <- DBI::dbGetQuery(sra_con, paste0("SELECT count(*) FROM sra WHERE ", x, " = '", y, "'"))
}
y
y <- character()
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", 1))
y <- y[,1]
acc_number <- DBI::dbGetQuery(sra_con, paste0("SELECT count(*) FROM sra WHERE ", x, " = '", y, "'"))
while(acc_number > 100){
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", n))
y <- y[,1]
acc_number <- DBI::dbGetQuery(sra_con, paste0("SELECT count(*) FROM sra WHERE ", x, " = '", y, "'"))
}
y
acc_number
n <- 5
z <- character()
for (i in 1:n){
y <- character()
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", 1))
y <- y[,1]
acc_number <- DBI::dbGetQuery(sra_con, paste0("SELECT count(*) FROM sra WHERE ", x, " = '", y, "'"))
z[i] <- y
while(acc_number > 100){
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", n))
y <- y[,1]
acc_number <- DBI::dbGetQuery(sra_con, paste0("SELECT count(*) FROM sra WHERE ", x, " = '", y, "'"))
z[i] <- y
}
}
?character
z <- character(length = n)
for (i in 1:n){
y <- character()
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", 1))
y <- y[,1]
acc_number <- DBI::dbGetQuery(sra_con, paste0("SELECT count(*) FROM sra WHERE ", x, " = '", y, "'"))
z[i] <- y
while(acc_number > 100){
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", n))
y <- y[,1]
acc_number <- DBI::dbGetQuery(sra_con, paste0("SELECT count(*) FROM sra WHERE ", x, " = '", y, "'"))
z[i] <- y
}
}
z
z <- character(length = n)
for (i in 1:n){
y <- character()
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", 1))
y <- y[,1]
acc_number <- DBI::dbGetQuery(sra_con, paste0("SELECT count(*) FROM sra WHERE ", x, " = '", y, "'"))
print(y)
z[i] <- y
while(acc_number > 100){
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", n))
y <- y[,1]
acc_number <- DBI::dbGetQuery(sra_con, paste0("SELECT count(*) FROM sra WHERE ", x, " = '", y, "'"))
print(y)
z[i] <- y
}
}
z <- character(length = n)
for (i in 1:n){
y <- character()
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", 1))
y <- y[,1]
acc_number <- as.numeric(DBI::dbGetQuery(sra_con, paste0("SELECT count(*) FROM sra WHERE ", x, " = '", y, "'")))
print(y)
z[i] <- y
while(acc_number > 100){
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", n))
y <- y[,1]
acc_number <- as.numeric(DBI::dbGetQuery(sra_con, paste0("SELECT count(*) FROM sra WHERE ", x, " = '", y, "'")))
print(y)
z[i] <- y
}
}
y
z <- character(length = n)
for (i in 1:n){
y <- character()
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", 1))
y <- y[,1]
acc_number <- as.numeric(DBI::dbGetQuery(sra_con, paste0("SELECT count(*) FROM sra WHERE ", x, " = '", y, "'")))
print(y)
z[i] <- y
while(acc_number > 100){
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", 1))
y <- y[,1]
acc_number <- as.numeric(DBI::dbGetQuery(sra_con, paste0("SELECT count(*) FROM sra WHERE ", x, " = '", y, "'")))
print(y)
z[i] <- y
}
}
z
randomSRA2 <- function(x, n, max_runs){
z <- character(length = n)
for (i in 1:n){
y <- character()
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", 1))
y <- y[,1]
acc_number <- as.numeric(DBI::dbGetQuery(sra_con, paste0("SELECT count(*) FROM sra WHERE ", x, " = '", y, "'")))
print(y)
z[i] <- y
while(acc_number > max_runs){
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", 1))
y <- y[,1]
acc_number <- as.numeric(DBI::dbGetQuery(sra_con, paste0("SELECT count(*) FROM sra WHERE ", x, " = '", y, "'")))
print(y)
z[i] <- y
}
}
return(z)
}
randomSRA("study_accession", 5, 100)
randomSRA2("study_accession", 5, 100)
randomSRA <- function(x, n = 1, max_runs = 100){
z <- character(length = n)
for (i in 1:n){
y <- character()
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", 1))
y <- y[,1]
acc_number <- as.numeric(DBI::dbGetQuery(sra_con, paste0("SELECT count(*) FROM sra WHERE ", x, " = '", y, "'")))
print(y)
z[i] <- y
while(acc_number > max_runs){
y <- DBI::dbGetQuery(sra_con, paste0("SELECT ", x, " FROM sra GROUP BY RANDOM() LIMIT ", 1))
y <- y[,1]
acc_number <- as.numeric(DBI::dbGetQuery(sra_con, paste0("SELECT count(*) FROM sra WHERE ", x, " = '", y, "'")))
print(y)
z[i] <- y
}
}
return(z)
}
randomSRA("study_accession")
.Last.value
randomSRA("study_accession", 2)
devtools::test()
devtools::load_all()
getwd()
setwd("C:/DD/Projects/SpideRs/SpiderSeqR")
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
y <- DBI::dbGetQuery(geo_con, paste0("SELECT gsm FROM gsm GROUP BY RANDOM() LIMIT ", n))
startSpiderSeqR()
startSpiderSeqR("C:/DD/Projects/SpideRs/SpiderSeqR-Auxillaries/Database_Files", general_expiry = 100000)
getwd()
y <- DBI::dbGetQuery(geo_con, paste0("SELECT gsm FROM gsm GROUP BY RANDOM() LIMIT ", n))
y
as.character(.Last.value)
y <- DBI::dbGetQuery(geo_con, paste0("SELECT gsm FROM gsm GROUP BY RANDOM() LIMIT ", n))
y <- y[,1]
y
y <- DBI::dbGetQuery(geo_con, paste0("SELECT gse FROM gse GROUP BY RANDOM() LIMIT 1"))
y <- y[,1]
gsm_count <- DBI::dbGetQuery(geo_con, "SELECT count(*) FROM gsm WHERE series_id LIKE '%",  y, "' OR series_id LIKE '%", y, ",%'" )
y <- DBI::dbGetQuery(geo_con, paste0("SELECT gse FROM gse GROUP BY RANDOM() LIMIT 1"))
y <- y[,1]
gsm_count <- DBI::dbGetQuery(geo_con, paste0("SELECT count(*) FROM gsm WHERE series_id LIKE '%",  y, "' OR series_id LIKE '%", y, ",%'" ))
gsm_count
randomGEO(x = c("gsm", "gse"), n = 1, max_gsms = 100){
x <- match.arg(x)
if (x == "gsm"){
y <- DBI::dbGetQuery(geo_con, paste0("SELECT gsm FROM gsm GROUP BY RANDOM() LIMIT ", n))
y <- y[,1]
}
if (x == "gse"){
y <- DBI::dbGetQuery(geo_con, paste0("SELECT gse FROM gse GROUP BY RANDOM() LIMIT 1"))
y <- y[,1]
gsm_count <- DBI::dbGetQuery(geo_con, paste0("SELECT count(*) FROM gsm WHERE series_id LIKE '%",  y, "' OR series_id LIKE '%", y, ",%'" ))
gsm_count <- as.numeric(gsm_count)
while (gsm_count > 100){
y <- DBI::dbGetQuery(geo_con, paste0("SELECT gse FROM gse GROUP BY RANDOM() LIMIT 1"))
y <- y[,1]
gsm_count <- DBI::dbGetQuery(geo_con, paste0("SELECT count(*) FROM gsm WHERE series_id LIKE '%",  y, "' OR series_id LIKE '%", y, ",%'" ))
gsm_count <- as.numeric(gsm_count)
}
}
return(y)
}
randomGEO <- function(x = c("gsm", "gse"), n = 1, max_gsms = 100){
x <- match.arg(x)
if (x == "gsm"){
y <- DBI::dbGetQuery(geo_con, paste0("SELECT gsm FROM gsm GROUP BY RANDOM() LIMIT ", n))
y <- y[,1]
}
if (x == "gse"){
y <- DBI::dbGetQuery(geo_con, paste0("SELECT gse FROM gse GROUP BY RANDOM() LIMIT 1"))
y <- y[,1]
gsm_count <- DBI::dbGetQuery(geo_con, paste0("SELECT count(*) FROM gsm WHERE series_id LIKE '%",  y, "' OR series_id LIKE '%", y, ",%'" ))
gsm_count <- as.numeric(gsm_count)
while (gsm_count > 100){
y <- DBI::dbGetQuery(geo_con, paste0("SELECT gse FROM gse GROUP BY RANDOM() LIMIT 1"))
y <- y[,1]
gsm_count <- DBI::dbGetQuery(geo_con, paste0("SELECT count(*) FROM gsm WHERE series_id LIKE '%",  y, "' OR series_id LIKE '%", y, ",%'" ))
gsm_count <- as.numeric(gsm_count)
}
}
return(y)
}
randomGEO("gsm", 2)
randomGEO("gsm", 5)
randomGEO("gs3", 1)
randomGEO("gse", 1)
randomGEO <- function(x = c("gsm", "gse"), n = 1, max_gsms = 100){
x <- match.arg(x)
if (x == "gsm"){
z <- DBI::dbGetQuery(geo_con, paste0("SELECT gsm FROM gsm GROUP BY RANDOM() LIMIT ", n))
z <- z[,1]
}
if (x == "gse"){
z <- character(length = n)
for (i in 1:n){
y <- DBI::dbGetQuery(geo_con, paste0("SELECT gse FROM gse GROUP BY RANDOM() LIMIT 1"))
y <- y[,1]
gsm_count <- DBI::dbGetQuery(geo_con, paste0("SELECT count(*) FROM gsm WHERE series_id LIKE '%",  y, "' OR series_id LIKE '%", y, ",%'" ))
gsm_count <- as.numeric(gsm_count)
while (gsm_count > 100){
y <- DBI::dbGetQuery(geo_con, paste0("SELECT gse FROM gse GROUP BY RANDOM() LIMIT 1"))
y <- y[,1]
print(y)
gsm_count <- DBI::dbGetQuery(geo_con, paste0("SELECT count(*) FROM gsm WHERE series_id LIKE '%",  y, "' OR series_id LIKE '%", y, ",%'" ))
gsm_count <- as.numeric(gsm_count)
}
z[i] <- y
}
}
return(z)
}
randomGEO("gse", 1)
randomGEO("gse", 3)
getAnywhere(randomGEO)
