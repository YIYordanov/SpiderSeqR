p
rm(p)
View(q2)
rm(q2)
View(res)
View(s5)
rm(s5)
rm(s5b)
rm(s5c)
rm(s5c_geo)
rm(s5c_geo_dup_gsms)
rm(sra_acc)
View(t2)
View(t2b)
rm(t2)
rm(t2b)
t3
rm(t3)
View(temp_convertCat)
View(temp_convertCat_y_later)
rm(temp_convertCat)
rm(temp_convertCat_u)
rm(temp_convertCat_y_later)
rm(temp_convertCat_y_ori)
View(temp_searchAnywhereSRA)
rm(temp_searchAnywhereSRA)
View(temp1b)
rm(temp1b)
View(temp2)
rm(temp2)
View(y)
rm(y)
rm(yy)
a_ref
rm(a_ref)
rm(a_rem)
rm(a1)
rm(acc_order)
rm(col_order)
rm(database_env)
rm(database_name)
rm(database_name_geo)
rm(database_name_sra)
rm(gse_ind)
rm(gsm_columns)
rm(gsm_ind)
rm(i)
rm(n)
rm(other_columns)
rm(other_ind)
rm(sra_columns)
rm(sra_ft_columns)
rm(sra_ind)
rm(x)
rm(t20)
rm(searchAnywhereCATTest())
rm(searchAnywhereCATTest)
appendGSE
getAnywhere(appendGSE)
rm(appendGSE)
rm(acrossDB)
rm(simpleQuery)
rm(batchedQuery)
rm(simpleGSEQuery)
rm(batchedGSEQuery)
rm(searchGSE)
View(tt1)
rm(tt1)
exists(geo_con)
exists("geo_con")
rbind(GSE48019, data.frame())
t1 <- rbind(GSE48019, data.frame())
identical(t1, GSE48019)
devtools::load_all()
devtools::document()
stat6 <- searchAnywhere("stat6")
columnVerifier
devtools::load_all()
stat6 <- searchAnywhere("stat6")
devtools::load_all()
stat6 <- searchAnywhere("stat6")
View(temp_anywhere_geo_out)
colnames(temp_anywhere_geo_out)
devtools::load_all()
checkDataHandling()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
startSpideRDemo()
dbGetQuery(sra_con, "SELECT * FROM sra")
devtools::check()
convertCategoriesToLibraryStrategyType("Transcriptome MA")
SRA_GEO_Category_Conversion
convertCategoriesToLibraryStrategyType("ChIP")
colnames(temp_anywhere_geo_out)
devtools::load_all()
devtools::load_all()
stat6 <- searchAnywhere("stat6")
startSpideR()
startSpideR("/home/AS2382/Documents/SpideR_Packaging201709/Database_Files/Current/")
stat6 <- searchAnywhere("stat6")
listValidColumns()$sra
listValidColumns()$gsm
listValidColumns()$gse
listValidColumns()$other
listValidColumns()
colnames(temp_anywhere_sra_df)
devtools::load_all()
stat6 <- searchAnywhere("stat6")
devtools::load_all()
stat6 <- searchAnywhere("stat6")
colnames(temp_anywhere_geo_out_sfa)
library(DependenciesGraphs)
package?DependenciesGraphs
funDependencies("package:SpideR", "searchAnywhere")
dep_searchAnywhere <- funDependencies("package:SpideR", "searchAnywhere")
plot(dep_searchAnywhere)
temp1 <- searchForAccessionAcrossDBsDF(temp_anywhere_sra_df$run_accession[1:10], "*", "*", sra_df[1:10,])
colnames(tmp1)
colnames(temp1)
temp1 <- searchForAccessionAcrossDBsDF(temp_anywhere_sra_df$run_accession[1:10], "*", "*", "*" , sra_df[1:10,])
temp1 <- searchForAccessionAcrossDBsDF(temp_anywhere_sra_df$run_accession[1:10], "*", "*", "*" , temp_anywhere_sra_df[1:10,])
colnames(temp1)
renameGSMColumns
dep_searchAnywhere <- packageDependencies("package:SpideR")
dep_searchAnywhere <- funDependencies("package:SpideR", "searchForTerm")
plot(dep_searchAnywhere)
dep_searchAnywhere <- funDependencies("package:SpideR", "searchAnywhere")
plot(dep_searchAnywhere)
dep <- envirDependencies("package:SpideR")
plot(dep)
plot(dep_searchAnywhere)
View(temp_searchAnywhereSRA)
warnings()
colnames(temp_anywhere_sra_out_sfa)
View(temp_anywhere_geo_df)
appendGSEColumns(temp_anywhere_geo_df, "*")
temp2 <- appendGSEColumns(temp_anywhere_geo_df, "*")
View(temp2)
colnames(temp2)
View(temp2[, c(1,55)])
checkValidColumns
columnVerifier
devtools::load_all()
devtools::load_all()
temp2 <- appendGSEColumns(temp_anywhere_geo_df, "*")
devtools::load_all()
temp2 <- appendGSEColumns(temp_anywhere_geo_df, "*")
View(temp2)
colnames(temp2)
devtools::load_all()
devtools::load_all()
temp2 <- appendGSEColumns(temp_anywhere_geo_df, "*")
devtools::load_all()
temp2 <- appendGSEColumns(temp_anywhere_geo_df, "*")
devtools::load_all()
temp2 <- appendGSEColumns(temp_anywhere_geo_df, "*")
devtools::load_all()
temp2 <- appendGSEColumns(temp_anywhere_geo_df, "*")
devtools::load_all()
temp2 <- appendGSEColumns(temp_anywhere_geo_df, "*")
1:10 %in% 1
devtools::load_all()
temp2 <- appendGSEColumns(temp_anywhere_geo_df, "*")
devtools::load_all()
temp2 <- appendGSEColumns(temp_anywhere_geo_df, "*")
source('~/Documents/SpideR_Packaging201709/SpideR/R/Helper_Functions.R')
rm(universalExtractor)
rm(superseriesVerifier)
rm(columnVerifier)
rm(conditionVerifier)
rm(conditionVerifier2())
rm(conditionVerifier2)
rm(geoFinder)
rm(gsmExtractor)
rm(inputDetector)
rm(searchSRA)
rm(queryWriter)
rm(searchForSRPChildren)
rm(rbindUniqueCols)
rm(naConverter)
rm(universalExtractor)
rm(controlDetector)
rm(mergeDetector)
rm(missingRunVerifier)
rm(parQuery)
rm(pairedEndConverter)
rm(geoFinder)
rm(superseriesVerifier)
rm(manageLibraryStrategy)
rm(renameGSEColumns())
rm(renameGSEColumns)
rm(renameGSMColumns)
rm(renameSRAColumns)
rm(renameOTHColumns)
devtools::load_all()
temp2 <- appendGSEColumns(temp_anywhere_geo_df, "*")
temp2 <- appendGSEColumns(temp_anywhere_geo_df$series_id, "*")
temp2 <- appendGSEColumns(temp_anywhere_geo_df, "*")
which(c("series_id", "gsm") %in% temp_anywhere_geo_df)
which(c("series_id", "gsm") %in% colnames(temp_anywhere_geo_df))
temp2 <- appendGSEColumns(temp_anywhere_geo_df[,c(1,2)], "*")
which(colnames(temp_anywhere_geo_df) %in% c("series_id", "gsm"))
temp2 <- appendGSEColumns(temp_anywhere_geo_df[,c(3:4)], "*")
View(temp2)
View(unique(temp2[,-1]))
stat66 <- searchAnywhere("stat66", acc_levels = c("gse"))
stat6 <- searchAnywhere("stat6", acc_levels = c("gse"))
View(stat6)
colnames(stat6)
stat6_def <- searchAnywhere("stat6")
View(temp_anywhere_sra_df)
stat6_def <- searchAnywhere(query_all = "stat6")
stat6_def <- searchAnywhere(query_all = "stat6", acc_levels = "run")
stat6 <- searchAnywhere("stat6", acc_levels = c("gse"))
stat6_def <- searchAnywhere(query_all = "stat6", acc_levels = "run")
stat6_def <- searchAnywhere(query_all = "stat6")
devtools::load_all()
getwd
getwd()
startSpideR("/home/AS2382/Documents/SpideR_Packaging201709/Database_Files/C")
startSpideR("/home/AS2382/Documents/SpideR_Packaging201709/Database_Files/Current/")
stat6_def <- searchAnywhere(query_all = "stat6")
devtools::load_all()
stat6_def <- searchAnywhere(query_all = "stat6")
devtools::load_all()
stat6_def <- searchAnywhere(query_all = "stat6")
stat6_def <- searchAnywhere(query_all = "stat6", acc_levels = "run")
temp3 <- searchAnywhereSRA("stat6", "run")
temp3 <- searchAnywhereSRA("stat6", c("run", "sample"))
View(temp3)
temp3 <- searchAnywhereSRA("*stat6*", c("run", "sample"))
View(temp3)
devtools::load_all()
temp3 <- searchAnywhereSRA("*stat6*", c("run", "sample"))
View(temp3)
temp3 <- searchAnywhereSRA("stat6", c("run", "sample"))
dim(temp3)
temp_df <- searchAnywhereSRA("stat6")
temp_df <- searchAnywhereSRA("stat6", "run")
dim(temp_df)
temp_df <- searchAnywhereSRA("stat6", "sample")
dim(temp_df)
temp_df <- searchAnywhereSRA("stat6", "experiment")
dim(temp_df)
temp_df <- searchAnywhereSRA("stat6", "study")
dim(temp_df)
temp_df <- searchAnywhereSRA("stat6", c("run", "sample"))
dim(temp_df)
temp_df <- searchAnywhereSRA("stat6", c("run", "sample", "experiment"))
dim(temp_df)
devtools::load_all()
temp_df <- searchAnywhereSRA("stat6", "run")
dim(temp_df)
temp_df <- searchAnywhereSRA("stat6", "sample")
dim(temp_df)
temp_df <- searchAnywhereSRA("stat6", "experiment")
dim(temp_df)
temp_df <- searchAnywhereSRA("stat6", "study")
dim(temp_df)
temp_df <- searchAnywhereSRA("stat6", c("run", "sample"))
dim(temp_df)
stat6_all <- searchAnywhere("stat6")
dim(stat6_all)
colnames(stat6_all)
View(temp_anywhere_sra_out_udf)
unique(temp_anywhere_sra_out_udf$series_id)
sum(is.na(temp_anywhere_sra_out_sfa$series_id))
sum(!is.na(temp_anywhere_sra_out_sfa$series_id))
sum(!is.na(temp_anywhere_geo_out_sfa$study_accession))
View(getGSECounts)
temp_df <- searchAnywhereSRA("stat66")
temp_df <- searchAnywhere("stat66")
dbDisconnect(geo_con)
startSpideR("/home/AS2382/Documents/SpideR_Packaging201709/Database_Files/Current/")
devtools::lint()
devtools::load_all()
temp_df <- searchAnywhere("stat66")
filter_db_file <- "filter_db.sqlite"
if (file.exists(filter_db_file)) file.remove(filter_db_file)
.GlobalEnv$filter_con <- DBI::dbConnect(RSQLite::SQLite(), dbname = filter_db_file)
DBI::dbWriteTable(conn = filter_con, name="filt_sra", value = SRA_GEO_Category_Conversion)
createFtsTable("filter_con", "filt_sra", "filt_sra_ft")
?`dbClearResult
``
`
?`dbClearResult`
devtools::load_all()
filter_db_file <- "filter_db.sqlite"
if (file.exists(filter_db_file)) file.remove(filter_db_file)
.GlobalEnv$filter_con <- DBI::dbConnect(RSQLite::SQLite(), dbname = filter_db_file)
DBI::dbWriteTable(conn = filter_con, name="filt_sra", value = SRA_GEO_Category_Conversion)
createFtsTable("filter_con", "filt_sra", "filt_sra_ft")
devtools::load_all()
filter_db_file <- "filter_db.sqlite"
if (file.exists(filter_db_file)) file.remove(filter_db_file)
.GlobalEnv$filter_con <- DBI::dbConnect(RSQLite::SQLite(), dbname = filter_db_file)
DBI::dbWriteTable(conn = filter_con, name="filt_sra", value = SRA_GEO_Category_Conversion)
createFtsTable("filter_con", "filt_sra", "filt_sra_ft")
devtools::load_all()
filter_db_file <- "filter_db.sqlite"
if (file.exists(filter_db_file)) file.remove(filter_db_file)
.GlobalEnv$filter_con <- DBI::dbConnect(RSQLite::SQLite(), dbname = filter_db_file)
DBI::dbWriteTable(conn = filter_con, name="filt_sra", value = SRA_GEO_Category_Conversion)
createFtsTable("filter_con", "filt_sra", "filt_sra_ft")
devtools::load_all()
filter_db_file <- "filter_db.sqlite"
if (file.exists(filter_db_file)) file.remove(filter_db_file)
.GlobalEnv$filter_con <- DBI::dbConnect(RSQLite::SQLite(), dbname = filter_db_file)
DBI::dbWriteTable(conn = filter_con, name="filt_sra", value = SRA_GEO_Category_Conversion)
createFtsTable("filter_con", "filt_sra", "filt_sra_ft")
dbGetQuery(filter_con, "SELECT * FROM filt_sra_ft")
temp_df <- searchAnywhere("stat66")
devtools::load_all()
temp_df <- searchAnywhere("stat66")
devtools::load_all()
temp_df <- searchAnywhere("stat66")
devtools::load_all()
temp_df <- searchAnywhere("stat66")
View(removeMatches)
removeMatches("temp_anywhere")
listValidColumns()
unlist(listValidColumns())
as.character(unlist(listValidColumns()))
generateEmptyDF <- function(){
df_columns <- as.character(unlist(listValidColumns()))
df <- stats::setNames(data.frame(matrix(ncol = length(df_columns), nrow = 0)), df_columns)
return(df)
}
generateEmptyDF()
generateEmptyDF <- function(){
df_columns <- character()
df_columns <- c(df_columns, as.character(unlist(listValidColumns()$sra)))
df_columns <- c(df_columns, as.character(unlist(listValidColumns()$gsm)))
df_columns <- c(df_columns, as.character(unlist(listValidColumns()$gse)))
df_columns <- c(df_columns, as.character(unlist(listValidColumns()$added)))
df <- stats::setNames(data.frame(matrix(ncol = length(df_columns), nrow = 0)), df_columns)
return(df)
}
generateEmptyDF()
listValidColumns()$other
searchAnywhereSRA("stat66")
devtools::load_all()
devtools::load_all()
searchAnywhereSRA("stat66")
searchForAccessionAcrossDBsDF("SRR999999", "*", "*", "*")
temp4 <- .Last.value
View(temp4)
colnames(generateEmptyDF()) %in% colnames(temp4)
colnames(generateEmptyDF())
colnames(temp4)
colnames(generateEmptyDF())[!colnames(generateEmptyDF()) %in% colnames(temp4)]
temp4$series_id
devtools::load_all()
searchForAccessionAcrossDBsDF("SRR999999", "*", "*", "*")
plot(dep)
devtools::load_all()
dep <- envirDependencies("package:SpideR") # Plots all functions in the package
plot(dep)
listGSEFields <- function(){
database_name <- "geo_con"
database_env <- ".GlobalEnv"
geo_table <- "gse"
y <- DBI::dbListFields(get(database_name, envir = get(database_env)), geo_table)
y <- y[y %in% "gse"]
return(y)
}
listGSEFields()
listGSEFields <- function(){
database_name <- "geo_con"
database_env <- ".GlobalEnv"
geo_table <- "gse"
y <- DBI::dbListFields(get(database_name, envir = get(database_env)), geo_table)
y <- y[!y %in% "gse"]
return(y)
}
listGSEFields()
listGSEFields <- function(omit_gse = TRUE){
database_name <- "geo_con"
database_env <- ".GlobalEnv"
geo_table <- "gse"
y <- DBI::dbListFields(get(database_name, envir = get(database_env)), geo_table)
if (omit_gse){
y <- y[!y %in% "gse"]
}
return(y)
}
listGSEFields()
rm(listGSEFields)
rm(generateEmptyDF)
devtools::load_all()
listGSEFields()
devtools::load_all()
searchForAccessionAcrossDBsDF("SRR999999", "*", "*", "*")
temp4b <- searchForAccessionAcrossDBsDF("SRR999999", "*", "*", "*")
colnames(temp4b)
setNames(data.frame(matrix(ncol = length(listGSMFields()))), listGSMFields)
setNames(data.frame(matrix(ncol = length(listGSMFields())), nrow = 0), listGSMFields)
setNames(data.frame(matrix(ncol = length(listGSMFields()), nrow = 0)), listGSMFields)
setNames(data.frame(matrix(ncol = length(listGSMFields()), nrow = 0)), listGSMFields())
setNames(data.frame(matrix(ncol = length(listGSMFields()), nrow = 0)), listGSMFields()), setNames(data.frame(matrix(ncol = length(listGSEFields()), nrow = 0)), listGSEFields())
cbind(setNames(data.frame(matrix(ncol = length(listGSMFields()), nrow = 0)), listGSMFields()), setNames(data.frame(matrix(ncol = length(listGSEFields()), nrow = 0)), listGSEFields()))
devtools::load_all()
temp4b <- searchForAccessionAcrossDBsDF("SRR999999", "*", "*", "*")
colnames(temp4b)
devtools::load_all()
temp4b <- searchForAccessionAcrossDBsDF("SRR999999", "*", "*", "*")
colnames(temp4b)
dep_appendGSEColumns <- funDependencies("package:SpideR", "appendGSEColumns")
plot(dep_appendGSEColumns)
appendGSEColumns(dplyr::select(temp4, gsm, series_id), "*")
colnames(temp4b) %in% c("series_id", "gsm")
which(colnames(temp4b) %in% c("series_id", "gsm"))
temp4b_subset <- temp4b[,c(1,80)]
View(temp4b_subset)
appendGSEColumns(temp4b_subset, "*")
.Last.value
temp4b_subset$sth <- NA
temp4b_subset["sth2"] <- NA
temp4b
temp4b_subset
temp4b_subset[c("sth3", "sth4")] <- NA
temp4b_subset
devtools::load_all()
temp4b_subset <- temp4b[,c(1,80)]
appendGSEColumns(temp4b_subset, "*")
stat66 <- searchAnywhere("stat66", "gsm")
stat66 <- searchAnywhere("stat66", acc_levels = "gsm")
devtools::load_all()
stat66 <- searchAnywhere("stat66", acc_levels = "gsm")
View(temp_df_diag)
View(renameGSM(temp_df_diag))
View(renameGSMColumns(temp_df_diag))
appendGSEColumns(temp_df_diag, "*")
devtools::load_all()
appendGSEColumns(temp_df_diag, "*")
listGSEFields()
temp_df_diag[listGSEFields()] <- NA
temp_df_diag["sth"] <- NA
temp_df_diag["sth"] <- NULL
temp_df_diat
temp_df_diag
dim(temp_df_diag)
dim(temp_df_diag)[1]
rep(NA, 0)
matrix(ncol = 10, 10)
matrix(ncol = 10, nrow = 10)
setNames(data.frame(matrix(ncol = 10, nrow = 10)), 1:10)
devtools::load_all()
appendGSEColumns(temp_df_diag, "*")
devtools::load_all()
temp4b <- searchForAccessionAcrossDBsDF("SRR999999", "*", "*", "*")
temp4b_subset <- temp4b[,c(1,80)]
appendGSEColumns(temp4b_subset, "*")
devtools::load_all()
colnames(temp4b)
devtools::load_all()
stat66_geo <- searchAnywhereGEO("stat66")
stat66_geo <- searchAnywhereGSE("stat66")
stat66_geo <- searchAnywhereGSE("stat66", GEO_type = NULL
)
devtools::load_all()
stat66_geo <- searchAnywhereGSE("stat66", GEO_type = NULL
)
stat66_geo
colnames(searchGEOForGSE("GSE8888", "*", "*"))
sgfg <- .Last.value
library(compare)
compare(sgfg, generateEmptyDF(c("gsm", "gse")))
compare(sgfg, colnames(generateEmptyDF(c("gsm", "gse"))))
sgfg
(colnames(generateEmptyDF(c("gsm", "gse"))))
dep_listValidColumns <- funDependencies("package:SpideR", "listValidColumns")
plot(dep_listValidColumns)
devtools::load_all()
(colnames(generateEmptyDF(c("gsm", "gse"))))
devtools::load_all()
colnames(searchGEOForGSE("GSE8888", "*", "*"))
nores_geo_cols <- .Last.value
nores_geo_cols == colnames(generateEmptyDF(c("gsm", "gse")))
colnames(searchAnywhereGSM("stat66"))
colnames(searchAnywhereGSM("stat66", GEO_type = NULL))
devtools::load_all()
colnames(searchAnywhereGSM("stat66", GEO_type = NULL))
colnames(searchAnywhereGEO("stat66", GEO_type = NULL))
colnames(searchAnywhereGEO("stat66", "stat66," GEO_type = NULL))
colnames(searchAnywhereGEO("stat66", "stat66", GEO_type = NULL))
temp66_geo <_ searchAnywhereGEO("stat66", "stat66", GEO_type = NULL)
temp66_geo <- searchAnywhereGEO("stat66", "stat66", GEO_type = NULL)
temp66_all <- searchAnywhere("stat66")
temp66_sra <- searchAnywhereSRA("stat66")
temp66_sra
temp66_geo
devtools::load_all()
temp66_all <- searchAnywhere("stat66")
temp66_all <- searchAnywhere("stat66", acc_levels = c("run", "experiment", "sample", "study", "gsm", "gse"))
temp_random1 <- searchAnywhere("134578", acc_levels = c("run", "experiment", "sample", "study", "gsm", "gse"))
dim(temp_random1)
View(temp_random1)
ifn <- searchAnywhere("interferon", category_both = "Transcriptome NGS")
View(ifn)
load("/shares/MRC-CU/Samarajiwa/Users/AS2382/FROGS/20120903_SamarajiwaS_ST_TimeCourse/Expr.RData")
View(annotation)
rm(annotation)
rm(copy)
rm(aWeights)
rm(targets)
library(glmnet)
library(limma)
vignette(limma)
vignette(package = "limma")
