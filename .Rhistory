}
#SRR_GSM data frame
srr_gsm_df <- searchSRR_GSM(geo_df$gsm)
#SRA data frame
sra_df <- searchSRAForAccession(srr_gsm_df$run_accession, sra_columns)
#Merge
#DOUBLE CHECK IF WANT ALL OR ALL.X ===*===
geo_srr_gsm_df <- merge(geo_df, srr_gsm_df, by.x = "gsm", by.y = "gsm", all = TRUE)
geo_srr_gsm_sra_df <- merge(geo_srr_gsm_df, sra_df, by.x = "run_accession", by.y = "run_accession", all = TRUE)
#Rename data frame
output_df <- geo_srr_gsm_sra_df
}
#=============================================================
#=============================================================
# SRA accession as input
#=============================================================
if (accession_class %in% c("run_accession", "experiment_accession", "sample_accession", "study_accession")){
#SRA data frame
sra_df <- searchSRAForAccession(acc_list, sra_columns)
#SRR_GSM data frame
srr_gsm_df <- searchSRR_GSM(sra_df$run_accession)
#GEO data frame
geo_df <- searchGEOForGSM(srr_gsm_df$gsm, geo_columns)
#Merge
#DOUBLE CHECK IF WANT ALL OR ALL.X ===*===
sra_srr_gsm_df <- merge(sra_df, srr_gsm_df, by.x = "run_accession", by.y = "run_accession", all = TRUE)
sra_srr_gsm_geo_df <- merge(sra_srr_gsm_df, geo_df, by.x = "gsm", by.y = "gsm", all = TRUE)
output_df <- sra_srr_gsm_geo_df
}
#=============================================================
output_df <- output_df[ , c("run_accession", "experiment_accession", "sample_accession", "study_accession", "gsm", "series_id", "gsm_check")]
return(output_df)
}
accessionConverter("GSM881156")
rm(convertSRA_GEO())
rm(convertSRA_GEO)
accessionConverter("GSM881156")
convertGEO
#accessionConverter.R
#Converts a list of accessions (of one type) into all possible accessions within SRA and GEO
#------------------------------------------------------
#------------------------------------------------------
accessionConverter <- function(acc_list){
geo_columns <- c("gsm", "series_id")
#srr_gsm_columns <- c("gsm", "gsm_check", "run_accession")
sra_columns <- c("run_accession", "experiment_accession", "sample_accession", "study_accession")
accession_class <- accessionClassifier(acc_list)
if (!(accession_class %in% c("gsm", "series_id", "run_accesion", "experiment_accession", "sample_accession", "study_accession"))){
stop("Accession needs to belong to one of the supported classes")
}
#=============================================================
# GEO accession as input
#=============================================================
if (accession_class %in% c("gsm", "series_id")){
#GEO data frame
if (accession_class == "gsm"){
geo_df <- searchGEOForGSM(acc_list, geo_columns)
}
if (accession_class == "series_id"){
geo_df <- searchGEOForGSE(acc_list, geo_columns)
}
#SRR_GSM data frame
srr_gsm_df <- searchSRR_GSM(geo_df$gsm)
#SRA data frame
sra_df <- searchSRAForAccession(srr_gsm_df$run_accession, sra_columns)
#Merge
#DOUBLE CHECK IF WANT ALL OR ALL.X ===*===
geo_srr_gsm_df <- merge(geo_df, srr_gsm_df, by.x = "gsm", by.y = "gsm", all = TRUE)
geo_srr_gsm_sra_df <- merge(geo_srr_gsm_df, sra_df, by.x = "run_accession", by.y = "run_accession", all = TRUE)
#Rename data frame
output_df <- geo_srr_gsm_sra_df
}
#=============================================================
#=============================================================
# SRA accession as input
#=============================================================
if (accession_class %in% c("run_accession", "experiment_accession", "sample_accession", "study_accession")){
#SRA data frame
sra_df <- searchSRAForAccession(acc_list, sra_columns)
#SRR_GSM data frame
srr_gsm_df <- searchSRR_GSM(sra_df$run_accession)
#GEO data frame
geo_df <- searchGEOForGSM(srr_gsm_df$gsm, geo_columns)
#Merge
#DOUBLE CHECK IF WANT ALL OR ALL.X ===*===
sra_srr_gsm_df <- merge(sra_df, srr_gsm_df, by.x = "run_accession", by.y = "run_accession", all = TRUE)
sra_srr_gsm_geo_df <- merge(sra_srr_gsm_df, geo_df, by.x = "gsm", by.y = "gsm", all = TRUE)
output_df <- sra_srr_gsm_geo_df
}
#=============================================================
output_df <- output_df[ , c("run_accession", "experiment_accession", "sample_accession", "study_accession", "gsm", "series_id", "gsm_check")]
return(output_df)
}
#------------------------------------------------------
#------------------------------------------------------
accessionConverter("GSM881156")
setwd
file.info("/home/sslab11/Documents/Anna/SpideR_Packaging201709/Historical_Files/SRA_runs.R")
file.info("/home/sslab11/Documents/Anna/SpideR_Packaging201709/Historical_Files/accessionConverter_revamped.R.R")
file.info("/home/sslab11/Documents/Anna/SpideR_Packaging201709/Historical_Files/accessionConverter_revamped.R")
file.info("/home/sslab11/Documents/Anna/SpideR_Packaging201709/Historical_Files/accessionConverter_revamped.R")$ctime
file.info("/home/sslab11/Documents/Anna/SpideR_Packaging201709/accessionConverter.R")$ctime
devtools::load_all()
search()
geoFinder3 <- function(gsm_db_name, gsm_list, gsm_columns, gse_columns){
print("Running geoFinder")
#-------------------------
#Constructing a query
#-------------------------
gsm_columns_sql <- paste(gsm_columns, collapse = ", ")
gse_columns_sql <- paste(gse_columns, collapse = ", ")
gsm_query <- paste0("SELECT DISTINCT ", gsm_columns_sql, " FROM gsm WHERE gsm = '")
gsm_df <- data.frame()
for (m in seq_along(gsm_list)){
gsm_query_c <- paste0(gsm_query, gsm_list[m], "'")
print(gsm_query_c)
chunk <- dbGetQuery(get(as.character(gsm_db_name)), gsm_query_c)
gsm_df <- rbind(gsm_df, chunk)
}
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate one of the columns
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
#Find the unique GSEs
gse_list <- unique(gsm_df$series_id_sep)
#gse_list <- unique(unlist(strsplit(gsm_df$series_id, ",")))
gse_query <- paste0("SELECT DISTINCT ", gse_columns_sql, " FROM gse WHERE gse = '")
gse_df <- data.frame()
for (e in seq_along(gse_list)){
gse_query_c <- paste0(gse_query, gse_list[e], "'")
print(gse_query_c)
chunk2 <- dbGetQuery(get(as.character(gsm_db_name)), gse_query_c)
gse_df <- rbind(gse_df, chunk2)
}
print(colnames(gsm_df))
print(colnames(gse_df))
geo_df <- merge(gsm_df, gse_df, by.x = "series_id_sep", by.y = "gse")
#-------------------------
#Post-query processing
#===*=== Decide what to do about multiple row due to multiple series...
#-------------------------
#Remove repeated rows with NA pubmed_id
#.gsm_df <- unique(gsm_df) #Ensure there are no duplicate entries
#(otherwise if there are two identical rows with NA in pubmed_id, both will be removed)
#.gsm_pubmed <- grep("pubmed_id", colnames(gsm_df)) #Get column index of pubmed_id
#.gsm_dup <- duplicated(gsm_df[,-gsm_pubmed])|duplicated(gsm_df[,-gsm_pubmed], fromLast = TRUE)
#.gsm_na <- is.na(gsm_df$pubmed_id)
#.gsm_df <- gsm_df[!(gsm_dup & gsm_na),]
#-------------------------
#Extract information from the characteristics column and add the columns to the data frame
#===*=== Addressed by column name...
#MOVED OUTSIDE OF THIS FUNCTION
#gsm_df <- cbind(gsm_df, characteristicsExtractor(gsm_df$characteristics_ch1))
print("geoFinder completed")
#return(gsm_df)
return(geo_df)
}
View(a3)
a3 <- geoFinder3("geo_con",
gsm_list = t$gsm,
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1"),
gse_columns = c("gse", "pubmed_id"))
t
str(t)
t <- accessionConverter("GSE93801")
a3 <- geoFinder3("geo_con",
gsm_list = t$gsm,
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1"),
gse_columns = c("gse", "pubmed_id"))
View(a3)
geoFinder3 <- function(gsm_db_name, gsm_list, gsm_columns, gse_columns){
print("Running geoFinder")
#-------------------------
#Constructing a query
#-------------------------
gsm_columns_sql <- paste(gsm_columns, collapse = ", ")
gse_columns_sql <- paste(gse_columns, collapse = ", ")
gsm_query <- paste0("SELECT DISTINCT ", gsm_columns_sql, " FROM gsm WHERE gsm = '")
gsm_df <- data.frame()
for (m in seq_along(gsm_list)){
gsm_query_c <- paste0(gsm_query, gsm_list[m], "'")
print(gsm_query_c)
chunk <- dbGetQuery(get(as.character(gsm_db_name)), gsm_query_c)
gsm_df <- rbind(gsm_df, chunk)
}
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate one of the columns
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
#Find the unique GSEs
gse_list <- unique(gsm_df$series_id_sep)
#gse_list <- unique(unlist(strsplit(gsm_df$series_id, ",")))
gse_query <- paste0("SELECT DISTINCT ", gse_columns_sql, " FROM gse WHERE gse = '")
gse_df <- data.frame()
for (e in seq_along(gse_list)){
gse_query_c <- paste0(gse_query, gse_list[e], "'")
print(gse_query_c)
chunk2 <- dbGetQuery(get(as.character(gsm_db_name)), gse_query_c)
gse_df <- rbind(gse_df, chunk2)
}
print(colnames(gsm_df))
print(colnames(gse_df))
geo_df <- merge(gsm_df, gse_df, by.x = "series_id_sep", by.y = "gse")
geo_df <- unique(geo_df) #Ensure there are no duplicate entries
geo_ignore <- grep("pubmed_id", colnames(geo_df)) #Get column index of pubmed_id
geo_ignore <- append(geo_ignore, grep("series_id_sep", colnames(geo_df)))
geo_dup <- duplicated(geo_df[,-geo_ignore])|duplicated(geo_df[,-geo_ignore], fromLast = TRUE)
geo_na <- is.na(geo_df$pubmed_id)
geo_df <- geo_df[!(geo_dup & geo_na),]
#-------------------------
#Post-query processing
#===*=== Decide what to do about multiple row due to multiple series...
#-------------------------
#Remove repeated rows with NA pubmed_id
#.gsm_df <- unique(gsm_df) #Ensure there are no duplicate entries
#(otherwise if there are two identical rows with NA in pubmed_id, both will be removed)
#.gsm_pubmed <- grep("pubmed_id", colnames(gsm_df)) #Get column index of pubmed_id
#.gsm_dup <- duplicated(gsm_df[,-gsm_pubmed])|duplicated(gsm_df[,-gsm_pubmed], fromLast = TRUE)
#.gsm_na <- is.na(gsm_df$pubmed_id)
#.gsm_df <- gsm_df[!(gsm_dup & gsm_na),]
#-------------------------
#Extract information from the characteristics column and add the columns to the data frame
#===*=== Addressed by column name...
#MOVED OUTSIDE OF THIS FUNCTION
#gsm_df <- cbind(gsm_df, characteristicsExtractor(gsm_df$characteristics_ch1))
print("geoFinder completed")
#return(gsm_df)
return(geo_df)
}
a3b <- geoFinder3("geo_con",
gsm_list = t$gsm,
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1"),
gse_columns = c("gse", "pubmed_id"))
View(a3b)
geoFinder3 <- function(gsm_db_name, gsm_list, gsm_columns, gse_columns){
print("Running geoFinder")
#-------------------------
#Constructing a query
#-------------------------
gsm_columns_sql <- paste(gsm_columns, collapse = ", ")
gse_columns_sql <- paste(gse_columns, collapse = ", ")
gsm_query <- paste0("SELECT DISTINCT ", gsm_columns_sql, " FROM gsm WHERE gsm = '")
gsm_df <- data.frame()
for (m in seq_along(gsm_list)){
gsm_query_c <- paste0(gsm_query, gsm_list[m], "'")
print(gsm_query_c)
chunk <- dbGetQuery(get(as.character(gsm_db_name)), gsm_query_c)
gsm_df <- rbind(gsm_df, chunk)
}
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate one of the columns
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
#Find the unique GSEs
gse_list <- unique(gsm_df$series_id_sep)
#gse_list <- unique(unlist(strsplit(gsm_df$series_id, ",")))
gse_query <- paste0("SELECT DISTINCT ", gse_columns_sql, " FROM gse WHERE gse = '")
gse_df <- data.frame()
for (e in seq_along(gse_list)){
gse_query_c <- paste0(gse_query, gse_list[e], "'")
print(gse_query_c)
chunk2 <- dbGetQuery(get(as.character(gsm_db_name)), gse_query_c)
gse_df <- rbind(gse_df, chunk2)
}
print(colnames(gsm_df))
print(colnames(gse_df))
geo_df <- merge(gsm_df, gse_df, by.x = "series_id_sep", by.y = "gse")
geo_df <- unique(geo_df) #Ensure there are no duplicate entries
geo_ignore <- grep("pubmed_id", colnames(geo_df)) #Get column index of pubmed_id
geo_ignore <- append(geo_ignore, grep("series_id_sep", colnames(geo_df)))
geo_dup <- duplicated(geo_df[,-geo_ignore])|duplicated(geo_df[,-geo_ignore], fromLast = TRUE)
print(sum(geo_dup))
geo_na <- is.na(geo_df$pubmed_id)
print(sum(geo_na))
geo_df <- geo_df[!(geo_dup & geo_na),]
#-------------------------
#Post-query processing
#===*=== Decide what to do about multiple row due to multiple series...
#-------------------------
#Remove repeated rows with NA pubmed_id
#.gsm_df <- unique(gsm_df) #Ensure there are no duplicate entries
#(otherwise if there are two identical rows with NA in pubmed_id, both will be removed)
#.gsm_pubmed <- grep("pubmed_id", colnames(gsm_df)) #Get column index of pubmed_id
#.gsm_dup <- duplicated(gsm_df[,-gsm_pubmed])|duplicated(gsm_df[,-gsm_pubmed], fromLast = TRUE)
#.gsm_na <- is.na(gsm_df$pubmed_id)
#.gsm_df <- gsm_df[!(gsm_dup & gsm_na),]
#-------------------------
#Extract information from the characteristics column and add the columns to the data frame
#===*=== Addressed by column name...
#MOVED OUTSIDE OF THIS FUNCTION
#gsm_df <- cbind(gsm_df, characteristicsExtractor(gsm_df$characteristics_ch1))
print("geoFinder completed")
#return(gsm_df)
return(geo_df)
}
a3b <- geoFinder3("geo_con",
gsm_list = t$gsm,
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1"),
gse_columns = c("gse", "pubmed_id"))
View(a3)
View(a3b)
geoFinder3 <- function(gsm_db_name, gsm_list, gsm_columns, gse_columns){
print("Running geoFinder")
#-------------------------
#Constructing a query
#-------------------------
gsm_columns_sql <- paste(gsm_columns, collapse = ", ")
gse_columns_sql <- paste(gse_columns, collapse = ", ")
gsm_query <- paste0("SELECT DISTINCT ", gsm_columns_sql, " FROM gsm WHERE gsm = '")
gsm_df <- data.frame()
for (m in seq_along(gsm_list)){
gsm_query_c <- paste0(gsm_query, gsm_list[m], "'")
print(gsm_query_c)
chunk <- dbGetQuery(get(as.character(gsm_db_name)), gsm_query_c)
gsm_df <- rbind(gsm_df, chunk)
}
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate one of the columns
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
#Find the unique GSEs
gse_list <- unique(gsm_df$series_id_sep)
#gse_list <- unique(unlist(strsplit(gsm_df$series_id, ",")))
gse_query <- paste0("SELECT DISTINCT ", gse_columns_sql, " FROM gse WHERE gse = '")
gse_df <- data.frame()
for (e in seq_along(gse_list)){
gse_query_c <- paste0(gse_query, gse_list[e], "'")
print(gse_query_c)
chunk2 <- dbGetQuery(get(as.character(gsm_db_name)), gse_query_c)
gse_df <- rbind(gse_df, chunk2)
}
print(colnames(gsm_df))
print(colnames(gse_df))
geo_df <- merge(gsm_df, gse_df, by.x = "series_id_sep", by.y = "gse")
geo_df <- unique(geo_df) #Ensure there are no duplicate entries
geo_ignore <- grep("pubmed_id", colnames(geo_df)) #Get column index of pubmed_id
geo_ignore <- append(geo_ignore, grep("series_id_sep", colnames(geo_df)))
cat(geo_ignore)
geo_dup <- duplicated(geo_df[,-geo_ignore])|duplicated(geo_df[,-geo_ignore], fromLast = TRUE)
print(sum(geo_dup))
geo_na <- is.na(geo_df$pubmed_id)
print(sum(geo_na))
geo_df <- geo_df[!(geo_dup & geo_na),]
#-------------------------
#Post-query processing
#===*=== Decide what to do about multiple row due to multiple series...
#-------------------------
#Remove repeated rows with NA pubmed_id
#.gsm_df <- unique(gsm_df) #Ensure there are no duplicate entries
#(otherwise if there are two identical rows with NA in pubmed_id, both will be removed)
#.gsm_pubmed <- grep("pubmed_id", colnames(gsm_df)) #Get column index of pubmed_id
#.gsm_dup <- duplicated(gsm_df[,-gsm_pubmed])|duplicated(gsm_df[,-gsm_pubmed], fromLast = TRUE)
#.gsm_na <- is.na(gsm_df$pubmed_id)
#.gsm_df <- gsm_df[!(gsm_dup & gsm_na),]
#-------------------------
#Extract information from the characteristics column and add the columns to the data frame
#===*=== Addressed by column name...
#MOVED OUTSIDE OF THIS FUNCTION
#gsm_df <- cbind(gsm_df, characteristicsExtractor(gsm_df$characteristics_ch1))
print("geoFinder completed")
#return(gsm_df)
return(geo_df)
}
a3b <- geoFinder3("geo_con",
gsm_list = t$gsm,
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1"),
gse_columns = c("gse", "pubmed_id"))
View(a3b)
duplicated(a3[,-c(1,9)])|duplicated(a3[,-c(1,9)], fromLast = TRUE)
duplicated(c(1,2,3,4,1))
a3[,-c(1,9)]
p <- data.frame(x = c("A", "A", "B", "B", "C", "C"), y = c(1,2,1,1,3), z = c(NA, "NA", "x", "y", "NA"))
p <- data.frame(x = c("A", "A", "B", "B", "C"), y = c(1,2,1,1,3), z = c(NA, "NA", "x", "y", "NA"))
p
p <- data.frame(x = c("A", "A", "B", "B", "C"), y = c(1,2,1,1,3), z = c(NA, NA, "x", "y", NA))
p
p %>% group_by(x) %>% summarise(test = toString(z)) %>% ungroup()
aggregate(z ~., p, toString)
?toString
toString("c")
toString(c(1,23,4))
dbListFields(geo_con, "gse")
r <- dbGetQuery(geo_con, "SELECT * FROM gse GRUP BY RANDOM() LIMIT 1000")
r <- dbGetQuery(geo_con, "SELECT * FROM gse GROUP BY RANDOM() LIMIT 1000")
View(r)
getAnywhere(test)
testfn
View(testfn)
testf1 <- function(df){
duplicated(df)|duplicated(df, fromLast = TRUE)
}
testf1(c(1,2,3,4,5,4,3,2,1))
p
p %>% add_count(x) %>% group_by(x)
p %>% add_count(x) %>% group_by(x) %>% mutate(zz = n>1)
p %>% group_by(x) %>% summarise(test = toString(z)) %>% ungroup()
x <- t$gsm
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1")
gsm_df <- searchGEOForGSM(x, geo_columns = gsm_columns)
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate one of the columns
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
gse_list <- unique(gsm_df$series_id_sep)
gse_df <- searchGEOForGSE(gse_list, geo_columns = c("gse", "pubmed_id"))
searchGEOForGSM
searchGEOForGSE
dbListFields(geo_con, "gse")
searchGEOForGSE_GSE <- function(acc_list, geo_columns){
#Remove duplicates and order
acc_list <- unique(acc_list)
acc_list <- acc_list[digitSort(acc_list)]
#Stop if list is not valid (i.e. non-gsm entries)
if (accessionClassifier(acc_list)!="series_id"){
stop("Only GSEs are allowed")
}
geo_columns <- paste0(geo_columns, collapse = ", ")
search_count <- 0
df <- data.frame()
#Search for GSMs
for (a in seq_along(acc_list)){
query <- paste0("SELECT ", geo_columns, " FROM gse WHERE gse = '", acc_list[a], "'")
print(query)
chunk <- dbGetQuery(get("geo_con"), query)
search_count <- search_count + as.integer(dim(chunk)[1]>=1)
df <- rbind(df, chunk)
}
print(paste0("Found results for ", search_count, " out of ", length(acc_list), " accession search terms"))
if (search_count!=length(acc_list)){
warning("Some accessions were not found in the database")
}
df <- unique(df)
return(df)
}
x <- t$gsm
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1")
gsm_df <- searchGEOForGSM(x, geo_columns = gsm_columns)
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate one of the columns
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
gse_list <- unique(gsm_df$series_id_sep)
gse_df <- searchGEOForGSE_GSE(gse_list, geo_columns = c("gse", "pubmed_id"))
View(gse_df)
geo_temp <- merge(gsm_df, gse_df, by.x = "series_id_sep", by.y = "gse", all.x = TRUE)
View(geo_temp)
dim(geo_temp)
geo_temp <- geo_temp[,-grep("series_id_sep", colnames(gsm_df))]
dim(geo_temp)
x <- t$gsm
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1")
gsm_df <- searchGEOForGSM(x, geo_columns = gsm_columns)
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate one of the columns
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
gse_list <- unique(gsm_df$series_id_sep)
gse_df <- searchGEOForGSE_GSE(gse_list, geo_columns = c("gse", "pubmed_id"))
geo_temp <- merge(gsm_df, gse_df, by.x = "series_id_sep", by.y = "gse", all.x = TRUE)
geo_temp <- geo_temp[,-grep("series_id_sep", colnames(geo_temp))]
View(geo_temp)
x <- t$gsm
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1")
gsm_df <- searchGEOForGSM(x, geo_columns = gsm_columns)
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate one of the columns
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
gse_list <- unique(gsm_df$series_id_sep)
gse_df <- searchGEOForGSE_GSE(gse_list, geo_columns = c("gse", "pubmed_id"))
geo_temp <- merge(gsm_df[,c("gsm", "series_id", "series_id_sep")], gse_df, by.x = "series_id_sep", by.y = "gse", all.x = TRUE)
geo_temp <- geo_temp[,-grep("series_id_sep", colnames(geo_temp))]
View(geo_temp)
geo_temp <- unique(geo_temp)
geo_temp <- geo_temp %>% add_count(gsm, series_id) %>% group_by(gsm, series_id) %>% mutate(multiple_rows = n>1)
geo_multiple_rows <- (geo_temp$n > 1)
geo_na <- is.na(geo_temp$pubmed_id)
sum(geo_multiple_rows)
sum(geo_na)
geo_remove <- geo_multiple_rows & geo_na
geo_remove
geo_temp[-c(1:35),]
a
a <- 1:35
geo_temp[-a,]
colnames(gsm_df)
colnames(geo_temp)
x <- t$gsm
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1")
gsm_df <- searchGEOForGSM(x, geo_columns = gsm_columns)
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate one of the columns
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
#Search gse table of GEO
gse_list <- unique(gsm_df$series_id_sep)
gse_df <- searchGEOForGSE_GSE(gse_list, geo_columns = c("gse", "pubmed_id"))
#Create a temporary merged df for gse information
geo_temp <- merge(gsm_df[,c("gsm", "series_id", "series_id_sep")], gse_df, by.x = "series_id_sep", by.y = "gse", all.x = TRUE)
geo_temp <- geo_temp[,-grep("series_id_sep", colnames(geo_temp))] #Drop series_id_sep column
geo_temp <- unique(geo_temp)
#Add count column
geo_temp <- geo_temp %>% add_count(gsm, series_id) %>% group_by(gsm, series_id) #%>% mutate(multiple_rows = n>1)
#Get indices
geo_multiple_rows <- (geo_temp$n > 1)
geo_na <- is.na(geo_temp$pubmed_id)
geo_remove <- geo_multiple_rows & geo_na
#Remove rows with na
geo_temp <- geo_temp[-geo_remove, ]
geo_temp <- geo_temp[ , -c("n")] #Remove count column
geo_df <- merge(gsm_df, geo_temp, by.x = c("gsm", "series_id"), by.y = c("gsm", "series_id"), all.x = TRUE)
View(geo_df)
