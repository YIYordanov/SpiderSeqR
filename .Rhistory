if (!(geo_class %in% c("gsm", "series_id"))){
stop("accession_vector must only contain GSE/GSM entries")
}
x <- unique(accession_vector)
x <- x[digitSort(x)]
geo_columns <- c("gsm", "series_id")
geo_columns <- paste0(geo_columns, collapse = ", ")
search_count <- 0
geo_df <- data.frame()
for (a in seq_along(x)){
query <- paste0("SELECT ", geo_columns, " FROM gsm WHERE ", geo_class, " = '", x[a], "'")
print(query)
chunk <- dbGetQuery(geo_con, query)
search_count <- search_count + as.integer(dim(chunk)[1]>=1)
geo_df <- rbind(geo_df, chunk)
}
print(paste0("Found results for ", search_count, " out of ", length(x), " GEO entries"))
sra_df <- searchForGSMinSRA(geo_df$gsm)
output_df <- merge(geo_df, sra_df, all.x = TRUE)
return(output_df)
}
t <- convertGEO(c("GSM2538939", "GSM2539030"))
t
devtools::load_all()
.GlobalEnv$sra_con <- dbConnect(SQLite(), dbname = 'SRAmetadb.sqlite')
.GlobalEnv$geo_con <- dbConnect(SQLite(),'GEOmetadb.sqlite')
dbGetQuery(sra_con, "SELECT study_accession FROM sra WHERE experiment_title LIKE '%GSM%' GROUP BY RANDOM() LIMIT 5 ")
convertGEO("GSE82187")
system.time(convertGEO("SRP033220"))
system.time(convertGEO("GSE52594"))
system.time(t <- convertGEO("GSE52594"))
t
profvis(t <- convertGEO(c("GSM2538939", "GSM2539030")))
install.packages("profvis")
library(profvis)
profvis(t <- convertGEO(c("GSM2538939", "GSM2539030")))
View(t)
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE run_alias NOT LIKE '%GSM%' AND experiment_attribute LIKE '%GSM%'")
gsm_list <- t$
gsm
str(gsm_list)
profvis::profvis({#Remove duplicates
gsm_list <- unique(gsm_list)
gsm_list <- gsm_list[digitSort(gsm_list)]
#Get the total and count
gsm_total <- length(gsm_list)
gsm_count <- 0
#Set parameters
##OPTION 1 (faster, but misses 5k entries):
##gsm_columns <- c("experiment_title", "run_alias") #Pointless: all GSMs that exist within experiment_title are already contained within run_alias
#gsm_columns <- c("run_alias")
#OPTION 2 (optimal for not missing entries)
gsm_columns <- c("run_alias", "experiment_attribute")
if (is.na(sra_columns)){
sra_columns <- c("study_accession", "sample_accession", "experiment_accession", "run_accession")
}
sra_columns <- append(sra_columns, gsm_columns) #Must include gsm_columns to later verify the match
sra_columns_sql <- paste(sra_columns, collapse = ", ")
#Initialise the output data frame
output_df <- data.frame()
for (g in seq_along(gsm_list)){ #For each GSM
##OPTION 1:
##ASSUMPTION: all fields containing GSM begin with GSM (speeds up performance)
##Need to be careful with the experiment_attribute column - this wouldn't work!
#query <- paste0("SELECT ", sra_columns_sql, " FROM sra WHERE ", queryWriter(gsm_list[g], gsm_columns, sql_before = " LIKE '"))
#OPTION 2:
query <- paste0("SELECT ", sra_columns_sql, " FROM sra WHERE run_alias LIKE '", gsm_list[g], "%' OR experiment_attribute LIKE '%", gsm_list[g], "%'")
current_chunk <- dbGetQuery(sra_con, query)
#print(dim(current_chunk))
#Verify that correct GSMs have been captured
gsm_regexp <- paste0(gsm_list[g], "[^0-9]")
current_chunk <- current_chunk[conditionVerifier2(current_chunk, gsm_regexp, gsm_columns),]
if (dim(current_chunk)[1] != 0){
output_df <- rbind(output_df, current_chunk) #Add current chunk to the output
gsm_count <- gsm_count + 1 #Increase the counter
}
}
print(paste0("Found results for ", gsm_count, " out of ", gsm_total, " GSMs in SRA"))})
dbGetQuery
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE experiment_attribute LIKE '%GEO Accession: GSM%'")
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE experiment_attribute LIKE '%GSM%'")
devtools::load_all()
.GlobalEnv$sra_con <- dbConnect(SQLite(), dbname = 'SRAmetadb.sqlite')
.GlobalEnv$geo_con <- dbConnect(SQLite(),'GEOmetadb.sqlite')
gsub(".*?(GSM\\d\\d\\d+).*", "\\1", "GSM101")
gsub(".*?(GSM\\d\\d\\d+).*", "\\1", "")
gsub(".*?(GSM\\d\\d\\d+).*", "\\1", "GSM101a")
gsub(".*?(GSM\\d\\d\\d+).*", "\\1", "aGSM101a")
gsub(".*?(GSM\\d\\d\\d+).*", "\\1", "gsmaGSM101a")
gsub(".*?(GSM\\d\\d\\d+).*", "\\1", "GEO Accession: GSM101a")
gsub("(GSM\\d\\d\\d+)", "\\1", "GEO Accession: GSM101a")
gsub(".*?GEO Accession: (GSM\\d\\d\\d+).*", "\\1", "GEO Accession: GSM101a")
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE experiment_attribute NOT LIKE '%GEO Accession: GSM%' AND experiment_attribute LIKE '%GEO%'")
gs <- dbGetQuery(sra_con, "SELECT * FROM sra WHERE experiment_attribute NOT LIKE '%GEO Accession: GSM%' AND experiment_attribute LIKE '%GEO%'")
View(gs)
sum(grepl("GEO Accession", gs$experiment_attribute))
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE experiment_attribute NOT LIKE '%GEO Accession: GSM%' AND experiment_attribute LIKE '%GSM%'")
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE experiment_attribute LIKE '%GSM%'")
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE experiment_attribute LIKE '%GEO Accession: GSM%'")
system.time(sum(grepl("GEO Accession: GSM\\d\\d\\d+", gs$experiment_attribute)))
system.time(sum(grepl("GSM\\d\\d\\d+", gs$experiment_attribute)))
system.time(sum(grepl("GSM\\d\\d\\d+", gs$experiment_attribute)))
system.time(sum(grepl("GSM\\d\\d\\d+", gs$experiment_attribute)))
system.time(sum(grepl("GSM\\d\\d\\d+", gs$experiment_attribute)))
system.time(sum(grepl("GEO Accession: GSM\\d\\d\\d+", gs$experiment_attribute)))
system.time(sum(grepl("GEO Accession: GSM\\d\\d\\d+", gs$experiment_attribute)))
system.time(sum(grepl("GEO Accession: GSM\\d\\d\\d+", gs$experiment_attribute)))
system.time(sum(grepl("GEO Accession: GSM\\d\\d\\d+", gs$experiment_attribute)))
system.time(sum(grepl("GEO Accession: GSM\\d\\d\\d+", gs$experiment_attribute)))
system.time(sum(grepl("GEO Accession: GSM\\d\\d\\d+", gs$experiment_attribute)))
NA == NA
chunk <- dbFetch(rs, 1000)
chunk$run_gsm <- NA
chunk$exp_gsm <- NA
run_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$run_alias)
#exp_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$experiment_attribute)
exp_gsm_indices <- grepl("GEO Accession: GSM\\d\\d\\d+", chunk$experiment_attribute)
chunk$run_gsm <- gsub(".*?(GSM\\d\\d\\d+).*", "\\1", chunk$run_alias)
chunk$exp_gsm <- gsub(".?GEO Accession: (GSM\\d\\d\\d+).*", "\\1", chunk$experiment_attribute)
chunk$gsm_check <- chunk$run_gsm == chunk$exp_gsm
print(sum(run_gsm_indices & exp_gsm_indices))
rs <- dbSendQuery(sra_con, "SELECT run_accession, experiment_accession, sample_accession, project_accession, run_alias, experiment_attribute FROM sra WHERE run_alias LIKE 'GSM%' OR experiment_attribute LIKE '%GSM%'")
#while (!dbHasCompleted(rs)){
chunk <- dbFetch(rs, 1000)
chunk$run_gsm <- NA
chunk$exp_gsm <- NA
run_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$run_alias)
#exp_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$experiment_attribute)
exp_gsm_indices <- grepl("GEO Accession: GSM\\d\\d\\d+", chunk$experiment_attribute)
chunk$run_gsm <- gsub(".*?(GSM\\d\\d\\d+).*", "\\1", chunk$run_alias)
chunk$exp_gsm <- gsub(".?GEO Accession: (GSM\\d\\d\\d+).*", "\\1", chunk$experiment_attribute)
chunk$gsm_check <- chunk$run_gsm == chunk$exp_gsm
print(sum(run_gsm_indices & exp_gsm_indices))
rs <- dbSendQuery(sra_con, "SELECT run_accession, experiment_accession, sample_accession, study_accession, run_alias, experiment_attribute FROM sra WHERE run_alias LIKE 'GSM%' OR experiment_attribute LIKE '%GSM%'")
#while (!dbHasCompleted(rs)){
chunk <- dbFetch(rs, 1000)
chunk$run_gsm <- NA
chunk$exp_gsm <- NA
run_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$run_alias)
#exp_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$experiment_attribute)
exp_gsm_indices <- grepl("GEO Accession: GSM\\d\\d\\d+", chunk$experiment_attribute)
chunk$run_gsm <- gsub(".*?(GSM\\d\\d\\d+).*", "\\1", chunk$run_alias)
chunk$exp_gsm <- gsub(".?GEO Accession: (GSM\\d\\d\\d+).*", "\\1", chunk$experiment_attribute)
chunk$gsm_check <- chunk$run_gsm == chunk$exp_gsm
print(sum(run_gsm_indices & exp_gsm_indices))
rs <- dbSendQuery(sra_con, "SELECT run_accession, experiment_accession, sample_accession, study_accession, run_alias, experiment_attribute FROM sra WHERE run_alias LIKE 'GSM%' OR experiment_attribute LIKE '%GSM%'")
#while (!dbHasCompleted(rs)){
chunk <- dbFetch(rs, 1000)
chunk$run_gsm <- NA
chunk$exp_gsm <- NA
run_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$run_alias)
#exp_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$experiment_attribute)
exp_gsm_indices <- grepl("GEO Accession: GSM\\d\\d\\d+", chunk$experiment_attribute)
chunk$run_gsm <- gsub(".*?(GSM\\d\\d\\d+).*", "\\1", chunk$run_alias)
chunk$exp_gsm <- gsub(".?GEO Accession: (GSM\\d\\d\\d+).*", "\\1", chunk$experiment_attribute)
chunk$gsm_check <- chunk$run_gsm == chunk$exp_gsm
print(sum(run_gsm_indices | exp_gsm_indices))
View(chunk)
rs <- dbSendQuery(sra_con, "SELECT run_accession, experiment_accession, sample_accession, study_accession, run_alias, experiment_attribute FROM sra WHERE run_alias LIKE 'GSM%' OR experiment_attribute LIKE '%GSM%'")
#while (!dbHasCompleted(rs)){
chunk <- dbFetch(rs, 1000)
chunk$run_gsm <- NA
chunk$exp_gsm <- NA
run_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$run_alias)
#exp_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$experiment_attribute)
exp_gsm_indices <- grepl("GEO Accession: GSM\\d\\d\\d+", chunk$experiment_attribute)
chunk$run_gsm[run_gsm_indices] <- gsub(".*?(GSM\\d\\d\\d+).*", "\\1", chunk$run_alias[run_gsm_indices])
chunk$exp_gsm[exp_gsm_indices] <- gsub(".?GEO Accession: (GSM\\d\\d\\d+).*", "\\1", chunk$experiment_attribute[exp_gsm_indices])
chunk$gsm_check <- chunk$run_gsm == chunk$exp_gsm
print(sum(run_gsm_indices | exp_gsm_indices))
View(chunk)
1 || 1
1 || 0
0 || 1
xor(1,1)
xor(1,0)
xor(1==1,0)
xor(1==1,0=1)
xor(1==1,0==1)
xor(1==1,0==0)
db_df <- data.frame()
rs <- dbSendQuery(sra_con, "SELECT run_accession, experiment_accession, sample_accession, study_accession, run_alias, experiment_attribute FROM sra WHERE run_alias LIKE 'GSM%' OR experiment_attribute LIKE '%GSM%'")
#while (!dbHasCompleted(rs)){
chunk <- dbFetch(rs, 1000)
chunk$run_gsm <- NA
chunk$exp_gsm <- NA
run_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$run_alias)
#exp_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$experiment_attribute)
exp_gsm_indices <- grepl("GEO Accession: GSM\\d\\d\\d+", chunk$experiment_attribute)
chunk$run_gsm[run_gsm_indices] <- gsub(".*?(GSM\\d\\d\\d+).*", "\\1", chunk$run_alias[run_gsm_indices])
chunk$exp_gsm[exp_gsm_indices] <- gsub(".?GEO Accession: (GSM\\d\\d\\d+).*", "\\1", chunk$experiment_attribute[exp_gsm_indices])
chunk$gsm_check <- NA
both_indices <- xor(is.na(chunk$run_gsm), is.na(chunk$exp_gsm))
chunk$gsm_check[both_indices] <- chunk$run_gsm[both_indices] == chunk$exp_gsm[both_indices]
#GSM_CHECK: NA - either one or both missing
#           F - run_gsm and exp_gsm NOT the same
#           T - run_gsm and exp_gsm the same
print(sum(run_gsm_indices | exp_gsm_indices))
db_df <- rbind(db_df, chunk)
View(db_df)
unique(db_df$gsm_check#)
unique(db_df$gsm_check)
unique(db_df$gsm_check)
chunk$run_gsm[both_indices] == chunk$exp_gsm[both_indices]
db_df <- data.frame()
rs <- dbSendQuery(sra_con, "SELECT run_accession, experiment_accession, sample_accession, study_accession, run_alias, experiment_attribute FROM sra WHERE run_alias LIKE 'GSM%' OR experiment_attribute LIKE '%GSM%'")
#while (!dbHasCompleted(rs)){
chunk <- dbFetch(rs, 1000)
chunk$run_gsm <- NA
chunk$exp_gsm <- NA
run_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$run_alias)
#exp_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$experiment_attribute)
exp_gsm_indices <- grepl("GEO Accession: GSM\\d\\d\\d+", chunk$experiment_attribute)
chunk$run_gsm[run_gsm_indices] <- gsub(".*?(GSM\\d\\d\\d+).*", "\\1", chunk$run_alias[run_gsm_indices])
chunk$exp_gsm[exp_gsm_indices] <- gsub(".?GEO Accession: (GSM\\d\\d\\d+).*", "\\1", chunk$experiment_attribute[exp_gsm_indices])
chunk$gsm_check <- NA
both_indices <- !(is.na(chunk$run_gsm) | is.na(chunk$exp_gsm))
chunk$gsm_check[both_indices] <- chunk$run_gsm[both_indices] == chunk$exp_gsm[both_indices]
#GSM_CHECK: NA - either one or both missing
#           F - run_gsm and exp_gsm NOT the same
#           T - run_gsm and exp_gsm the same
print(sum(run_gsm_indices | exp_gsm_indices))
db_df <- rbind(db_df, chunk)
ex1 <- db_df
sub(".*?GEO Accession: (GSM\\d\\d\\d+).*", "\\1", chunk$experiment_attribute[980:1000])
gsub(".*?GEO Accession: (GSM\\d\\d\\d+).*", "\\1", chunk$experiment_attribute[980:1000])
db_df <- data.frame()
rs <- dbSendQuery(sra_con, "SELECT run_accession, experiment_accession, sample_accession, study_accession, run_alias, experiment_attribute FROM sra WHERE run_alias LIKE 'GSM%' OR experiment_attribute LIKE '%GSM%'")
#while (!dbHasCompleted(rs)){
chunk <- dbFetch(rs, 1000)
chunk$run_gsm <- NA
chunk$exp_gsm <- NA
run_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$run_alias)
#exp_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$experiment_attribute)
exp_gsm_indices <- grepl("GEO Accession: GSM\\d\\d\\d+", chunk$experiment_attribute)
chunk$run_gsm[run_gsm_indices] <- gsub(".*?(GSM\\d\\d\\d+).*", "\\1", chunk$run_alias[run_gsm_indices])
chunk$exp_gsm[exp_gsm_indices] <- gsub(".*?GEO Accession: (GSM\\d\\d\\d+).*", "\\1", chunk$experiment_attribute[exp_gsm_indices])
chunk$gsm_check <- NA
both_indices <- !(is.na(chunk$run_gsm) | is.na(chunk$exp_gsm))
chunk$gsm_check[both_indices] <- chunk$run_gsm[both_indices] == chunk$exp_gsm[both_indices]
#GSM_CHECK: NA - either one or both missing
#           F - run_gsm and exp_gsm NOT the same
#           T - run_gsm and exp_gsm the same
print(sum(run_gsm_indices | exp_gsm_indices))
db_df <- rbind(db_df, chunk)
colnames(chunk)
db_df <- data.frame()
rs <- dbSendQuery(sra_con, "SELECT run_accession, experiment_accession, sample_accession, study_accession, run_alias, experiment_attribute FROM sra WHERE run_alias LIKE 'GSM%' OR experiment_attribute LIKE '%GSM%'")
#while (!dbHasCompleted(rs)){
chunk <- dbFetch(rs, 1000)
chunk$run_gsm <- NA
chunk$exp_gsm <- NA
run_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$run_alias)
#exp_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$experiment_attribute)
exp_gsm_indices <- grepl("GEO Accession: GSM\\d\\d\\d+", chunk$experiment_attribute)
chunk$run_gsm[run_gsm_indices] <- gsub(".*?(GSM\\d\\d\\d+).*", "\\1", chunk$run_alias[run_gsm_indices])
chunk$exp_gsm[exp_gsm_indices] <- gsub(".*?GEO Accession: (GSM\\d\\d\\d+).*", "\\1", chunk$experiment_attribute[exp_gsm_indices])
chunk$gsm_check <- NA
both_indices <- !(is.na(chunk$run_gsm) | is.na(chunk$exp_gsm))
chunk$gsm_check[both_indices] <- chunk$run_gsm[both_indices] == chunk$exp_gsm[both_indices]
#GSM_CHECK: NA - either one or both missing
#           F - run_gsm and exp_gsm NOT the same
#           T - run_gsm and exp_gsm the same
#Chunk columns at present: "run_accession", "experiment_accession", "sample_accession", "study_accession", "run_alias", "experiment_attribute", "run_gsm", "exp_gsm", "gsm_check"
chunk <- chunk[,c("run_accession", "experiment_accession", "sample_accession", "study_accession", "run_gsm", "exp_gsm", "gsm_check")]
print(sum(run_gsm_indices | exp_gsm_indices))
db_df <- rbind(db_df, chunk)
db_df <- data.frame()
rs <- dbSendQuery(sra_con, "SELECT run_accession, experiment_accession, sample_accession, study_accession, run_alias, experiment_attribute FROM sra WHERE run_alias LIKE 'GSM%' OR experiment_attribute LIKE '%GSM%'")
#while (!dbHasCompleted(rs)){
chunk <- dbFetch(rs, 1000)
chunk$run_gsm <- NA
chunk$exp_gsm <- NA
run_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$run_alias)
#exp_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$experiment_attribute)
exp_gsm_indices <- grepl("GEO Accession: GSM\\d\\d\\d+", chunk$experiment_attribute)
chunk$run_gsm[run_gsm_indices] <- gsub(".*?(GSM\\d\\d\\d+).*", "\\1", chunk$run_alias[run_gsm_indices])
chunk$exp_gsm[exp_gsm_indices] <- gsub(".*?GEO Accession: (GSM\\d\\d\\d+).*", "\\1", chunk$experiment_attribute[exp_gsm_indices])
chunk$gsm_check <- NA
both_indices <- !(is.na(chunk$run_gsm) | is.na(chunk$exp_gsm))
chunk$gsm_check[both_indices] <- chunk$run_gsm[both_indices] == chunk$exp_gsm[both_indices]
#GSM_CHECK: NA - either one or both missing
#           F - run_gsm and exp_gsm NOT the same
#           T - run_gsm and exp_gsm the same
chunk$gsm <- NA
chunk$gsm[!is.na(chunk$exp_gsm)] <- chunk$exp_gsm[!is.na(chunk$exp_gsm)]
chunk$gsm[!is.na(chunk$run_gsm)] <- chunk$run_gsm[!is.na(chunk$run_gsm)]
#Chunk columns at present: "run_accession", "experiment_accession", "sample_accession", "study_accession", "run_alias", "experiment_attribute", "run_gsm", "exp_gsm", "gsm_check"
chunk <- chunk[,c("run_accession", "experiment_accession", "sample_accession", "study_accession", "gsm", "gsm_check")]
print(sum(run_gsm_indices | exp_gsm_indices))
db_df <- rbind(db_df, chunk)
View(db_df)
View(ex1)
db_df <- data.frame()
rs <- dbSendQuery(sra_con, "SELECT run_accession, experiment_accession, sample_accession, study_accession, run_alias, experiment_attribute FROM sra WHERE run_alias LIKE 'GSM%' OR experiment_attribute LIKE '%GSM%'")
#while (!dbHasCompleted(rs)){
chunk <- dbFetch(rs, 1000)
#Create intermediate columns for extracting GSM information
chunk$run_gsm <- NA #from run_alias
chunk$exp_gsm <- NA #from experiment_attribute
#Find indices where GSM is present
run_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$run_alias)
#exp_gsm_indices <- grepl("GSM\\d\\d\\d+", chunk$experiment_attribute)
exp_gsm_indices <- grepl("GEO Accession: GSM\\d\\d\\d+", chunk$experiment_attribute)
#Extract GSM information
chunk$run_gsm[run_gsm_indices] <- gsub(".*?(GSM\\d\\d\\d+).*", "\\1", chunk$run_alias[run_gsm_indices])
chunk$exp_gsm[exp_gsm_indices] <- gsub(".*?GEO Accession: (GSM\\d\\d\\d+).*", "\\1", chunk$experiment_attribute[exp_gsm_indices])
#Create a column to indicate whether GSMs agree between two columns
chunk$gsm_check <- NA
#Fill in check column
both_indices <- !(is.na(chunk$run_gsm) | is.na(chunk$exp_gsm)) #Get indices where run_alias and experiment_attribute are both present
chunk$gsm_check[both_indices] <- chunk$run_gsm[both_indices] == chunk$exp_gsm[both_indices] #Check those indices for equality
#GSM_CHECK: NA - either one or both missing
#           F - run_gsm and exp_gsm NOT the same
#           T - run_gsm and exp_gsm the same
#Create a new column for storing GSMs
chunk$gsm <- NA
#Extract information from exp_gsm and run_gsm columns
chunk$gsm[!is.na(chunk$exp_gsm)] <- chunk$exp_gsm[!is.na(chunk$exp_gsm)] #Non-NA entries from experiment_attribute
chunk$gsm[!is.na(chunk$run_gsm)] <- chunk$run_gsm[!is.na(chunk$run_gsm)] #Non-NA entries from run_alias
#NOTE: if both exp_gsm and run_gsm are present, the GSM obtained from run_alias will be retained
#Chunk columns at present: "run_accession", "experiment_accession", "sample_accession", "study_accession", "run_alias", "experiment_attribute", "run_gsm", "exp_gsm", "gsm_check"
#Select columns
chunk <- chunk[,c("run_accession", "experiment_accession", "sample_accession", "study_accession", "gsm", "gsm_check")]
#Get the number of entries with GSM content
print(sum(run_gsm_indices | exp_gsm_indices))
db_df <- rbind(db_df, chunk)
View(db_df)
getAnywhere(digitSort())
order_columns <- list(db_df$study_accession,
db_df$sample_accession,
db_df$experiment_accession,
db_df$run_accession,
db_df$gsm)
db_df <- db_df[digitSort(order_columns),]
View(db_df)
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE study_accession = 'SRP000941'")
t2 <- db_df[digitSort(db_df$run_accession)]
t2 <- db_df[digitSort(db_df$run_accession),]
View(t2)
saveRDS(t2, "chunk1OBrun_accession.Rda")
saveRDS(db_df, "chunk1OB_SRPSXR.Rda")
saveRDS(ex1, "chunk1unordered.Rda")
f <- dbGetQuery(sra_con, "SELECT * FROM sra LIMIT 1000")
View(f)
digitSort(t$submission_accession)
digitSort()
digitSort(list(t$submission_accession))
digitSort(list(f$submission_accession))
sum(digitSort(list(f$submission_accession))==1:1000)
sum(digitSort(list(f$study_accession))==1:1000)
digitSort(f$study_accession)
sum(digitSort(list(f$submission_accession, f$study_accession))==1:1000)
sum(digitSort(list(f$submission_accession, f$run_accession))==1:1000)
sum(digitSort(list(f$submission_accession, f$experiment_accession))==1:1000)
sum(digitSort(list(f$submission_accession, f$study_accession, f$experiment_accession))==1:1000)
sum(digitSort(list(f$submission_accession, f$study_accession, f$sample_accession, f$experiment_accession, f$run_accession))==1:1000)
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE library_strategy = 'DRIP-Seq'")
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE sample_attribute LIKE '%antibody: S9.6%'")
dr1 <- dbGetQuery(sra_con, "SELECT * FROM sra WHERE sample_attribute LIKE '%antibody: S9.6%'")
View(dr1)
dr1b <- dbGetQuery(sra_con, "SELECT * FROM sra WHERE sample_attribute LIKE '%S9.6%'")
View(dr1b)
dr2 <- dbGetQuery(sra_con, "SELECT * FROM sra WHERE experiment_title LIKE '%DRIP%'")
View(dr2)
sort(c("0099", "99"))
sort(c("001", "99"))
sort(c("001", "1"))
sort(c("001", "10"))
sort(c("0010", "1"))
View(db_df)
sort(c("1500", "0150"))
sort(c("01500", "150"))
?sort
sort(as.numeric(c("01500", "150")))
order(c("1500", "0150"))
paf1 <- dbGetQuery(sra_con, "SELECT * FROM sra WHERE sample_attribute LIKE '%antibody: paf1%'")
View(paf1)
searchForTerm(library_strategy = "ChIP-Seq", antibody = c("paf1", "PAF1"))
searchForTerm(library_strategy = "ChIP-Seq", antibody = c("paf1", "PAF1"))
library_strategy <- "ChIP-Seq"
antibody <- c("paf1", "PAF1")
gene <- NULL
cell_type <- NULL
treatment <- NULL
species <- NULL
platform <- NULL
secondary_library_strategy <- NULL
st <- list(library_strategy=library_strategy, gene=gene, antibody=antibody, cell_type=cell_type, treatment=treatment, species=species, platform=platform, secondary_library_strategy=secondary_library_strategy)
sample_list <- do.call(searchSRA, st[-grep("secondary_library_strategy", names(st))])
View(sample_list)
#============================================================================
#Add input and control columns
#============================================================================
if (st$library_strategy == "ChIP-Seq"){
sample_list$input <- "N"
} else {
sample_list$input <- NA
}
if (st$library_strategy == "RNA-Seq"){
sample_list$control <- "N"
} else {
sample_list$control <- NA
}
#============================================================================
all_list <- searchForSRPChildren(unique(sample_list$study_accession), "*") #Changed to avoid problems with column management
all_list$input <- NA
all_list$control <- NA
View(all_list)
spider_combined <- rbindUniqueCols(x=sample_list, y = all_list, disregard_columns=c("input", "control"))
dim(spider_combined)
spider_combined <- gsmExtractor(spider_combined)
#============================================================================
#Extract SRA sample attributes
#============================================================================
#PREVIOUSLY
#sra_attr_keywords <- list(c("tissue: ", "cell.line: ", "source.name: ", "cell.type: "),
#                          c("antibody: "),
#                          c("hgn: "),
#                          c("treatment: "))
#===*=== Make a better choice
sra_tissue <- c("strain", "tissue", "source.?name", "isolation.?source", "isolate", "body.?site", "sample.?type", "cell.?type", "cell.?line", "ArrayExpress-CellType", "inferred.?cell.?type", "cell", "cre.?line", "cell.?description", "cell.?subtype", "cell.?or.?tisue.?type",
"ArrayExpress-StrainOrLine", "lineage", "line", "strain.?or.?line",
"body.?site", "site", "corrected.?sample.?site", "host.?body.?site",
"tissue.?type", "host.?tissue.?sampled", "tissue.?depot",
"source_material_id", "source",
"organism.?part") #TISSUE #ONLY USED HERE #RESEARCHED WELL
sra_tissue <- paste0(sra_tissue, ": ")
sra_antibody <- c("chip.antibody", "antibody", "ArrayExpress.Immunoprecipitate", "ip.antibody", "rip.antibody", "medip.antibody", "clip.antibody", "frip.antibody", "chip-seq.antibody") #ANTIBODY #RESEARCHED WELL
sra_antibody <- paste0(sra_antibody, ": ")
sra_gene <- c("genotype", "ArrayExpress.Genotype", "genotype/variation", "target.gene", "genetic.background", "host.genotype", "Plant.genotype", "genetic.modification", "transgene", "gene.id", "myd88.genotype", "gene.perturbation.type", "genetic.condition", "cytogenetics", "concise.genotype.name", "genspecies.abbr", "melanoma.genetic.conditions", "marker.gene", "gene", "strain/genotype", "genotype/variation", "knockout", "knockdown", "hgn") #GENE #RESEARCHED (based on sa_categories)
sra_gene <- paste0(sra_gene, ": ")
sra_treatment <- c("treatment", "ArrayExpress.Treatment", "treated.with", "treatment.description", "drug.treatment", "treatment.protocol", "Vaccine.Treatment", "experimental.treatment", "diet.treatment", "treatment.group") #TREATMENT #RESEARCHED
sra_treatment <- paste0(sra_treatment, ": ")
sra_attr_keywords <- list(sra_tissue, sra_antibody, sra_gene, sra_treatment)
sra_sep_split <- " \\|\\| "
sra_sep_collapse <- " || "
spider_sra_attr <- ldply(spider_combined$sample_attribute, function(x) universalExtractor(x, sra_sep_split, sra_sep_collapse, sra_attr_keywords))
colnames(spider_sra_attr) <- c("sa_original", "sa_remainder", "sa_tissue", "sa_antibody", "sa_gene", "sa_treatment")
spider_combined <- cbind(spider_combined, spider_sra_attr[,(-1)]) #Combine extracted columns with df (except attr_original column)
spider_combined <- inputDetector(spider_combined) #Detect ChIP-Seq inputs
spider_combined <- controlDetector(spider_combined) #Detect RNA-Seq controls
spider_combined <- mergeDetector(spider_combined)
View(spider_combined)
missingRunVerifier(spider_combined$run_accession) #
table(spider_combined$run_accession)
srr_list_in <- spider_combined$run_accession
srr_list_in <- unique(srr_list_in[order(srr_list_in)])
miss_exp <- parQuery("sra_con", "SELECT experiment_accession, run_accession FROM sra WHERE run_accession = ?", srr_list_in)
res <- dbGetQuery(get(as.character("sra_con")), "SELECT experiment_accession, run_accession FROM sra WHERE run_accession = ?")
res <- dbGetQuery(get(as.character("sra_con")), "SELECT experiment_accession, run_accession FROM sra WHERE run_accession = :x")
res <- dbGetQuery(sra_con, "SELECT experiment_accession, run_accession FROM sra WHERE run_accession = :x")
devtools::load_all()
res <- dbGetQuery(sra_con, "SELECT experiment_accession, run_accession FROM sra WHERE run_accession = :x")
rm(res)
.GlobalEnv$sra_con <- dbConnect(SQLite(), dbname = 'SRAmetadb.sqlite')
.GlobalEnv$geo_con <- dbConnect(SQLite(),'GEOmetadb.sqlite')
res <- dbGetQuery(sra_con, "SELECT experiment_accession, run_accession FROM sra WHERE run_accession = :x")
res <- dbGetQuery(sra_con, "SELECT experiment_accession, run_accession FROM sra WHERE run_accession = 'SRR2518146'")
res
res <- dbSendQuery(sra_con, "SELECT experiment_accession, run_accession FROM sra WHERE run_accession = :x")
search()
res <- dbSendQuery(sra_con, "SELECT experiment_accession, run_accession FROM sra WHERE run_accession = ?")
?dbSendQuery
devtools::load_all()
searchForTerm(library_strategy = "ChIP-Seq", antibody = c("paf1", "PAF1"))
?sessionInfo
sessionInfo()
res <- dbSendQuery(sra_con, "SELECT experiment_accession, run_accession FROM sra WHERE run_accession = $s")
res <- dbSendQuery(sra_con, "SELECT experiment_accession, run_accession FROM sra WHERE [run_accession] = $s")
s <- 'SRR1607736'
res <- dbSendQuery(sra_con, "SELECT experiment_accession, run_accession FROM sra WHERE [run_accession] = $s")
search()
res <- dbSendQuery(sra_con, "SELECT experiment_accession, run_accession FROM sra WHERE [run_accession] = $s")
search()
sessionInfo()
devtools::load_all()
search()
.GlobalEnv$sra_con <- dbConnect(SQLite(), dbname = 'SRAmetadb.sqlite')
.GlobalEnv$geo_con <- dbConnect(SQLite(),'GEOmetadb.sqlite')
res <- dbSendQuery(sra_con, "SELECT run_accession FROM sra WHERE run_accession = ?")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
install.packages("DBI")
res <- dbSendQuery(sra_con, "SELECT run_accession FROM sra WHERE run_accession = ?")
.GlobalEnv$sra_con <- dbConnect(SQLite(), dbname = 'SRAmetadb.sqlite')
.GlobalEnv$geo_con <- dbConnect(SQLite(),'GEOmetadb.sqlite')
res <- dbSendQuery(sra_con, "SELECT run_accession FROM sra WHERE run_accession = ?")
detach("package:DBI", unload=TRUE)
install.packages("DBI")
install.packages("DBI")
detach("package:SpideR", unload = TRUE)
detach("SpideR")
install.packages("DBI")
install.packages("DBI")
library(DBI)
sessionInfo
sessionInfo()
devtools::load_all()
res <- dbSendQuery(sra_con, "SELECT run_accession FROM sra WHERE run_accession = ?")
.GlobalEnv$sra_con <- dbConnect(SQLite(), dbname = 'SRAmetadb.sqlite')
.GlobalEnv$geo_con <- dbConnect(SQLite(),'GEOmetadb.sqlite')
res <- dbSendQuery(sra_con, "SELECT run_accession FROM sra WHERE run_accession = ?")
library(RSQLite)
library(DBI)
sessionInfo
sessionInfo()
res <- dbSendQuery(sra_con, "SELECT run_accession FROM sra WHERE run_accession = ?")
.GlobalEnv$sra_con <- dbConnect(SQLite(), dbname = 'SRAmetadb.sqlite')
.GlobalEnv$geo_con <- dbConnect(SQLite(),'GEOmetadb.sqlite')
res <- dbSendQuery(sra_con, "SELECT run_accession FROM sra WHERE run_accession = ?")
