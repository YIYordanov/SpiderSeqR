return(outcome)
}
#=============================================================
#=============================================================
checkOrder(1:10, "order")
checkOrder(1:10, "orderAccessions")
orderAccessions(1:10)
orderAccessions <- function(x, na.last = TRUE){
# Steps:
# - warning if not just alphanumeric
# - remove alpha
# - sort by numeric
if (is.list(x)){
x_num <- list()
for (i in seq_along(x)){
n_nas <- sum(is.na(x[[i]])) # NOTE: NAs do not give TRUE on grepl below
if ( sum(grepl("^[[:alnum:]]*$", x[[i]])) != (length(x[[i]]) - n_nas) ){
stop("Only alphanumeric characters are allowed")
}
#Remove alphanumeric characters and convert remainder to numeric
x_num[[i]] <- as.numeric(gsub("[[:alpha:]]", "", x[[i]]))
}
ord <- do.call(order, c(x_num, na.last = na.last))
} else {
n_nas <- sum(is.na(x)) # NOTE: NAs do not give TRUE on grepl below
if ( sum(grepl("^[[:alnum:]]*$", x)) != (length(x) - n_nas) ){
stop("Only alphanumeric characters are allowed")
}
#Remove alphanumeric characters and convert remainder to numeric
x_num <- as.numeric(gsub("[[:alpha:]]", "", x))
ord <- do.call(order, c(x_num, na.last = na.last))
}
return(ord)
}
orderAccessions(1:10)
orderAccessions <- function(x, na.last = TRUE){
# Steps:
# - warning if not just alphanumeric
# - remove alpha
# - sort by numeric
if (is.list(x)){
x_num <- list()
for (i in seq_along(x)){
n_nas <- sum(is.na(x[[i]])) # NOTE: NAs do not give TRUE on grepl below
if ( sum(grepl("^[[:alnum:]]*$", x[[i]])) != (length(x[[i]]) - n_nas) ){
stop("Only alphanumeric characters are allowed")
}
#Remove alphanumeric characters and convert remainder to numeric
x_num[[i]] <- as.numeric(gsub("[[:alpha:]]", "", x[[i]]))
}
ord <- do.call(order, c(x_num, na.last = na.last))
} else {
n_nas <- sum(is.na(x)) # NOTE: NAs do not give TRUE on grepl below
if ( sum(grepl("^[[:alnum:]]*$", x)) != (length(x) - n_nas) ){
stop("Only alphanumeric characters are allowed")
}
#Remove alphanumeric characters and convert remainder to numeric
x_num <- as.numeric(gsub("[[:alpha:]]", "", x))
ord <- do.call(order, list(x_num, na.last = na.last))
}
return(ord)
}
orderAccessions(1:10)
b1 <- c(rep("c1", 3), rep("b2", 3), rep("a3", 3))
b2 <- c(11:13, 21:23, 31:33)
b <- list(b1, b2)
checkOrder(b, "orderAccessions")
c1 <- c(rep("c1", 3), rep("b2", 3), rep("a3", 3))
c2 <- c(31:33, 11:13, 21:23)
c1 <- c(c1, NA, NA)
c2 <- c(c2, NA, NA)
c <- list(c1, c2)
checkOrder(c, "orderAccessions")
d <- c("SRP1", "DRP02", "SRP20", "ERP000500")
checkOrder(d, "orderAccessions")
d
class(d)
is.list(d)
d <- c("SRP1", "DRP02", "SRP20", "ERP000500")
checkOrder(d, "orderAccessions")
checkOrder(d, "orderAccessions")
#=============================================================
# Functions for testing an ordering function
#=============================================================
shuffleList <- function(x){
# Function for shuffling 2nd levels of lists (designed to work on a list of vectors)
# Args:
# x - list to be shuffled
# Returns:
# shuffled x (relationships between levels are preserved)
if (is.list(x)){
subs <- length(x)
ind <- sample(1:length(x[[1]]), length(x[[1]]))
for (s in 1:subs){
if (length(ind)!=length(x[[s]])){
stop("Sublists must have the same length")
}
x[[s]] <- x[[s]][ind]
}
} else {
x <- x[sample(1:length(x), length(x))]
}
return(x)
}
checkOrder(d, "orderAccessions")
#=============================================================
checkOrder <- function(x, order_function){
# A function which shuffles lists and uses an ordering function to order the list
# Args:
# x - list (should be in desired order!)
# order_function - name of the ordering function to be used
# Returns:
# logical (whether ordering led to identical list as provided on input)
# ALSO: prints results etc.
#
print("Original list:")
print(x)
x_original <- x # Make a copy
x <- shuffleList(x)
print("Shuffled list:")
print(x)
x_shuffled <- x # Store shuffled x
if (is.list(x_shuffled)){
ord <- do.call(order_function, list(x_shuffled)) # NOTE: must pass the list wrapped as a list
} else {
ord <- do.call(order_function, list(list(x_shuffled))) # NOTE: must pass the list wrapped as a list
}
print(ord)
for (i in seq_along(x)){
x[[i]] <- x[[i]][ord]
}
print("List after ordering:")
print(x)
outcome <- identical(x_original, x)
if (outcome){
print("Ordering was successful!")
}
return(outcome)
}
checkOrder(d, "orderAccessions")
checkOrder <- function(x, order_function){
# A function which shuffles lists and uses an ordering function to order the list
# Args:
# x - list (should be in desired order!)
# order_function - name of the ordering function to be used
# Returns:
# logical (whether ordering led to identical list as provided on input)
# ALSO: prints results etc.
#
print("Original list:")
print(x)
x_original <- x # Make a copy
x <- shuffleList(x)
print("Shuffled list:")
print(x)
x_shuffled <- x # Store shuffled x
if (is.list(x_shuffled)){
ord <- do.call(order_function, list(x_shuffled)) # NOTE: must pass the list wrapped as a list
print(ord)
for (i in seq_along(x)){
x[[i]] <- x[[i]][ord]
}
} else {
ord <- do.call(order_function, list(list(x_shuffled))) # NOTE: must pass the list wrapped as a list
print(ord)
x <- x[ord]
}
print("List after ordering:")
print(x)
outcome <- identical(x_original, x)
if (outcome){
print("Ordering was successful!")
}
return(outcome)
}
#=============================================================
checkOrder(d, "orderAccessions")
d <- c("SRP1", "DRP02", "SRP20", "ERP000500", NA)
checkOrder(d, "orderAccessions")
d1 <- c(rep("SRP1", 3), rep("DRP02", 3), rep("ERP000500", 3), rep(NA, 3))
d2 <- c("e111", "d112", "c113", "788", "789", "790", "c1", "b2", "a3", "11", "12", "13")
d <- list (d1, d2)
checkOrder(d, "orderAccessions")
View(t2)
t2[orderAccessions(list(t2$run_accession, t2$experiment_accession))]
t2[orderAccessions(list(t2$run_accession, t2$experiment_accession)),]
t2[orderAccessions(list(t2$study_accession, t2$sample_accession, t2$experiment_accession, t2$run_accession)),]
t2[orderAccessions(list(t2$study_accession, t2$sample_accession, t2$run_accession)),]
?mass
?MASS
devtools::document()
checkOrder(a, "orderAccessions") # Does not seem to work atm
checkOrder(list(1:10), "orderAccessions") # This works
checkOrder(a, "order") # A demo for order() function
devtools::document()
?orderAccessions
devtools::document()
?orderAccessions
devtools::document()
?orderAccessions
devtools::document()
?orderAccessions
orderAccessions <- function(x, na.last = TRUE){
# Steps (separate tracks for lists and vectors):
# - warning if not just alphanumeric (correct for NAs)
# - remove alpha
# - sort by numeric
if (is.list(x)){
x_num <- list()
for (i in seq_along(x)){
n_nas <- sum(is.na(x[[i]])) # NOTE: NAs do not give TRUE on grepl below
if ( sum(grepl("^[[:alnum:]]*$", x[[i]])) != (length(x[[i]]) - n_nas) ){
stop("Only alphanumeric characters are allowed")
}
#Remove alphanumeric characters and convert remainder to numeric
x_num[[i]] <- as.numeric(gsub("[[:alpha:]]", "", x[[i]]))
}
ord <- do.call(order, c(x_num, na.last = na.last))
} else {
n_nas <- sum(is.na(x)) # NOTE: NAs do not give TRUE on grepl below
if ( sum(grepl("^[[:alnum:]]*$", x)) != (length(x) - n_nas) ){
stop("Only alphanumeric characters are allowed")
}
#Remove alphanumeric characters and convert remainder to numeric
x_num <- as.numeric(gsub("[[:alpha:]]", "", x))
ord <- do.call(order, list(x_num, na.last = na.last))
}
return(ord)
}
devtools::load_all()
devtools::document()
devtools::load_all()
?convertAccession
convertAccession(c("SRP010068", "SRP020088"))
e1<-convertAccession(c("SRP010068", "SRP020088"))
View(e1)
devtools::load_all()
e1b<-convertAccession(c("SRP010068", "SRP020088"))
View(e2)
View(e1b)
browseVignettes(package="dplyr")
devtools::use_vignette("Intro_To_SpideR")
searchForTerm(library_strategy = "ChIP-Seq", antibody = c("p53", "tp53"), species = c("9606", "10090"))
devtools::build()
DBI::dbDisconnect(sra_con)
DBI::dbDisconnect(geo_con)
startSpideR
startSpideR()
startSpideR(getwd())
devtools::build()
.libPaths()
devtools::document(0)
devtools::document()
?startSpideR
devtools::document()
?startSpideR
devtools::document()
?startSpideR
devtools::document()
?orderAccessions
devtools::document()
?startSpideARZ
?startSpideR
?startSpideR
devtools::document()
devtools::document()
?startSpideR
devtools::document()
?startSpideR
devtools::document()
?startSpideR
devtools::document()
devtools::document()
?startSpideR
package?SpideR
devtools::install()
devtools::install()
package?SpideR
devtools::document()
?startSpideR
devtools::document()
?startSpideR
devtools::document()
?startSpideR
devtools::document()
?startSpideR
devtools::document()
?startSpideR
devtools::document()
?startSpideR
startSpideR(getwd())
package?SpideR
devtools::install()
package?SpideR
?startSpideR
devtools::document()
?startSpideR
remove.packages(SpideR)
remove.packages(package:SpideR)
remove.packages("package:SpideR")
library(SpideR)
?startSpideR
package?SpideR
remove.packages("package:SpideR")
search()
detach("package:SpideR")
search()
remove.packages("SpideR")
devtools::install()
package?SpideR
?startSpideR
library(SpideR)
package?SpideR
?convertAccession
devtools::document()
?convertAccession
startSpideR(dir = getwd(), general_expiry = 0)
devtools::document()
st <- list(library_strategy="ChIP-Seq", gene="STAT1", antibody="STAT1", secondary_library_strategy = "RNA-Seq")
do.call(searchForTerm, st)
df1 <- data.frame(a =1:3, b = c("sth", "nth", "eth"))
write.table(df1, "sth.csv", sep = ",", row.names = FALSE, quote = TRUE)
write.table(df1, "sth.csv", sep = ",", row.names = FALSE, quote = FALSE)
write.table(df1, "sth.csv", sep = ";", row.names = FALSE, quote = TRUE)
df1 <- data.frame(a =1:3, b = c("sth", "nt;h", "et,h"))
write.table(df1, "sth.csv", sep = ";", row.names = FALSE, quote = TRUE)
devtools::document()
?searchForTerm
write.table(df1, "sth.csv", sep = ",", row.names = FALSE, quote = FALSE)
do.call(searchForTerm, st)
devtools::document()
?searchForTerm
t1 <- dbGetQuery(sra_con, "SELECT library_strategy, count(*) FROM sra GROUP BY library_strategy")
t1 <- DBI::dbGetQuery(sra_con, "SELECT library_strategy, count(*) FROM sra GROUP BY library_strategy")
View(t1)
View(t1)
t2 <- DBI::dbGetQuery(sra_con, "SELECT * FROM sra WHERE library_strategy = 'NA' LIMIT 100")
View(t2)
t2 <- DBI::dbGetQuery(sra_con, "SELECT * FROM sra WHERE library_strategy IS NULL LIMIT 100")
t1 <- t1[order(t1$`count(*)`, decreasing = TRUE),]
View(t1)
devtools::load_all()
startSpideR()
startSpideR(getwd(0))
startSpideR(getwd())
getDatabaseInformation()
devtools::load_all()
getDatabaseInformation()
getDatabaseInformation()
devtools::document()
?search
devtools::document()
?getDatabaseInformation
DBI::dbListFields(geo_con, "gsm")
devtools::load_all()
getDatabaseInformation()
getDatabaseInformation()
t3 <- getDatabaseInformation()
View(t3)
View(t1)
searchForTerm(library_strategy = "s")
geo_sample <- DBI::dbGetQuery(geo_con, "SELECT * FROM gsm GROUP BY RANDOM() LIMIT 200")
View(geo_sample)
write.table(geo_sample, "geo_sample.csv", sep = ";", quote = TRUE)
devtools::load_all()
getDatabaseInformation()
geo_source_name_ch1 <- .Last.value
View(geo_source_name_ch1)
geo_label_ch1 <- getDatabaseInformation()
View(geo_label_ch1)
write.table(geo_sample, "geo_sample.csv", sep = ";", quote = TRUE, row.names = FALSE)
devtools::load_all()
devtools::load_all()
geo_molecule_ch1 <- getDatabaseInformation()
View(geo_molecule_ch1)
t1$library_strategy
write.table(t1$library_strategy, "lib_strat.csv")
write.table(t1$library_strategy, "lib_strat.csv", quote = FALSE, row.names = FALSE)
devtools::load_all()
devtools::load_all()
searchForTerm(library_strategy = "nth")
devtools::document()
?searchForTerm
?message
devtools::document()
?searchForTerm
devtools::document()
?searchForTerm
?searchForTerm
cwt <- function(object, filename){
# Custom write table (a wrapper to unify the parameters)
utils::write.table(x = object,
file = filename,
sep = ";",
row.names = FALSE,
quote = TRUE
)
}
library(DependenciesGraph)
library(DependenciesGraphs)
devtools::load_all()
dep <- funDependencies("package:SpideR", "outputGenerator")
plot(dep)
dep <- funDependencies("package:SpideR", "outputGenerator_acc")
plot(dep)
140*50+100*50
devtools::load_all()
convertAccession("SRR6847217")
convertAccession("SRP135862")
convertAccession(c("ERP016268", "SRP141093"))
convertAccession(c("SRP141093"))
convertAccession("ERP019512")
convertAccession("SRP133655")
convertAccession("GSE113361")
pub1 <- DBI::dbGetQuery(geo_con, "SELECT * FROM gse WHERE pubmed_id = '10952317'")
View(pub1)
View(df1)
rm(df1)
rm(pub1)
rm(temp_geo_df)
rm(temp_sra_df)
rm(temp_sra_srr_gsm_df)
rm(temp_sra_srr_gsm_geo_df)
rm(temp_srr_gsm_df)
View(st)
rm(st)
View(t1)
View(t2)
View(t3)
rm(t2)
View(geo_label_ch1)
devtools::load_all()
cwt(geo_label_ch1, "geo_label_ch1")
cwt(geo_label_ch1, "geo_label_ch1.csv")
cwt(geo_molecule_ch1, "geo_molecule_ch1.csv")
cwt(geo_sample, "geo_sample.csv")
cwt(geo_source_name, "geo_source_name.csv")
cwt(geo_source_name_ch1, "geo_source_name_ch1.csv")
cwt(t3, "sra_taxon_id.csv")
View(t1)
row.names(t1) <- NULL
View(t1)
cwt(t1, "sra_library_strategy.csv")
remove.packages("SpideR")
devtools::install_github("ecballium/SpideR_Packaging201709", subdir = "SpideR")
devtools::install_github("ss-lab-cancerunit/SpideR_Packaging201709", subdir = "SpideR")
setwd()
setwd("/Projects/")
devtools::install("SpideR")
setwd("SpideR_Packaging201709/")
devtools::install()
setwd("SpideR")
devtools::install()
devtools::install()
?searchForTerm
library(SpideR)
?searchForTerm
?startSpideR
?convertAccession
?searchForAccession
package?SpideR
getDatabaseInformation()
devtools::document()
package?SpideR
devtools::install()
library(SpideR)
package?SpideR
detach("package:SpideR")
remove.packages(SpideR)
remove.packages("SpideR")
devtools::install()
package?SpideR
search(0)
search()
devtools::load_all()
devtools::use_vignette("Quick_SpideR")
search()
?getDatabaseInformation
getDatabaseInformation()
devtools::build_vignettes()
devtools::use_vignette("SpideR_Guide")
package?SpideR
devtools::load_all()
package?SpideR
search()
devtools::document()
package?SpideR
?searchForTerm
combinations(3, 2, v=c("Yes", "No", "Maybe"))
v=rep(c("Yes", "No", "Maybe"),2)
v
v2 <- rbind(v[1:3], v[4:6])
v2
t(v2)
v2 <- t(v2)
cat(v2[1,])
cat(v2[,])
?mapply
lapply(v2, cat)
sapply(v2, cat)
vapply(v2, cat)
paste(v2, sep = ",")
v2
library(dplyr)
?knitr::opts_chunk
.libPaths()
devtools::load_all()
devtools::load_all()
?searchForTerm
?startSpideR
devtools::load_all()
?startSpideR
