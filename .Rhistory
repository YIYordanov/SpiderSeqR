if (is.null(b)){
b <- NULL
}
if (is.null(c)){
c <- NULL
}
list(sys = sys.call(), match = match.call(def = sys.function(-1), call = sys.call(-1)))
}
testfsh <- function(x= NULL, y=NULL, z = NULL){
return(testf2())
}
testfsh(1)
test_outer <- function(x= NULL, y=NULL, z = NULL){
return(test_info())
}
test_info <- function(){
match.call(def = sys.function(-1), call = sys.call(-1))
}
test_outer(1,2,3)
test_outer <- function(x= NULL, y=NULL, z = NULL){
return(test_info())
}
test_info <- function(){
match.call(def = sys.function(-1), call = sys.call(-1))[-1]
}
test_outer(1,2,3)
str(test_outer(1,2,3))
as.character(test_outer(1,2,3))
as.character(names(test_outer(1,2,3)))
test_outer <- function(x= NULL, y=NULL, z = NULL){
return(test_info())
}
test_info <- function(){
match.call(def = sys.function(-1), call = sys.call(-1)) #Entire call
match.call(def = sys.function(-1), call = sys.call(-1))[-1] #Arguments only
}
test_outer(1,2,3)
test_outer <- function(x= NULL, y=NULL, z = NULL){
return(test_info())
}
test_info <- function(){
match.call(def = sys.function(-1), call = sys.call(-1)) #Entire call
#match.call(def = sys.function(-1), call = sys.call(-1))[-1] #Arguments only
}
test_outer(1,2,3)
eval(test_outer(1,2,3))
recordGenerator <- function(st, file){
file.create(file)
y <- st
for (s in seq_along(y)){
#Order elements within each category (if multiple exist)
if (length(y[[s]])>1){
y[[s]] <- y[[s]][order(y[[s]])]
}
#Save names of list elements
st_out <- names(y)[[s]]
#Preserve 'NULL'
if (is.null(y[[s]])){
#y[[s]] <- "NULL"
y[[s]] <- ""
}
#Append values to the names and collapse
st_out <- append(st_out, y[[s]])
st_out <- paste(st_out, collapse = "\t")
#print(st_out)
cat(st_out, file = file, sep = "\n", append = TRUE)
}
saveCallRDS("what.Rda")
}
recordGenerator(ist, "nth.tab")
parameterRecordGenerator <- function(st, file){
file.create(file)
y <- st
for (s in seq_along(y)){
#Order elements within each category (if multiple exist)
if (length(y[[s]])>1){
y[[s]] <- y[[s]][order(y[[s]])]
}
#Save names of list elements
st_out <- names(y)[[s]]
#Preserve 'NULL'
if (is.null(y[[s]])){
#y[[s]] <- "NULL"
y[[s]] <- ""
}
#Append values to the names and collapse
st_out <- append(st_out, y[[s]])
st_out <- paste(st_out, collapse = "\t")
#print(st_out)
cat(st_out, file = file, sep = "\n", append = TRUE)
}
}
parameterRecordGenerator <- function(st, file){
file.create(file)
y <- st
for (s in seq_along(y)){
#Order elements within each category (if multiple exist)
if (length(y[[s]])>1){
y[[s]] <- y[[s]][order(y[[s]])]
}
#Save names of list elements
st_out <- names(y)[[s]]
#Preserve 'NULL'
if (is.null(y[[s]])){
#y[[s]] <- "NULL"
y[[s]] <- ""
}
#Append values to the names and collapse
st_out <- append(st_out, y[[s]])
st_out <- paste(st_out, collapse = "\t")
#print(st_out)
cat(st_out, file = file, sep = "\n", append = TRUE)
}
}
callRecordGenerator <- function(file){
c <- match.call(def = sys.function(-1), call = sys.call(-1))
saveRDS(c, file = file)
}
devtools::load_all()
searchForTerm(library_strategy = "RNA-Seq", gene=c("TGF-β", "Tgfb1", "tgfb"), species = "9606")
readRDS("RNA_TGF-β_9606_2_CALL_171025_221444.Rda")
readRDS("ChIP_SMAD2_9606_2RNA_all_db_171025.csv")
str(readRDS("ChIP_SMAD2_9606_2RNA_all_db_171025.csv"))
str(readRDS("RNA_TGF-β_9606_2_CALL_171025_221444.Rda"))
str(readRDS("RNA_TGF-β_9606_2_CALL_171025_221444.Rda"))=="language"
class(readRDS("RNA_TGF-β_9606_2_CALL_171025_221444.Rda"))=="language"
class(readRDS("RNA_TGF-β_9606_2_CALL_171025_221444.Rda"))
class(readRDS("RNA_TGF-β_9606_2_CALL_171025_221444.Rda"))=="call"
devtools::load_all()
x
getAnywhere(test_output)
getAnywhere(test_outer)
test_info
searchForTerm(library_strategy = "RNA-Seq", gene=c("dpd1"), species = "9606")
searchForTerm(library_strategy = "RNA-Seq", gene=c("tgfb", "tgfb1", "TGFbeta1", "transforming.growth.factor", "TGF-β"), species = "9606")
searchForTerm(library_strategy = "RNA-Seq", gene=c("ced"), species = "9606")
grep("a.b", "ab")
grep("a.b", "acb")
grep("a.?b", "acb")
grep("a.?b", "ab")
searchForTerm(library_strategy = "RNA-Seq", gene=c("wnt1", "wnt.1", "int1"), species = "9606")
searchForTerm(library_strategy = "RNA-Seq", gene=c("wnt1"), species = "9606")
searchForTerm(library_strategy = "RNA-Seq", gene=c("wnt1", "wnt.1", "int1"), species = "9606")
searchForTerm(library_strategy = "RNA-Seq", gene=c("wnt1", "wnt.1"), species = "9606")
searchForTerm(library_strategy = "RNA-Seq", gene=c("wnt1", "wnt.1", "int1"), species = "9606")
searchForTerm(library_strategy = "RNA-Seq", gene=c("notch1", "notch 1", "notch_1", "notch.1", "tan1", "hN1", "tan 1", "tan_1", "tan.1"), species = "9606")
searchForTerm(library_strategy = "RNA-Seq", gene=c("wnt1", "wnt.1", "wnt_1", "int1", "int.1", "int_1"), species = "9606")
searchForTerm(library_strategy = "ChIP-Seq", gene=c("smad2", "hmad2", "smad-2", "hmad-2", "jv18", "jv18-1", "madh2", "madr2"), species = "9606, secondary_library_strategy = "RNA-Seq")
searchForTerm(library_strategy = "ChIP-Seq", gene=c("smad2", "hmad2", "smad-2", "hmad-2", "jv18", "jv18-1", "madh2", "madr2"), species = "9606", secondary_library_strategy = "RNA-Seq")
searchForTerm(library_strategy = "ChIP-Seq", gene=c("smad2", "hmad2", "smad-2", "hmad-2", "jv18", "jv18-1", "madh2", "madr2"), secondary_library_strategy = "RNA-Seq")
readRDS("ChIP_smad2_2RNA_CALL_171025_231900.Rda")
searchForTerm(library_strategy = "ChIP-Seq", gene=c("smad3", "smad-3", "hmad3", "hmad-3", "jv15", "jv15-2", "madh3", "madh-3", "mad3"), species = "9606",secondary_library_strategy = "RNA-Seq")
ist
devtools::load_all()
parameterRecordGenerator(ist, "test.tab")
?scan()
?readLines
t <- readLines("test.tab")
t
?strsplit
rec <- readLines("test.tab")
r <- 1
rec[[r]] <- strsplit(rec[[r]], split = "\t")
rec
rec <- readLines("test.tab")
r <- 1
rec[[r]] <- unlist(strsplit(rec[[r]], split = "\t"))
strsplit(rec[1])
strsplit(rec[1], "\t")
strsplit(rec[[1]], "\t")
rm(red)
rm(rec)
rm(rec)
rm(r)
x <- readLines("test.tab")
r <- 1
rec[[r]] <- unlist(strsplit(x[[r]], split = "\t"))
x <- readLines("test.tab")
rec <- list()
r <- 1
rec[[r]] <- unlist(strsplit(x[[r]], split = "\t"))
rec
x <- readLines("test.tab")
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
rec <- list()
r <- 1
rec[[r]] <- unlist(strsplit(x[[r]], split = "\t"))
names(rec[[r]]) <- st_template[r]
#Separate by \t
#Check if the first element agrees with the template (if not, stop)
#Save subsequent elements as values. If length zero, add NULL
rec
x <- readLines("test.tab")
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
rec <- list()
r <- 1
rec[[r]] <- unlist(strsplit(x[[r]], split = "\t"))
names(rec[[r]]) <- st_template[[r]]
#Separate by \t
rec
x <- readLines("test.tab")
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
rec <- list()
r <- 1
rec[[r]] <- unlist(strsplit(x[[r]], split = "\t"))
names(rec[r]) <- st_template[[r]]
#Separate by \t
#Check if the first element agrees with the template (if not, stop)
#Save subsequent elements as values. If length zero, add NULL
rec
ist[1]
ist[[1]]
str(ist)
x <- readLines("test.tab")
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
rec <- list()
names(rec) <- st_template
r <- 1
rec[[r]] <- unlist(strsplit(x[[r]], split = "\t"))
#names(rec[r]) <- st_template[[r]]
rec
rep(list(1),5)
rep(list(1),NULL)
rep(list(1),NA)
rep(list(NULL),5)
length(st_template)
x <- readLines("test.tab")
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
if (length(st_template)!=length(x)){
stop("The number of lines in the input file needs to correspond to the number of input variables")
}
#rec <- list()
rec <- rep(list(NULL), length(st_template))
names(rec) <- st_template
r <- 1
rec[[r]] <- unlist(strsplit(x[[r]], split = "\t"))
rec
x <- readLines("test.tab")
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
if (length(st_template)!=length(x)){
stop("The number of lines in the input file needs to correspond to the number of input variables")
}
#rec <- list()
rec <- rep(list(NULL), length(st_template))
names(rec) <- st_template
r <- 1
rec[[r]] <- unlist(strsplit(x[[r]], split = "\t"))[-1]
#names(rec[r]) <- st_template[[r]]
rec
x <- readLines("test.tab")
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
if (length(st_template)!=length(x)){
stop("The number of lines in the input file needs to correspond to the number of input variables")
}
#rec <- list()
rec <- rep(list(NULL), length(st_template))
names(rec) <- st_template
r <- 1
if (st_template[r]!=unlist(strsplit(x[[r]], split = "\t"))[1]){
stop("The names need to match between the input and the template")
}
rec[[r]] <- unlist(strsplit(x[[r]], split = "\t"))[-1] #Omit the first element (name)
rec
x <- readLines("test.tab")
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
if (length(st_template)!=length(x)){
stop("The number of lines in the input file needs to correspond to the number of input variables")
}
#rec <- list()
rec <- rep(list(NULL), length(st_template))
names(rec) <- st_template
r <- 1
temp <- unlist(strsplit(x[[r]], split = "\t"))
if (st_template[r]!=temp[1]){
stop("The names need to match between the input and the template")
}
if (length(temp)>1){
rec[[r]] <- temp[-1] #Omit the first element (name)
}
rec
x <- readLines("test.tab")
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
if (length(st_template)!=length(x)){
stop("The number of lines in the input file needs to correspond to the number of input variables")
}
#rec <- list()
rec <- rep(list(NULL), length(st_template))
names(rec) <- st_template
for (r in seq_along(st_template)){
temp <- unlist(strsplit(x[[r]], split = "\t"))
if (st_template[r]!=temp[1]){
stop("The names need to match between the input and the template")
}
if (length(temp)>1){
rec[[r]] <- temp[-1] #Omit the first element (name)
}
}
rec
identical(ist, rec)
ist
rec[1]==ist[1]
rec[[1]]==ist[[1]]
rec[[2]]==ist[[2]]
for (s in seq_along(ist)){ist[[s]]<-ist[[s]][order(ist[[s]])]}
for (s in seq_along(ist)){ist2[[s]]<-ist[[s]][order(ist[[s]])]}
ist2 <- list()
for (s in seq_along(ist)){ist2[[s]]<-ist[[s]][order(ist[[s]])]}
ist2 <- ist
ist2[[5]]
ist2[[2]]
ist2[[2]]<- ist2[[2]][order(ist2[[2]])]
ist2
identical(ist, rec)
identical(ist2, rec)
ist
append("name", ist)
devtools::load_all()
searchForTerm("ChIP-Seq", antibody = "stat3")
x <- readLines("ChIP_stat3_2_PAR_171026_134118.tab")
#x <- readLines("test.tab")
if (x[[1]]=="searchForTerm"){
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
if ((length(st_template)+1)!=length(x)){
stop("The number of lines in the input file needs to correspond to the number of input variables")
}
#rec <- list()
rec <- rep(list("NULL"), length(st_template))
names(rec) <- st_template
for (r in seq_along(st_template)){
temp <- unlist(strsplit(x[[r]], split = "\t"))
if (st_template[r]!=temp[1]){
stop("The names need to match between the input and the template")
}
if (length(temp)>1){
rec[[r]] <- temp[-1] #Omit the first element (name)
}
}
}
x <- readLines("ChIP_stat3_2_PAR_171026_134118.tab")
#x <- readLines("test.tab")
if (x[[1]]=="searchForTerm"){
x <- x[-1]
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
if ((length(st_template)+1)!=length(x)){
stop("The number of lines in the input file needs to correspond to the number of input variables")
}
#rec <- list()
rec <- rep(list("NULL"), length(st_template))
names(rec) <- st_template
for (r in seq_along(st_template)){
temp <- unlist(strsplit(x[[r]], split = "\t"))
if (st_template[r]!=temp[1]){
stop("The names need to match between the input and the template")
}
if (length(temp)>1){
rec[[r]] <- temp[-1] #Omit the first element (name)
}
}
}
x <- readLines("ChIP_stat3_2_PAR_171026_134118.tab")
#x <- readLines("test.tab")
if (x[[1]]=="searchForTerm"){
x <- x[-1]
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
if ((length(st_template))!=length(x)){
stop("The number of lines in the input file needs to correspond to the number of input variables")
}
#rec <- list()
rec <- rep(list("NULL"), length(st_template))
names(rec) <- st_template
for (r in seq_along(st_template)){
temp <- unlist(strsplit(x[[r]], split = "\t"))
if (st_template[r]!=temp[1]){
stop("The names need to match between the input and the template")
}
if (length(temp)>1){
rec[[r]] <- temp[-1] #Omit the first element (name)
}
}
}
rec
x <- readLines("ChIP_stat3_2_PAR_171026_134118.tab")
#x <- readLines("test.tab")
if (x[[1]]=="searchForTerm"){
x <- x[-1]
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
if ((length(st_template))!=length(x)){
stop("The number of lines in the input file needs to correspond to the number of input variables")
}
#rec <- list()
rec <- rep(list(NULL), length(st_template))
names(rec) <- st_template
for (r in seq_along(st_template)){
temp <- unlist(strsplit(x[[r]], split = "\t"))
if (st_template[r]!=temp[1]){
stop("The names need to match between the input and the template")
}
if (length(temp)>1){
rec[[r]] <- temp[-1] #Omit the first element (name)
}
}
}
rec
searchForTerm(library_strategy = "ChIP-Seq", gene = NULL, antibody = "stat3", cell_type = NULL, treatment = NULL, species = NULL, platform = NULL, secondary_library_strategy = NULL)
identical(readRDS("ChIP_stat3_2_all_db_171026_134326.Rda"), readRDS)
identical(readRDS("ChIP_stat3_2_all_db_171026_134326.Rda"), readRDS("ChIP_stat3_2_all_db_171026_135118.Rda"))
devtools::load_all()
devtools::load_all()
devtools::load_all()
file.info("GEOmetadb.sqlite")
file.info("GEOmetadb.sqlite")$mtime
file.info("GEOmetadb.sqlite")$ctime
R.Version()
devtools::load_all()
tryCatch
?tryCatch
getwd()
setwd("/home/sslab11/Documents/Anna/SpideR_Packaging201709")
getwd()
library(SRAdb)
srafile <<- getSRAdbFile()
