alpha <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
t1 <- paste0(sample(alpha), t1)
devtools::test()
t1_s <- sample(t1)
t1_s
t1
t1_s[digitSort(t1_s)]
devtools::test()
nu <- as.character(1:9)
alpha <- c("a", "b", "c", "d", "e", "f", "g", "h", "i")
t1 <- paste0(sample(alpha), t1)
t1
rm(t1)
devtools::test()
devtools::test()
devtools::test()
?sort
sort(t1)
nu <- as.character(1:9)
alpha <- c("a", "b", "c", "d", "e", "f", "g", "h", "i")
t1 <- paste0(sample(alpha), nu)
t1
sort(t1)
digitSort(t1)
digitSort(sample(t1))
?sample
View(roadmap)
View(roadmap)
source('~/.active-rstudio-document')
numeric("01")
as.numeric("01")
as.numeric("001")
getAnywhere(naConverter())
order(c("s 1", "s1", "s_1"))
?rank
rank(c(1,3,5))
rank(c(1,3,5,2))
rank(c("a", "C"))
rank(c("a", "C", "b"))
rank(c("a", "C", "b", "-"))
rank(c("a1", "1C", "b", "-"))
sort(c("a1", "1C", "b", "-"))
order(c("a1", "1C", "b", "-"))
gsub("[A-Z]", "", "A8")
gsub("[A-Z]", "", "A8A")
gsub("[A-Z]", "", "A8AA")
gsub("[A-Z]", "", "W2A8AA")
order(c(1,8,2))
sort(c(1,8,2))
gsub("[A-Z]", "", "W2A8AA.")
gsub("[A-Z]", "", c("W2A8AA.", "v2"))
gsub("[A-Z]", "", c("W2A8AA.", "v29"))
gsub("[A-Z]", "", c("W2A8AA.", "jj29"))
gsub("[A-Z]", "", c("W2A8AA.", "A29"))
grepl("[A-Z1-9]", c("W2A8AA.", "A29"))
grepl("[:alnum:]", c("W2A8AA.", "A29"))
grepl("[:alnum:.]", c("W2A8AA.", "A29"))
grepl("[:alnum:]", c("W2A8AA.", "A29"))
grepl("[A-Z]", c("W2A8AA.", "A29"))
x <- c(1,2, NA)
x
if (sum(is.na(x))>0){
x_na <- x[is.na(x)]
x <- x[!is.na(x)]
}
x
x_na
?which
x <- c(1,2, NA)
if (sum(is.na(x))>0){
x_na <- which(is.na(x))
x_val <- x[!is.na(x)]
}
x_val
x_na
x <- c(1,NA,3, NA, 2, 4)
if (sum(is.na(x))>0){
x_na <- which(is.na(x))
x_val <- x[!is.na(x)]
}
x_val
grepl("[A-Z]", NA)
grepl("[A-Z]", "NA")
grepl("^[A-Z]$", c("W2A8AA.", "A29"))
grepl("^[A-Z][0-9]$", c("W2A8AA.", "A29"))
grepl("^[A-Z]|[0-9]$", c("W2A8AA.", "A29"))
grepl("^[:alnum:]$", c("W2A8AA.", "A29"))
grepl("[:alnum:]", "A4")
grepl("^[:alnum:]$", c("W2A8AA.", "A29"), perl = TRUE)
grepl("[:alnum:]$", c("W2A8AA.", "A29"), perl = TRUE)
grepl("[:alnum:]", c("W2A8AA.", "A29"), perl = TRUE)
grepl("[A-Z]", c("W2A8AA.", "A29"), perl = TRUE)
grepl("[A-Z0-9]", c("W2A8AA.", "A29"), perl = TRUE)
grepl("[A-Z0-9]", c("W2A8AA.", "A"), perl = TRUE)
grepl("[A-Z0-9]", c("W2A8AA.", "."), perl = TRUE)
grepl("[[:alnum:]]$", c("W2A8AA.", "A29"), perl = TRUE)
grepl("[[:alnum:]]", c("W2A8AA.", "A29"), perl = TRUE)
grepl("^[[:alnum:]]$", c("W2A8AA.", "A29"), perl = TRUE)
grepl("^[[:alnum:]]?$", c("W2A8AA.", "A29"), perl = TRUE)
grepl("^[[:alnum:]]*$", c("W2A8AA.", "A29"), perl = TRUE)
grepl("^[[:alnum:]]*$", c("W2A8AA.", ".A29"), perl = TRUE)
orderAccessions <- function(x, na.last = TRUE){
#Remove NAs and save their indices
if (sum(is.na(x))>0){
x_i_na <- which(is.na(x))
x_val <- x[!is.na(x)]
}
#Stop if the values do not conform to alphanumeric requirement
#Might relieve this requirement in the future
if (sum(grepl("^[[:alnum:]]*$", x_val))!=x_val){
stop("Only alphanumeric characters are allowed")
}
x_num <- gsub("[[:alpha:]]", "", x_val)
x_i_num <- order(as.numeric(x_num))
if (na.last == TRUE){
x_i <- c(x_i_num, x_i_na)
}
if (na.last = FALSE){
x_i <- c(x_i_na, x_i_num)
}
return(x_i)
}
orderAccessions <- function(x, na.last = TRUE){
#Remove NAs and save their indices
if (sum(is.na(x))>0){
x_i_na <- which(is.na(x))
x_val <- x[!is.na(x)]
}
#Stop if the values do not conform to alphanumeric requirement
#Might relieve this requirement in the future
if (sum(grepl("^[[:alnum:]]*$", x_val))!=x_val){
stop("Only alphanumeric characters are allowed")
}
x_num <- gsub("[[:alpha:]]", "", x_val)
x_i_num <- order(as.numeric(x_num))
if (na.last == TRUE){
x_i <- c(x_i_num, x_i_na)
}
if (na.last = FALSE){
x_i <- c(x_i_na, x_i_num)
}
return(x_i)
}
orderAccessions <- function(x, na.last = TRUE){
#Remove NAs and save their indices
if (sum(is.na(x))>0){
x_i_na <- which(is.na(x))
x_val <- x[!is.na(x)]
}
#Stop if the values do not conform to alphanumeric requirement
#Might relieve this requirement in the future
if (sum(grepl("^[[:alnum:]]*$", x_val))!=x_val){
stop("Only alphanumeric characters are allowed")
}
x_num <- gsub("[[:alpha:]]", "", x_val)
x_i_num <- order(as.numeric(x_num))
if (na.last == TRUE){
x_i <- c(x_i_num, x_i_na)
}
if (na.last == FALSE){
x_i <- c(x_i_na, x_i_num)
}
return(x_i)
}
orderAccessions(c("4", NA, "2"))
orderAccessions <- function(x, na.last = TRUE){
#Remove NAs and save their indices
if (sum(is.na(x))>0){
x_i_na <- which(is.na(x))
x_val <- x[!is.na(x)]
}
#Stop if the values do not conform to alphanumeric requirement
#Might relieve this requirement in the future
if ( sum(grepl("^[[:alnum:]]*$", x_val)) != length(x_val) ){
stop("Only alphanumeric characters are allowed")
}
x_num <- gsub("[[:alpha:]]", "", x_val)
x_i_num <- order(as.numeric(x_num))
if (na.last == TRUE){
x_i <- c(x_i_num, x_i_na)
}
if (na.last == FALSE){
x_i <- c(x_i_na, x_i_num)
}
return(x_i)
}
orderAccessions(c("4", NA, "2"))
order(c(1,2,1,2))
?seq_along
seq_along(4,6)
seq(4,6)
x <- c("3", NA, "2", "1", NA)
x <- c("3", NA, "2", "1", NA)
x_i <- rep(0, length(x))
x_i[is.na(x)] <- seq(from=(length(x)-sum(is.na(x))), to = length(x))
sum(is.na(x))
length(x)
length(x)-sum(is.na(x))
x <- c("3", NA, "2", "1", NA)
x_i <- rep(0, length(x))
x_i[is.na(x)] <- seq(from=(length(x)+1-sum(is.na(x))), to = length(x))
x_i
na.last = TRUE
x <- c("3", NA, "2", "1", NA)
x_i <- rep(0, length(x))
if (na.last == TRUE){
x_i[is.na(x)] <- seq(from=(length(x)+1-sum(is.na(x))), to = length(x))
}
if (na.last == FALSE){
x_i[is.na(x)] <- seq(from=1, to = sum(is.na(x)))
}
x_val <- x[!is.na(x)]
x_val <- gsub("[[:alpha:]]", "", x_val)
x_val_i <- order(as.numeric(x_val))
if (na.last == FALSE){
x_val_i <- x_val_i + sum(is.na(x))
}
x_i[!is.na(x)] <- x_val_i
x_i
na.last = FALSE
x <- c("3", NA, "2", "1", NA)
x_i <- rep(0, length(x))
if (na.last == TRUE){
x_i[is.na(x)] <- seq(from=(length(x)+1-sum(is.na(x))), to = length(x))
}
if (na.last == FALSE){
x_i[is.na(x)] <- seq(from=1, to = sum(is.na(x)))
}
x_val <- x[!is.na(x)]
x_val <- gsub("[[:alpha:]]", "", x_val)
x_val_i <- order(as.numeric(x_val))
if (na.last == FALSE){
x_val_i <- x_val_i + sum(is.na(x))
}
x_i[!is.na(x)] <- x_val_i
x_i
orderAccessions <- function(x, na.last = TRUE){
x_i <- rep(0, length(x))
if (na.last == TRUE){
x_i[is.na(x)] <- seq(from=(length(x)+1-sum(is.na(x))), to = length(x))
}
if (na.last == FALSE){
x_i[is.na(x)] <- seq(from=1, to = sum(is.na(x)))
}
x_val <- x[!is.na(x)]
x_val <- gsub("[[:alpha:]]", "", x_val)
x_val_i <- order(as.numeric(x_val))
if (na.last == FALSE){
x_val_i <- x_val_i + sum(is.na(x))
}
x_i[!is.na(x)] <- x_val_i
return(x_i)
}
orderAccessions(c("a811", "2c", NA, "7y"))
?order
orderAccessions <- function(x, na.last = TRUE){
x_i <- rep(0, length(x))
if (na.last == TRUE){
x_i[is.na(x)] <- seq(from=(length(x)+1-sum(is.na(x))), to = length(x))
}
if (na.last == FALSE){
x_i[is.na(x)] <- seq(from=1, to = sum(is.na(x)))
}
x_val <- x[!is.na(x)]
x_val <- gsub("[[:alpha:]]", "", x_val)
x_val_i <- order(as.numeric(x_val))
print(x_val_i)
if (na.last == FALSE){
x_val_i <- x_val_i + sum(is.na(x))
}
x_i[!is.na(x)] <- x_val_i
return(x_i)
}
orderAccessions(c("a811", "2c", NA, "7y"))
orderAccessions <- function(x, na.last = TRUE){
x_i <- rep(0, length(x))
if (na.last == TRUE){
x_i[is.na(x)] <- seq(from=(length(x)+1-sum(is.na(x))), to = length(x))
}
if (na.last == FALSE){
x_i[is.na(x)] <- seq(from=1, to = sum(is.na(x)))
}
x_val <- x[!is.na(x)]
x_val <- gsub("[[:alpha:]]", "", x_val)
x_val_i <- order(as.numeric(x_val))
print(x_val)
print(x_val_i)
if (na.last == FALSE){
x_val_i <- x_val_i + sum(is.na(x))
}
x_i[!is.na(x)] <- x_val_i
return(x_i)
}
orderAccessions(c("a811", "2c", NA, "7y"))
orderAccessions <- function(x, na.last = TRUE){
x_i <- rep(0, length(x))
if (na.last == TRUE){
x_i[is.na(x)] <- seq(from=(length(x)+1-sum(is.na(x))), to = length(x))
}
if (na.last == FALSE){
x_i[is.na(x)] <- seq(from=1, to = sum(is.na(x)))
}
x_val <- x[!is.na(x)]
x_val <- gsub("[[:alpha:]]", "", x_val)
x_val <- as.numeric(x_val)
x_val_i <- order(x_val)
print(x_val)
print(x_val_i)
if (na.last == FALSE){
x_val_i <- x_val_i + sum(is.na(x))
}
x_i[!is.na(x)] <- x_val_i
return(x_i)
}
orderAccessions(c("a811", "2c", NA, "7y"))
order(c(811,2,7))
order(c(8,2,7))
t
t <- c(8,2,7)
t
order(t)
t[order(t)]
x <- c("3", NA, "2", "1", NA)
x_i <- rep(0, length(x))
x_i_na <- which(is.na(x))
x_i_val <- which(!is.na(x))
x_num <- gsub("[[:alpha:]]", "", x[x_i_val])
x_i
x_i_na
x_i_val
x_i_num <- order(x_num)
x_i_num
x <- c("3", NA, "2", "1", NA)
x_i <- rep(0, length(x))
x_i_na <- which(is.na(x))
x_i_val <- which(!is.na(x))
x_num <- gsub("[[:alpha:]]", "", x[x_i_val])
x_i_num <- order(x_num)
x_i_val <- x_i_val[x_i_num]
x_i <- c(x_i_val, x_i_na)
x_i
orderAccessions <- function(x, na.last = TRUE){
x_i <- rep(0, length(x))
x_i_na <- which(is.na(x))
x_i_val <- which(!is.na(x))
x_num <- gsub("[[:alpha:]]", "", x[x_i_val])
x_i_num <- order(x_num)
x_i_val <- x_i_val[x_i_num]
if (na.last == TRUE){
x_i <- c(x_i_val, x_i_na)
}
if (na.last == FALSE){
x_i <- c(x_i_na, x_i_val)
}
}
orderAccessions(c("2", "4r", NA, "e", "33"))
orderAccessions <- function(x, na.last = TRUE){
x_i <- rep(0, length(x))
x_i_na <- which(is.na(x))
x_i_val <- which(!is.na(x))
x_num <- gsub("[[:alpha:]]", "", x[x_i_val])
x_i_num <- order(x_num)
x_i_val <- x_i_val[x_i_num]
if (na.last == TRUE){
x_i <- c(x_i_val, x_i_na)
}
if (na.last == FALSE){
x_i <- c(x_i_na, x_i_val)
}
return(x_i)
}
orderAccessions(c("2", "4r", NA, "e", "33"))
x <- c("2", "4r", NA, "e", "33")
orderAccessions(x)
x[orderAccessions(x)]
orderAccessions <- function(x, na.last = TRUE){
x_i <- rep(0, length(x))
x_i_na <- which(is.na(x))
x_i_val <- which(!is.na(x))
x_num <- gsub("[[:alpha:]]", "", x[x_i_val])
print(x_num)
x_i_num <- order(x_num)
x_i_val <- x_i_val[x_i_num]
if (na.last == TRUE){
x_i <- c(x_i_val, x_i_na)
}
if (na.last == FALSE){
x_i <- c(x_i_na, x_i_val)
}
return(x_i)
}
x[orderAccessions(x)]
orderAccessions <- function(x, na.last = TRUE){
x_i <- rep(0, length(x))
x_i_na <- which(is.na(x))
x_i_val <- which(!is.na(x))
x_num <- as.numeric(gsub("[[:alpha:]]", "", x[x_i_val]))
print(x_num)
x_i_num <- order(x_num)
x_i_val <- x_i_val[x_i_num]
if (na.last == TRUE){
x_i <- c(x_i_val, x_i_na)
}
if (na.last == FALSE){
x_i <- c(x_i_na, x_i_val)
}
return(x_i)
}
x[orderAccessions(x)]
?set.seed
set.seed(001)
sample(1:10)
sample(1:10)
set.seed(001)
sample(1:10)
set.seed(002)
sample(1:10)
set.seed(002)
sample(1:10)
t <- (1,2,NA)
t <- c(1,2,NA)
is.na(t) <- 1
t
order(c(1,2,5)
)
order(c(6,1,2,5))
order(c("", " ", "0"))
devtools::test()
devtools::test()
ls(pos="package:SpideR")
library(SpideR)
devtools::load_all()
ls(pos="package:SpideR")
devtools::load_all()
ls(pos="package:SpideR")
getAnywhere(searchSRA)
searchSRAForAccession("SRR1", "*")
class(searchSRAForAccession("SRR1", "*"))
class(searchSRAForAccession("SR1", "*"))
devtools::test()
class(searchSRAForAccession("SR1", "*"))
class(searchSRAForAccession("SR1", "*"))
searchSRAForAccession("SRR1", "*")
devtools::test()
devtools::test()
devtools::test()
devtools::test()
searchSRAForAccession("SRR1", "*")
searchSRAForAccession("SR.", "*")
devtools::test()
searchSRAForAccession("SR", "*")
searchSRAForAccession("SRG", "*")
searchSRAForAccession("SRG223", "*")
devtools::test()
searchSRAForAccession("SRR223", "*")
searchSRAForAccession("SRR1", "*")
devtools::test()
searchSRAForAccession("SRR1", "*")
length(searchSRAForAccession("SRR1", "*"))
dim(searchSRAForAccession("SRR1", "*"))
dim(searchSRAForAccession("SRR1", "*"))[1]
dim(searchSRAForAccession("SRR1", "*"))[1]==0
devtools::test()
dim(suppressWarnings(searchSRAForAccession("SRR1", "*")))[1]==0
devtools::test()
searchSRAForAccession("SRR1", "nth")
searchSRAForAccession("SRR23333", "nth")
searchSRAForAccession("SRR23333", "*")
searchSRAForAccession("SRR233337", "*")
searchSRAForAccession("SRR2333371", "*")
searchSRAForAccession("SRR23333", "*")
dbGetQuery(sra_con, "SELECT run_accession FROM sra GROUP_BY RANDOM() LIMIT 3")
dbGetQuery(sra_con, "SELECT run_accession FROM sra GROUP BY RANDOM() LIMIT 3")
devtools::test()
searchSRAForAccession("GSE23333", "*")
searchSRAForAccession("GSM23333", "*")
searchSRAForAccession("GSM1000", "*")
dbGetQuery(sra_con, "SELECT study_accession FROM sra GROUP BY RANDOM() LIMIT 3")
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE study_accession = 'SRP030489'")
searchSRAForAccession("SRP030489", "*")
dim(searchSRAForAccession("SRP030489", "*"))
dim(searchSRAForAccession("SRP030489", "*"))[1]
devtools::test()
dim(searchSRAForAccession("SRP065890", "*"))
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE study_accession = 'SRP065890'")
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE study_accession = 'SRP019664'")
dbGetQuery(sra_con, "SELECT sample_accession FROM sra GROUP BY RANDOM() LIMIT 3")
dbGetQuery(sra_con, "SELECT sample_accession FROM sra GROUP BY RANDOM() LIMIT 3")
devtools::test()
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE sample_accession = 'ERS502184'")
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE sample_accession = 'SRS1236919'")
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE sample_accession = 'SRS1105782'")
dbGetQuery(sra_con, "SELECT experiment_accession FROM sra GROUP BY RANDOM() LIMIT 3")
dbGetQuery(sra_con, "SELECT experiment_accession FROM sra GROUP BY RANDOM() LIMIT 3")
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE experiment_accession = 'SRX2370783'")
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE experiment_accession = 'SRX160621'")
dbGetQuery(sra_con, "SELECT experiment_accession FROM sra GROUP BY RANDOM() LIMIT 3")
dbGetQuery(sra_con, "SELECT experiment_accession FROM sra GROUP BY RANDOM() LIMIT 3")
dbGetQuery(sra_con, "SELECT count(*) FROM sra WHERE experiment_accession = 'SRX021642'")
devtools::test()
dbGetQuery(sra_con, "SELECT run_accession FROM sra GROUP BY RANDOM() LIMIT 3")
dbGetQuery(sra_con, "SELECT run_accession FROM sra GROUP BY RANDOM() LIMIT 3")
dbGetQuery(sra_con, "SELECT run_accession FROM sra GROUP BY RANDOM() LIMIT 3")
dbGetQuery(sra_con, "SELECT run_accession FROM sra WHERE run_accession LIKE '%D%' GROUP BY RANDOM() LIMIT 3")
devtools::test()
convertAccession("ERR1641060")
convertAccession("SRR1641060")
accessionClassifier("ERR1641060")
devtools::test()
convertAccession("SRR1641060")
getAnywhere(accessionClassifier)
convertAccession("SRR5000245")
