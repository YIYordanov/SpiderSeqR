search()
install.packages("roxygen2")
devtools::load_all()
if(!file.exists("GEOmetadb.sqlite")){
geofile <- getSQLiteFile(destfile = "GEOmetadb.sqlite.gz")
}
search()
?getSQLiteFile
geofile <- getSQLiteFile(destfile = "GEOmetadb.sqlite.gz")
srafile <- 'SRAmetadb.sqlite'
if(!file.exists("SRAmetadb.sqlite"))srafile <<- getSRAdbFile()
srafile <<- getSRAdbFile()
devtools::use_vignette("README")
devtools::load_all()
devtools::load_all()
file.exists("GEOmetadb.sqlite")
if(!file.exists("GEOmetadb.sqlite")){
print("sth")
#geofile <- getSQLiteFile(destfile = "GEOmetadb.sqlite.gz")
}
if(file.exists("GEOmetadb.sqlite")){
print("sth")
#geofile <- getSQLiteFile(destfile = "GEOmetadb.sqlite.gz")
}
search(0)
search()
args(add)
args("add")
args("sum")
args(sum)
args(searchForTerm)
args(searchForTerm)
#searchForTerm(library_strategy, gene = NULL, antibody = NULL, cell_type = NULL,
treatment = NULL, species = NULL, platform = NULL, secondary_library_strategy = NULL)
args("searchForTerm")
#searchForTerm(library_strategy, gene = NULL, antibody = NULL, cell_type = NULL,
#    treatment = NULL, species = NULL, platform = NULL, secondary_library_strategy = NULL)
#searchForTerm(library_strategy, gene = NULL, antibody = NULL, cell_type = NULL,
#    treatment = NULL, species = NULL, platform = NULL, secondary_library_strategy = NULL)
getAnywhere(searchForTerm())
getAnywhere(searchSRA
)
searc()
search()
?menu
if(1==1){
#if(!file.exists("test.txt")){
geo_menu <- menu(c("yes", "no"))
}
geo_menu
if(1==1){
#if(!file.exists("test.txt")){
print("The file GEOmetadb.sqlite was not found in the current working directory")
print("Would you like to download the file now?")
geo_menu <- menu(c("yes", "no"))
}
geo_meny
geo_menu
str(geo_menu)
if(1==1){
#if(!file.exists("test.txt")){
print("The file GEOmetadb.sqlite was not found in the current working directory")
print("Would you like to download the file now?")
geo_menu <- menu(c("yes", "no"))
if (geo_menu == 1){
print("Downloading the file")
} else {
error("GEOmetadb.sqlite is necessary for the package operation")
}
}
if(1==1){
#if(!file.exists("test.txt")){
print("The file GEOmetadb.sqlite was not found in the current working directory")
print("Would you like to download the file now?")
geo_menu <- menu(c("yes", "no"))
if (geo_menu == 1){
print("Downloading the file")
} else {
error("GEOmetadb.sqlite is necessary for the package operation")
}
}
if(1==1){
#if(!file.exists("test.txt")){
print("The file GEOmetadb.sqlite was not found in the current working directory")
print("Would you like to download the file now?")
geo_menu <- menu(c("yes", "no"))
if (geo_menu == 1){
print("Downloading the file")
} else {
stop("GEOmetadb.sqlite is necessary for the package operation")
}
}
getwd()
setwd("/home/ss_lab/Documents/Anna/Spider201709/")
getwd()
search()
.GlobalEnv$t <- 1
t
testfn <- function(){
.GlobalEnv$t <- 2
}
testfn
testfn()
t
devtools::load_all()
getwd()
setwd("/home/ss_lab/Documents/Anna/Spider201709/SpideR/")
devtools::load_all()
devtools::load_all()
search()
devtools::load_all()
devtools::load_all()
devtools::load_all()
searchForAccession("SRP3838")
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
search()
str(.GlobalEnv)
str(0x882b800)
str("0x882b800")
devtools::load_all()
devtools::load_all()
devtools::load_all()
search()
where()
where(t)
where("t")
?search()
devtools::load_all()
searchForAccession("SRP3838")
t <-searchForAccession("SRP102029")
View(t)
rm(geo_con)
rm(sra_con)
ls()
?ls
search()
ls(envir=package:SpideR)
ls(envir="package:SpideR")
ls("package:SpideR")
?menu
devtools::load_all()
devtools::load_all()
ls(envir="package:SpideR")
ls("package:SpideR")
digitSort("A5", "D1")
digitSort(c("A5", "D1"))
conditionVerifier2
grepl("GSM111_2", "GSM111[^A-Za-z]")
?grepl
grepl("GSM111[^A-Za-z]", "GSM111_2")
grepl("GSM111[^A-Za-z]", "GSM111_a2")
grepl("GSM111[^A-Za-z]", "GSM111a_a2")
grepl("GSM111[^0-9]", "GSM111a_a2")
grepl("GSM111[^0-9]", "GSM1111_a2")
conditionVerifier2(t, "stat1", "experiment_title")
x <- cbind(c(1:5), c(11:15))
x
x[rep(FALSE, 5),]
str(x[rep(FALSE, 5),])
x <- as.data.frame(x)
str(x[rep(FALSE, 5),])
View(t)
gsm_list <- c("GSM2538939", "GSM2539030")
gsm_list <- unique(gsm_list)
gsm_list <- gsm_list[digitSort(gsm_list)]
gsm_list
queryWriter()
queryWriter
queryWriter("GSM", c("1", "2"))
gsm_list <- c("GSM2538939", "GSM2539030")
gsm_list <- unique(gsm_list)
gsm_list <- gsm_list[digitSort(gsm_list)]
#Set parameters
gsm_columns <- c("experiment_title", "run_alias") #===*=== Re-investigate
sra_columns <- "*"
sra_columns_sql <- paste(sra_columns, collapse = ", ")
output_df <- data.frame()
for (g in seq_along(gsm_list)){
#search SRA in one of the GSM-containing columns
query <- paste0("SELECT ", sra_solumns_sql, " FROM sra WHERE ", queryWriter(gsm_list[g], gsm_columns))
current_chunk <- dbGetQuery(sra_con, query)
#current_chunk
gsm_regexp <- paste0(g, "[^0-9]")
current_chunk <- current_chunk[conditonVerifier2(current_chunk, gsm_regexp, gsm_columns),]
if (dim(current_chunk)[1] != 0){
output_df <- rbind(output_df, current_chunk)
}
}
gsm_list <- c("GSM2538939", "GSM2539030")
gsm_list <- unique(gsm_list)
gsm_list <- gsm_list[digitSort(gsm_list)]
#Set parameters
gsm_columns <- c("experiment_title", "run_alias") #===*=== Re-investigate
sra_columns <- "*"
sra_columns_sql <- paste(sra_columns, collapse = ", ")
output_df <- data.frame()
for (g in seq_along(gsm_list)){
#search SRA in one of the GSM-containing columns
query <- paste0("SELECT ", sra_columns_sql, " FROM sra WHERE ", queryWriter(gsm_list[g], gsm_columns))
current_chunk <- dbGetQuery(sra_con, query)
#current_chunk
gsm_regexp <- paste0(g, "[^0-9]")
current_chunk <- current_chunk[conditonVerifier2(current_chunk, gsm_regexp, gsm_columns),]
if (dim(current_chunk)[1] != 0){
output_df <- rbind(output_df, current_chunk)
}
}
ls("package:SpideR")
conditonVerifier2
gsm_list <- c("GSM2538939", "GSM2539030")
gsm_list <- unique(gsm_list)
gsm_list <- gsm_list[digitSort(gsm_list)]
#Set parameters
gsm_columns <- c("experiment_title", "run_alias") #===*=== Re-investigate
sra_columns <- "*"
sra_columns_sql <- paste(sra_columns, collapse = ", ")
output_df <- data.frame()
for (g in seq_along(gsm_list)){
#search SRA in one of the GSM-containing columns
query <- paste0("SELECT ", sra_columns_sql, " FROM sra WHERE ", queryWriter(gsm_list[g], gsm_columns))
current_chunk <- dbGetQuery(sra_con, query)
#current_chunk
gsm_regexp <- paste0(g, "[^0-9]")
current_chunk <- current_chunk[conditionVerifier2(current_chunk, gsm_regexp, gsm_columns),]
if (dim(current_chunk)[1] != 0){
output_df <- rbind(output_df, current_chunk)
}
}
gsm_list <- c("GSM2538939", "GSM2539030")
gsm_list <- unique(gsm_list)
gsm_list <- gsm_list[digitSort(gsm_list)]
#Set parameters
gsm_columns <- c("experiment_title", "run_alias") #===*=== Re-investigate
sra_columns <- "*"
sra_columns_sql <- paste(sra_columns, collapse = ", ")
output_df <- data.frame()
for (g in seq_along(gsm_list)){
#search SRA in one of the GSM-containing columns
query <- paste0("SELECT ", sra_columns_sql, " FROM sra WHERE ", queryWriter(gsm_list[g], gsm_columns))
current_chunk <- dbGetQuery(sra_con, query)
#current_chunk
gsm_regexp <- paste0(gsm_list[g], "[^0-9]")
current_chunk <- current_chunk[conditionVerifier2(current_chunk, gsm_regexp, gsm_columns),]
if (dim(current_chunk)[1] != 0){
output_df <- rbind(output_df, current_chunk)
}
}
View(output_df)
gsm_list <- c("GSM2538939", "GSM2539030")
gsm_list <- unique(gsm_list)
gsm_list <- gsm_list[digitSort(gsm_list)]
gsm_total <- length(gsm_list)
gsm_count <- 0
#Set parameters
gsm_columns <- c("experiment_title", "run_alias") #===*=== Re-investigate
sra_columns <- "*"
sra_columns_sql <- paste(sra_columns, collapse = ", ")
output_df <- data.frame()
for (g in seq_along(gsm_list)){
#search SRA in one of the GSM-containing columns
query <- paste0("SELECT ", sra_columns_sql, " FROM sra WHERE ", queryWriter(gsm_list[g], gsm_columns))
current_chunk <- dbGetQuery(sra_con, query)
#current_chunk
gsm_regexp <- paste0(gsm_list[g], "[^0-9]")
current_chunk <- current_chunk[conditionVerifier2(current_chunk, gsm_regexp, gsm_columns),]
if (dim(current_chunk)[1] != 0){
output_df <- rbind(output_df, current_chunk)
gsm_count <- gsm_count + 1
}
}
gsm_list <- c("GSM2538939", "GSM2539030")
gsm_list <- unique(gsm_list)
gsm_list <- gsm_list[digitSort(gsm_list)]
gsm_total <- length(gsm_list)
gsm_count <- 0
#Set parameters
gsm_columns <- c("experiment_title", "run_alias") #===*=== Re-investigate
sra_columns <- "*"
sra_columns_sql <- paste(sra_columns, collapse = ", ")
output_df <- data.frame()
for (g in seq_along(gsm_list)){
#search SRA in one of the GSM-containing columns
query <- paste0("SELECT ", sra_columns_sql, " FROM sra WHERE ", queryWriter(gsm_list[g], gsm_columns))
current_chunk <- dbGetQuery(sra_con, query)
print(dim(current_chunk))
#current_chunk
gsm_regexp <- paste0(gsm_list[g], "[^0-9]")
current_chunk <- current_chunk[conditionVerifier2(current_chunk, gsm_regexp, gsm_columns),]
if (dim(current_chunk)[1] != 0){
output_df <- rbind(output_df, current_chunk)
gsm_count <- gsm_count + 1
}
}
append(1:4, 2:4)
searchForGSMinSRA <- function(gsm_list, sra_columns=NA){
#Remove duplicates
gsm_list <- unique(gsm_list)
gsm_list <- gsm_list[digitSort(gsm_list)]
#Get the total and count
gsm_total <- length(gsm_list)
gsm_count <- 0
#Set parameters
gsm_columns <- c("experiment_title", "run_alias") #===*=== Re-investigate
if (is.na(sra_columns)){
sra_columns <- c("study_accession", "sample_accession", "experiment_accession", "run_accession")
}
sra_columns <- append(sra_columns, gsm_columns) #Must include gsm_columns to later verify the match
sra_columns_sql <- paste(sra_columns, collapse = ", ")
#Initialise the output data frame
output_df <- data.frame()
for (g in seq_along(gsm_list)){ #For each GSM
query <- paste0("SELECT ", sra_columns_sql, " FROM sra WHERE ", queryWriter(gsm_list[g], gsm_columns))
current_chunk <- dbGetQuery(sra_con, query)
#print(dim(current_chunk))
#Verify that correct GSMs have been captured
gsm_regexp <- paste0(gsm_list[g], "[^0-9]")
current_chunk <- current_chunk[conditionVerifier2(current_chunk, gsm_regexp, gsm_columns),]
if (dim(current_chunk)[1] != 0){
output_df <- rbind(output_df, current_chunk) #Add current chunk to the output
gsm_count <- gsm_count + 1 #Increase the counter
}
}
}
searchForGSMinSRA(c("GSM2538939", "GSM2539030"))
searchForGSMinSRA <- function(gsm_list, sra_columns=NA){
#Remove duplicates
gsm_list <- unique(gsm_list)
gsm_list <- gsm_list[digitSort(gsm_list)]
#Get the total and count
gsm_total <- length(gsm_list)
gsm_count <- 0
#Set parameters
gsm_columns <- c("experiment_title", "run_alias") #===*=== Re-investigate
if (is.na(sra_columns)){
sra_columns <- c("study_accession", "sample_accession", "experiment_accession", "run_accession")
}
sra_columns <- append(sra_columns, gsm_columns) #Must include gsm_columns to later verify the match
sra_columns_sql <- paste(sra_columns, collapse = ", ")
#Initialise the output data frame
output_df <- data.frame()
for (g in seq_along(gsm_list)){ #For each GSM
query <- paste0("SELECT ", sra_columns_sql, " FROM sra WHERE ", queryWriter(gsm_list[g], gsm_columns))
current_chunk <- dbGetQuery(sra_con, query)
#print(dim(current_chunk))
#Verify that correct GSMs have been captured
gsm_regexp <- paste0(gsm_list[g], "[^0-9]")
current_chunk <- current_chunk[conditionVerifier2(current_chunk, gsm_regexp, gsm_columns),]
if (dim(current_chunk)[1] != 0){
output_df <- rbind(output_df, current_chunk) #Add current chunk to the output
gsm_count <- gsm_count + 1 #Increase the counter
}
}
print(paste0("Found results for ", gsm_count, " out of ", gsm_total, " GSMs"))
return(output_df)
}
searchForGSMinSRA(c("GSM2538939", "GSM2539030"))
searchForGSMinSRA(c("GSM2538939", "GSM2539030", "c"))
searchForGSMinSRA <- function(gsm_list, sra_columns=NA){
if (accessionClassifier(gsm_list)!="gsm"){
stop("gsm_list must only contain GSM entries")
}
#Remove duplicates
gsm_list <- unique(gsm_list)
gsm_list <- gsm_list[digitSort(gsm_list)]
#Get the total and count
gsm_total <- length(gsm_list)
gsm_count <- 0
#Set parameters
gsm_columns <- c("experiment_title", "run_alias") #===*=== Re-investigate
if (is.na(sra_columns)){
sra_columns <- c("study_accession", "sample_accession", "experiment_accession", "run_accession")
}
sra_columns <- append(sra_columns, gsm_columns) #Must include gsm_columns to later verify the match
sra_columns_sql <- paste(sra_columns, collapse = ", ")
#Initialise the output data frame
output_df <- data.frame()
for (g in seq_along(gsm_list)){ #For each GSM
query <- paste0("SELECT ", sra_columns_sql, " FROM sra WHERE ", queryWriter(gsm_list[g], gsm_columns))
current_chunk <- dbGetQuery(sra_con, query)
#print(dim(current_chunk))
#Verify that correct GSMs have been captured
gsm_regexp <- paste0(gsm_list[g], "[^0-9]")
current_chunk <- current_chunk[conditionVerifier2(current_chunk, gsm_regexp, gsm_columns),]
if (dim(current_chunk)[1] != 0){
output_df <- rbind(output_df, current_chunk) #Add current chunk to the output
gsm_count <- gsm_count + 1 #Increase the counter
}
}
print(paste0("Found results for ", gsm_count, " out of ", gsm_total, " GSMs"))
return(output_df)
}
searchForGSMinSRA(c("GSM2538939", "GSM2539030", "c"))
