#Preserve 'NULL'
if (is.null(y[[s]])){
y[[s]] <- "NULL"
}
#Append values to the names and collapse
st_out <- append(st_out, y[[s]])
st_out <- paste(st_out, collapse = "\t")
print(st_out)
cat(st_out, file = output_file, sep = "\n", append = TRUE)
}
recordGenerator <- function(st, output_file){
y <- st
for (s in seq_along(y)){
#Order elements within each category (if multiple exist)
if (length(y[[s]])>1){
y[[s]] <- y[[s]][order(y[[s]])]
}
#Save names of list elements
st_out <- names(y)[[s]]
#Preserve 'NULL'
if (is.null(y[[s]])){
y[[s]] <- "NULL"
}
#Append values to the names and collapse
st_out <- append(st_out, y[[s]])
st_out <- paste(st_out, collapse = "\t")
#print(st_out)
cat(st_out, file = output_file, sep = "\n", append = TRUE)
}
}
recordGenerator(ist, "sth.tab")
out
recordGenerator <- function(st, file){
y <- st
for (s in seq_along(y)){
#Order elements within each category (if multiple exist)
if (length(y[[s]])>1){
y[[s]] <- y[[s]][order(y[[s]])]
}
#Save names of list elements
st_out <- names(y)[[s]]
#Preserve 'NULL'
if (is.null(y[[s]])){
y[[s]] <- "NULL"
}
#Append values to the names and collapse
st_out <- append(st_out, y[[s]])
st_out <- paste(st_out, collapse = "\t")
#print(st_out)
cat(st_out, file = file, sep = "\n", append = TRUE)
}
}
recordGenerator(ist, "sth.tab")
recordGenerator <- function(st, file){
file.create(file)
y <- st
for (s in seq_along(y)){
#Order elements within each category (if multiple exist)
if (length(y[[s]])>1){
y[[s]] <- y[[s]][order(y[[s]])]
}
#Save names of list elements
st_out <- names(y)[[s]]
#Preserve 'NULL'
if (is.null(y[[s]])){
y[[s]] <- "NULL"
}
#Append values to the names and collapse
st_out <- append(st_out, y[[s]])
st_out <- paste(st_out, collapse = "\t")
#print(st_out)
cat(st_out, file = file, sep = "\n", append = TRUE)
}
}
recordGenerator(ist, "sth.tab")
recordGenerator(ist$gene, "sth.tab")
recordGenerator(ist[2], "sth.tab")
?getCall
recordGenerator <- function(st, file){
file.create(file)
y <- st
for (s in seq_along(y)){
#Order elements within each category (if multiple exist)
if (length(y[[s]])>1){
y[[s]] <- y[[s]][order(y[[s]])]
}
#Save names of list elements
st_out <- names(y)[[s]]
#Preserve 'NULL'
if (is.null(y[[s]])){
y[[s]] <- "NULL"
}
#Append values to the names and collapse
st_out <- append(st_out, y[[s]])
st_out <- paste(st_out, collapse = "\t")
#print(st_out)
cat(st_out, file = file, sep = "\n", append = TRUE)
}
getCall()
}
recordGenerator(ist, "sth.tab")
recordGenerator <- function(st, file){
file.create(file)
y <- st
for (s in seq_along(y)){
#Order elements within each category (if multiple exist)
if (length(y[[s]])>1){
y[[s]] <- y[[s]][order(y[[s]])]
}
#Save names of list elements
st_out <- names(y)[[s]]
#Preserve 'NULL'
if (is.null(y[[s]])){
y[[s]] <- "NULL"
}
#Append values to the names and collapse
st_out <- append(st_out, y[[s]])
st_out <- paste(st_out, collapse = "\t")
#print(st_out)
cat(st_out, file = file, sep = "\n", append = TRUE)
}
match.call()
}
recordGenerator(ist, "sth.tab")
?match.call()
recordGenerator <- function(st, file){
file.create(file)
y <- st
for (s in seq_along(y)){
#Order elements within each category (if multiple exist)
if (length(y[[s]])>1){
y[[s]] <- y[[s]][order(y[[s]])]
}
#Save names of list elements
st_out <- names(y)[[s]]
#Preserve 'NULL'
if (is.null(y[[s]])){
y[[s]] <- "NULL"
}
#Append values to the names and collapse
st_out <- append(st_out, y[[s]])
st_out <- paste(st_out, collapse = "\t")
#print(st_out)
cat(st_out, file = file, sep = "\n", append = TRUE)
}
}
str(match.call())
devtools::load_all()
recordGenerator <- function(st, file){
file.create(file)
y <- st
for (s in seq_along(y)){
#Order elements within each category (if multiple exist)
if (length(y[[s]])>1){
y[[s]] <- y[[s]][order(y[[s]])]
}
#Save names of list elements
st_out <- names(y)[[s]]
#Preserve 'NULL'
if (is.null(y[[s]])){
y[[s]] <- "NULL"
}
#Append values to the names and collapse
st_out <- append(st_out, y[[s]])
st_out <- paste(st_out, collapse = "\t")
#print(st_out)
cat(st_out, file = file, sep = "\n", append = TRUE)
}
c <- match.call()
cat(c, file = "call.txt")
}
recordGenerator(ist, "sth.tab")
recordGenerator <- function(st, file){
file.create(file)
y <- st
for (s in seq_along(y)){
#Order elements within each category (if multiple exist)
if (length(y[[s]])>1){
y[[s]] <- y[[s]][order(y[[s]])]
}
#Save names of list elements
st_out <- names(y)[[s]]
#Preserve 'NULL'
if (is.null(y[[s]])){
y[[s]] <- "NULL"
}
#Append values to the names and collapse
st_out <- append(st_out, y[[s]])
st_out <- paste(st_out, collapse = "\t")
#print(st_out)
cat(st_out, file = file, sep = "\n", append = TRUE)
}
c <- as.charcter(match.call())
cat(c, file = "call.txt")
}
recordGenerator(ist, "sth.tab")
recordGenerator <- function(st, file){
file.create(file)
y <- st
for (s in seq_along(y)){
#Order elements within each category (if multiple exist)
if (length(y[[s]])>1){
y[[s]] <- y[[s]][order(y[[s]])]
}
#Save names of list elements
st_out <- names(y)[[s]]
#Preserve 'NULL'
if (is.null(y[[s]])){
y[[s]] <- "NULL"
}
#Append values to the names and collapse
st_out <- append(st_out, y[[s]])
st_out <- paste(st_out, collapse = "\t")
#print(st_out)
cat(st_out, file = file, sep = "\n", append = TRUE)
}
c <- as.character(match.call())
cat(c, file = "call.txt")
}
recordGenerator(ist, "sth.tab")
recordGenerator <- function(st, file){
file.create(file)
y <- st
for (s in seq_along(y)){
#Order elements within each category (if multiple exist)
if (length(y[[s]])>1){
y[[s]] <- y[[s]][order(y[[s]])]
}
#Save names of list elements
st_out <- names(y)[[s]]
#Preserve 'NULL'
if (is.null(y[[s]])){
y[[s]] <- "NULL"
}
#Append values to the names and collapse
st_out <- append(st_out, y[[s]])
st_out <- paste(st_out, collapse = "\t")
#print(st_out)
cat(st_out, file = file, sep = "\n", append = TRUE)
}
c <- as.character(match.call())
cat(c, file = "call.txt")
saveRDS(match.call(), file = "call.Rda")
}
recordGenerator(ist, "sth.tab")
CC <- readRDS("call.Rda")
str(CC)
call(CC)
eval(CC)
recordGenerator <- function(st, file){
file.create(file)
y <- st
for (s in seq_along(y)){
#Order elements within each category (if multiple exist)
if (length(y[[s]])>1){
y[[s]] <- y[[s]][order(y[[s]])]
}
#Save names of list elements
st_out <- names(y)[[s]]
#Preserve 'NULL'
if (is.null(y[[s]])){
y[[s]] <- "NULL"
}
#Append values to the names and collapse
st_out <- append(st_out, y[[s]])
st_out <- paste(st_out, collapse = "\t")
#print(st_out)
cat(st_out, file = file, sep = "\n", append = TRUE)
}
c <- as.character(match.call())
cat(c, file = "call.txt")
saveRDS(match.call(), file = "call.Rda")
print("whoa")
}
eval(CC)
call
saveCallRDS <- function(file){
c <- match.call(def = sys.function(-1), call = sys.call(-1))
saveRDS(c, file = file)
}
recordGenerator <- function(st, file){
file.create(file)
y <- st
for (s in seq_along(y)){
#Order elements within each category (if multiple exist)
if (length(y[[s]])>1){
y[[s]] <- y[[s]][order(y[[s]])]
}
#Save names of list elements
st_out <- names(y)[[s]]
#Preserve 'NULL'
if (is.null(y[[s]])){
y[[s]] <- "NULL"
}
#Append values to the names and collapse
st_out <- append(st_out, y[[s]])
st_out <- paste(st_out, collapse = "\t")
#print(st_out)
cat(st_out, file = file, sep = "\n", append = TRUE)
}
saveCallRDS("what.Rda")
}
recordGenerator(ist, "sth.tab")
aa <- readRDS("what.Rda")
aa
getAnywhere(filenameGenerator)
Sys.Date()
Sys.time()
format(Sys.time(), format = "%y%m%d%h%m%s")
format(Sys.time(), format = "%y%m%d%H%M%S")
format(Sys.time(), format = "%y%m%d%H%M%S")
format(Sys.time(), format = "%y%m%d%H%M%S")
format(Sys.time(), format = "%y%m%d%_H%M%S")
format(Sys.time(), format = "%y%m%d_%H%M%S")
devtools::load_all()
searchForTerm(library_strategy = "RNA-Seq", gene=c("TGF-β", "Tgfb1", "tgfb"), species = "9606")
devtools::load_all()
searchForTerm(library_strategy = "RNA-Seq", gene=c("TGF-β", "Tgfb1", "tgfb"), species = "9606")
devtools::load_all()
searchForTerm(library_strategy = "RNA-Seq", gene=c("TGF-β", "Tgfb1", "tgfb"), species = "9606")
args(filenameGenerator)
get_args <- function () {
as.list( match.call(
def = sys.function( -1 ),
call = sys.call(-1)) )[-1]
}
devtools::load_all()
searchForTerm(library_strategy = "RNA-Seq", gene=c("TGF-β", "Tgfb1", "tgfb"), species = "9606")
devtools::load_all()
searchForTerm(library_strategy = "RNA-Seq", gene=c("TGF-β", "Tgfb1", "tgfb"), species = "9606")
testf2 <- function(a, b, c){
if (is.null(a)){
a <- NULL
}
if (is.null(b)){
b <- NULL
}
if (is.null(c)){
c <- NULL
}
list(sys = sys.call(), match = match.call())
}
testf2(2)
testf2 <- function(a=NULL, b=NULL, c=NULL){
if (is.null(a)){
a <- NULL
}
if (is.null(b)){
b <- NULL
}
if (is.null(c)){
c <- NULL
}
list(sys = sys.call(), match = match.call())
}
testf2(2)
testf2 <- function(a=NULL, b=NULL, c=NULL){
if (is.null(a)){
a <- NULL
}
if (is.null(b)){
b <- NULL
}
if (is.null(c)){
c <- NULL
}
list(sys = sys.call(), match = match.call(def = sys.function(-1), call = sys.call(-1)))
}
testfsh <- function(x= NULL, y=NULL, z = NULL){
return(testf2())
}
testfsh(1)
test_outer <- function(x= NULL, y=NULL, z = NULL){
return(test_info())
}
test_info <- function(){
match.call(def = sys.function(-1), call = sys.call(-1))
}
test_outer(1,2,3)
test_outer <- function(x= NULL, y=NULL, z = NULL){
return(test_info())
}
test_info <- function(){
match.call(def = sys.function(-1), call = sys.call(-1))[-1]
}
test_outer(1,2,3)
str(test_outer(1,2,3))
as.character(test_outer(1,2,3))
as.character(names(test_outer(1,2,3)))
test_outer <- function(x= NULL, y=NULL, z = NULL){
return(test_info())
}
test_info <- function(){
match.call(def = sys.function(-1), call = sys.call(-1)) #Entire call
match.call(def = sys.function(-1), call = sys.call(-1))[-1] #Arguments only
}
test_outer(1,2,3)
test_outer <- function(x= NULL, y=NULL, z = NULL){
return(test_info())
}
test_info <- function(){
match.call(def = sys.function(-1), call = sys.call(-1)) #Entire call
#match.call(def = sys.function(-1), call = sys.call(-1))[-1] #Arguments only
}
test_outer(1,2,3)
eval(test_outer(1,2,3))
recordGenerator <- function(st, file){
file.create(file)
y <- st
for (s in seq_along(y)){
#Order elements within each category (if multiple exist)
if (length(y[[s]])>1){
y[[s]] <- y[[s]][order(y[[s]])]
}
#Save names of list elements
st_out <- names(y)[[s]]
#Preserve 'NULL'
if (is.null(y[[s]])){
#y[[s]] <- "NULL"
y[[s]] <- ""
}
#Append values to the names and collapse
st_out <- append(st_out, y[[s]])
st_out <- paste(st_out, collapse = "\t")
#print(st_out)
cat(st_out, file = file, sep = "\n", append = TRUE)
}
saveCallRDS("what.Rda")
}
recordGenerator(ist, "nth.tab")
parameterRecordGenerator <- function(st, file){
file.create(file)
y <- st
for (s in seq_along(y)){
#Order elements within each category (if multiple exist)
if (length(y[[s]])>1){
y[[s]] <- y[[s]][order(y[[s]])]
}
#Save names of list elements
st_out <- names(y)[[s]]
#Preserve 'NULL'
if (is.null(y[[s]])){
#y[[s]] <- "NULL"
y[[s]] <- ""
}
#Append values to the names and collapse
st_out <- append(st_out, y[[s]])
st_out <- paste(st_out, collapse = "\t")
#print(st_out)
cat(st_out, file = file, sep = "\n", append = TRUE)
}
}
parameterRecordGenerator <- function(st, file){
file.create(file)
y <- st
for (s in seq_along(y)){
#Order elements within each category (if multiple exist)
if (length(y[[s]])>1){
y[[s]] <- y[[s]][order(y[[s]])]
}
#Save names of list elements
st_out <- names(y)[[s]]
#Preserve 'NULL'
if (is.null(y[[s]])){
#y[[s]] <- "NULL"
y[[s]] <- ""
}
#Append values to the names and collapse
st_out <- append(st_out, y[[s]])
st_out <- paste(st_out, collapse = "\t")
#print(st_out)
cat(st_out, file = file, sep = "\n", append = TRUE)
}
}
callRecordGenerator <- function(file){
c <- match.call(def = sys.function(-1), call = sys.call(-1))
saveRDS(c, file = file)
}
devtools::load_all()
searchForTerm(library_strategy = "RNA-Seq", gene=c("TGF-β", "Tgfb1", "tgfb"), species = "9606")
readRDS("RNA_TGF-β_9606_2_CALL_171025_221444.Rda")
readRDS("ChIP_SMAD2_9606_2RNA_all_db_171025.csv")
str(readRDS("ChIP_SMAD2_9606_2RNA_all_db_171025.csv"))
str(readRDS("RNA_TGF-β_9606_2_CALL_171025_221444.Rda"))
str(readRDS("RNA_TGF-β_9606_2_CALL_171025_221444.Rda"))=="language"
class(readRDS("RNA_TGF-β_9606_2_CALL_171025_221444.Rda"))=="language"
class(readRDS("RNA_TGF-β_9606_2_CALL_171025_221444.Rda"))
class(readRDS("RNA_TGF-β_9606_2_CALL_171025_221444.Rda"))=="call"
devtools::load_all()
x
getAnywhere(test_output)
getAnywhere(test_outer)
test_info
searchForTerm(library_strategy = "RNA-Seq", gene=c("dpd1"), species = "9606")
searchForTerm(library_strategy = "RNA-Seq", gene=c("tgfb", "tgfb1", "TGFbeta1", "transforming.growth.factor", "TGF-β"), species = "9606")
searchForTerm(library_strategy = "RNA-Seq", gene=c("ced"), species = "9606")
grep("a.b", "ab")
grep("a.b", "acb")
grep("a.?b", "acb")
grep("a.?b", "ab")
searchForTerm(library_strategy = "RNA-Seq", gene=c("wnt1", "wnt.1", "int1"), species = "9606")
searchForTerm(library_strategy = "RNA-Seq", gene=c("wnt1"), species = "9606")
searchForTerm(library_strategy = "RNA-Seq", gene=c("wnt1", "wnt.1", "int1"), species = "9606")
searchForTerm(library_strategy = "RNA-Seq", gene=c("wnt1", "wnt.1"), species = "9606")
searchForTerm(library_strategy = "RNA-Seq", gene=c("wnt1", "wnt.1", "int1"), species = "9606")
searchForTerm(library_strategy = "RNA-Seq", gene=c("notch1", "notch 1", "notch_1", "notch.1", "tan1", "hN1", "tan 1", "tan_1", "tan.1"), species = "9606")
searchForTerm(library_strategy = "RNA-Seq", gene=c("wnt1", "wnt.1", "wnt_1", "int1", "int.1", "int_1"), species = "9606")
searchForTerm(library_strategy = "ChIP-Seq", gene=c("smad2", "hmad2", "smad-2", "hmad-2", "jv18", "jv18-1", "madh2", "madr2"), species = "9606, secondary_library_strategy = "RNA-Seq")
searchForTerm(library_strategy = "ChIP-Seq", gene=c("smad2", "hmad2", "smad-2", "hmad-2", "jv18", "jv18-1", "madh2", "madr2"), species = "9606", secondary_library_strategy = "RNA-Seq")
searchForTerm(library_strategy = "ChIP-Seq", gene=c("smad2", "hmad2", "smad-2", "hmad-2", "jv18", "jv18-1", "madh2", "madr2"), secondary_library_strategy = "RNA-Seq")
readRDS("ChIP_smad2_2RNA_CALL_171025_231900.Rda")
searchForTerm(library_strategy = "ChIP-Seq", gene=c("smad3", "smad-3", "hmad3", "hmad-3", "jv15", "jv15-2", "madh3", "madh-3", "mad3"), species = "9606",secondary_library_strategy = "RNA-Seq")
