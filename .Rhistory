"species",
"platform",
"secondary_library_strategy")
rec <- list()
r <- 1
rec[[r]] <- unlist(strsplit(x[[r]], split = "\t"))
names(rec[[r]]) <- st_template[[r]]
#Separate by \t
rec
x <- readLines("test.tab")
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
rec <- list()
r <- 1
rec[[r]] <- unlist(strsplit(x[[r]], split = "\t"))
names(rec[r]) <- st_template[[r]]
#Separate by \t
#Check if the first element agrees with the template (if not, stop)
#Save subsequent elements as values. If length zero, add NULL
rec
ist[1]
ist[[1]]
str(ist)
x <- readLines("test.tab")
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
rec <- list()
names(rec) <- st_template
r <- 1
rec[[r]] <- unlist(strsplit(x[[r]], split = "\t"))
#names(rec[r]) <- st_template[[r]]
rec
rep(list(1),5)
rep(list(1),NULL)
rep(list(1),NA)
rep(list(NULL),5)
length(st_template)
x <- readLines("test.tab")
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
if (length(st_template)!=length(x)){
stop("The number of lines in the input file needs to correspond to the number of input variables")
}
#rec <- list()
rec <- rep(list(NULL), length(st_template))
names(rec) <- st_template
r <- 1
rec[[r]] <- unlist(strsplit(x[[r]], split = "\t"))
rec
x <- readLines("test.tab")
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
if (length(st_template)!=length(x)){
stop("The number of lines in the input file needs to correspond to the number of input variables")
}
#rec <- list()
rec <- rep(list(NULL), length(st_template))
names(rec) <- st_template
r <- 1
rec[[r]] <- unlist(strsplit(x[[r]], split = "\t"))[-1]
#names(rec[r]) <- st_template[[r]]
rec
x <- readLines("test.tab")
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
if (length(st_template)!=length(x)){
stop("The number of lines in the input file needs to correspond to the number of input variables")
}
#rec <- list()
rec <- rep(list(NULL), length(st_template))
names(rec) <- st_template
r <- 1
if (st_template[r]!=unlist(strsplit(x[[r]], split = "\t"))[1]){
stop("The names need to match between the input and the template")
}
rec[[r]] <- unlist(strsplit(x[[r]], split = "\t"))[-1] #Omit the first element (name)
rec
x <- readLines("test.tab")
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
if (length(st_template)!=length(x)){
stop("The number of lines in the input file needs to correspond to the number of input variables")
}
#rec <- list()
rec <- rep(list(NULL), length(st_template))
names(rec) <- st_template
r <- 1
temp <- unlist(strsplit(x[[r]], split = "\t"))
if (st_template[r]!=temp[1]){
stop("The names need to match between the input and the template")
}
if (length(temp)>1){
rec[[r]] <- temp[-1] #Omit the first element (name)
}
rec
x <- readLines("test.tab")
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
if (length(st_template)!=length(x)){
stop("The number of lines in the input file needs to correspond to the number of input variables")
}
#rec <- list()
rec <- rep(list(NULL), length(st_template))
names(rec) <- st_template
for (r in seq_along(st_template)){
temp <- unlist(strsplit(x[[r]], split = "\t"))
if (st_template[r]!=temp[1]){
stop("The names need to match between the input and the template")
}
if (length(temp)>1){
rec[[r]] <- temp[-1] #Omit the first element (name)
}
}
rec
identical(ist, rec)
ist
rec[1]==ist[1]
rec[[1]]==ist[[1]]
rec[[2]]==ist[[2]]
for (s in seq_along(ist)){ist[[s]]<-ist[[s]][order(ist[[s]])]}
for (s in seq_along(ist)){ist2[[s]]<-ist[[s]][order(ist[[s]])]}
ist2 <- list()
for (s in seq_along(ist)){ist2[[s]]<-ist[[s]][order(ist[[s]])]}
ist2 <- ist
ist2[[5]]
ist2[[2]]
ist2[[2]]<- ist2[[2]][order(ist2[[2]])]
ist2
identical(ist, rec)
identical(ist2, rec)
ist
append("name", ist)
devtools::load_all()
searchForTerm("ChIP-Seq", antibody = "stat3")
x <- readLines("ChIP_stat3_2_PAR_171026_134118.tab")
#x <- readLines("test.tab")
if (x[[1]]=="searchForTerm"){
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
if ((length(st_template)+1)!=length(x)){
stop("The number of lines in the input file needs to correspond to the number of input variables")
}
#rec <- list()
rec <- rep(list("NULL"), length(st_template))
names(rec) <- st_template
for (r in seq_along(st_template)){
temp <- unlist(strsplit(x[[r]], split = "\t"))
if (st_template[r]!=temp[1]){
stop("The names need to match between the input and the template")
}
if (length(temp)>1){
rec[[r]] <- temp[-1] #Omit the first element (name)
}
}
}
x <- readLines("ChIP_stat3_2_PAR_171026_134118.tab")
#x <- readLines("test.tab")
if (x[[1]]=="searchForTerm"){
x <- x[-1]
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
if ((length(st_template)+1)!=length(x)){
stop("The number of lines in the input file needs to correspond to the number of input variables")
}
#rec <- list()
rec <- rep(list("NULL"), length(st_template))
names(rec) <- st_template
for (r in seq_along(st_template)){
temp <- unlist(strsplit(x[[r]], split = "\t"))
if (st_template[r]!=temp[1]){
stop("The names need to match between the input and the template")
}
if (length(temp)>1){
rec[[r]] <- temp[-1] #Omit the first element (name)
}
}
}
x <- readLines("ChIP_stat3_2_PAR_171026_134118.tab")
#x <- readLines("test.tab")
if (x[[1]]=="searchForTerm"){
x <- x[-1]
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
if ((length(st_template))!=length(x)){
stop("The number of lines in the input file needs to correspond to the number of input variables")
}
#rec <- list()
rec <- rep(list("NULL"), length(st_template))
names(rec) <- st_template
for (r in seq_along(st_template)){
temp <- unlist(strsplit(x[[r]], split = "\t"))
if (st_template[r]!=temp[1]){
stop("The names need to match between the input and the template")
}
if (length(temp)>1){
rec[[r]] <- temp[-1] #Omit the first element (name)
}
}
}
rec
x <- readLines("ChIP_stat3_2_PAR_171026_134118.tab")
#x <- readLines("test.tab")
if (x[[1]]=="searchForTerm"){
x <- x[-1]
st_template <- c("library_strategy",
"gene",
"antibody",
"cell_type",
"treatment",
"species",
"platform",
"secondary_library_strategy")
if ((length(st_template))!=length(x)){
stop("The number of lines in the input file needs to correspond to the number of input variables")
}
#rec <- list()
rec <- rep(list(NULL), length(st_template))
names(rec) <- st_template
for (r in seq_along(st_template)){
temp <- unlist(strsplit(x[[r]], split = "\t"))
if (st_template[r]!=temp[1]){
stop("The names need to match between the input and the template")
}
if (length(temp)>1){
rec[[r]] <- temp[-1] #Omit the first element (name)
}
}
}
rec
searchForTerm(library_strategy = "ChIP-Seq", gene = NULL, antibody = "stat3", cell_type = NULL, treatment = NULL, species = NULL, platform = NULL, secondary_library_strategy = NULL)
identical(readRDS("ChIP_stat3_2_all_db_171026_134326.Rda"), readRDS)
identical(readRDS("ChIP_stat3_2_all_db_171026_134326.Rda"), readRDS("ChIP_stat3_2_all_db_171026_135118.Rda"))
devtools::load_all()
devtools::load_all()
devtools::load_all()
file.info("GEOmetadb.sqlite")
file.info("GEOmetadb.sqlite")$mtime
file.info("GEOmetadb.sqlite")$ctime
R.Version()
devtools::load_all()
tryCatch
?tryCatch
getwd()
setwd("/home/sslab11/Documents/Anna/SpideR_Packaging201709")
getwd()
library(SRAdb)
srafile <<- getSRAdbFile()
devtools::load_all()
devtools::load_all()
devtools::load_all()
searchForTerm(library_strategy = "ChIP-Seq", antibody = "STAT3")
searchForTerm(library_strategy = "ChIP-Seq", gene = "STAT3")
searchForTerm(library_strategy = "ChIP-Seq", antibody = "STAT3")
searchForTerm(library_strategy = "ChIP-Seq", gene = "STAT3")
testthat:
:testthat
library(testthat)
log(-1)
install.packages(testthat)
install.packages("testthat")
library(testthat)
?test_check
devtools::use_testthat()
help("devtools-deprecated")
devtools::check()
lsf.str("package:SpideR")
ls(pos="package:SpideR")
ls("package:SpideR")
log(-1)
devtools::test()
devtools::load_all()
t <- dbGetQuery(sra_con, "SELECT * FROM sra LIMIT 15")
t <- dbGetQuery(sra_con, "SELECT * FROM sra GROUP BY RANDOM() LIMIT 15")
searchForTerm(library_strategy = "ChIP-Seq", antibody = "STAT3", species = "9606")
t <- dbGetQuery(sra_con, "SELECT * FROM sra WHERE experiment_title LIKE '%ribo-seq%'")
searchForAccession(accession_vector = c("GSE29692", "GSE18927"))
rm <- searchForAccession(accession_vector = c("GSE29692", "GSE18927"))
View(rm)
levels(factor(rm$library_strategy))
al <- accessionConverter(acc_list = c("GSE29692", "GSE18927"))
View(al)
levels(factor(al$series_id))
table(factor(al$series_id))
roadmap <- dbGetQuery(sra_con, "SELECT * FROM sra WHERE study_attribute LIKE '%encode%'")
View(roadmpa)
View(roadmap)
roadmap <- dbGetQuery(sra_con, "SELECT * FROM sra WHERE study_title LIKE '%roadmap%'")
View(roadmap)
devtools::load_all()
accessionConverter("GSE45627")
accessionConverter("GSE45628")
getAnywhere(mergeDetector())
getAnywhere(pairedEndConverter())
getAnywhere(searchForAccession())
devtools::load_all()
getAnywhere(searchForAccession())
t
View(t)
View(t)
Dora_roadmap <- searchForAccession("GSE292692")
Dora_roadmap_a <- searchForAccession("GSE18927")
View(Dora_roadmap_a)
output_df <- searchForAccessionAcrossDBs(acc_list = x, sra_columns = "*", geo_columns = "*")
x <- "GSE18927"
output_df <- searchForAccessionAcrossDBs(acc_list = x, sra_columns = "*", geo_columns = "*")
colnames(output_df)
View(Dora_roadmap_a)
View(Dora_roadmap_a)
searchGEOForGSM("GSM468792", "*")
proba <- searchGEOForGSM("GSM468792", "*")
View(proba)
output_df <- searchForAccessionAcrossDBs(acc_list = x, sra_columns = "*", geo_columns = "*")
devtools::load_all()
output_df <- searchForAccessionAcrossDBs(acc_list = x, sra_columns = "*", geo_columns = "*")
t_sra_df <- readRDS("sra_df.Rda")
View(t_sra_df)
colnames(t_sra_df)
t_geo_df <- readRDS("geo_df.Rda")
View(t_geo_df)
colnames(t_geo_df)
t_srr_gsm_df <- readRDS("srr_gsm_df.Rda")
View(t_srr_gsm_df)
t_geo_srr_gsm_df <- merge(t_geo_df, t_srr_gsm_df, by.x = "gsm", by.y = "gsm", all = TRUE)
colnames(t_geo_srr_gsm_df)
t_geo_srr_gsm_sra_df <- merge(t_geo_srr_gsm_df, t_sra_df, by.x = "run_accession", by.y = "run_accession", all = TRUE)
colnames(t_geo_srr_gsm_sra_df)
devtools::load_all()
Dora_roadmap_a <- searchForAccession("GSE18927")
View(Dora_roadmap_a)
getAnywhere(outputGenerator())
getAnywhere(otherSampleSheetGenerator)
GSE18927 <- Dora_roadmap_a
getAnywhere(searchForAccession)
otherSampleSheetGenerator(GSE18927)
t1 <- otherSampleSheetGenerator(GSE18927)
View(t1)
saveRDS(otherSampleSheetGenerator(GSE18927), "GSE18927_Sample_Sheet.Rda")
GSE18927 <- searchForAccession("GSE18927")
searchForAccession_temp <- function(acc_list){
#
# IN PROGRESS - to find omitted processing steps, see SpideR_ToDo.Rmd
#
# Args: a character vector with accessions
#       (needs to completely match to one accession class; no partial matches or mixed classes allowed)
#
# Returns: df from SRA with matches to the acc_list
#
x <- unique(acc_list)
x <- x[digitSort(x)]
accession_class <- accessionClassifier(x)
output_df <- searchGEOForGSM(acc_list = x, geo_columns = "*")
output_df$input <- NA
output_df$control <- NA
#output_df <- mergeDetector(output_df)
#output_df <- pairedEndConverter(output_df)
return(output_df)
}
searchForAccession_temp("GSE29692")
searchForAccession_temp <- function(acc_list){
#
# IN PROGRESS - to find omitted processing steps, see SpideR_ToDo.Rmd
#
# Args: a character vector with accessions
#       (needs to completely match to one accession class; no partial matches or mixed classes allowed)
#
# Returns: df from SRA with matches to the acc_list
#
x <- unique(acc_list)
x <- x[digitSort(x)]
accession_class <- accessionClassifier(x)
output_df <- searchGEOForGSE(acc_list = x, geo_columns = "*")
output_df$input <- NA
output_df$control <- NA
#output_df <- mergeDetector(output_df)
#output_df <- pairedEndConverter(output_df)
return(output_df)
}
searchForAccession_temp("GSE29692")
getAnywhere(searchForAccession_temp)
#CREATED A TEMPORARY FUNCTION TO GET AROUND A BUG THAT NEEDS FIXING
getAnywhere(searchForAccession_temp)
GSE29692 <- searchForAccession_temp("GSE29692")
saveRDS(GSE29692, "GSE29692_Whole_Table.Rda")
saveRDS(otherSampleSheetGenerator(GSE29692), "GSE29692_Sample_Sheet.Rda")
saveRDS(GSE29692, "GSE29692_Whole_Table.Rda")
getwd()
getAnywhere(searchForAccession)
saveRDS(GSE18927, "GSE18927_Whole_Table.Rda")
saveRDS(otherSampleSheetGenerator(GSE18927), "GSE18927_Sample_Sheet.Rda")
identical(GSE18927, readRDS("GSE18927_Sample_Sheet.Rda"))
identical(GSE18927, readRDS("GSE18927_Whole_Table.Rda"))
saveRDS(GSE29692, "GSE29692_Whole_Table.Rda")
identical(GSE18927, readRDS("GSE18927_Whole_Table.Rda"))
saveRDS(GSE18927, "GSE18927_Whole_Table.Rda")
identical(GSE18927, readRDS("GSE18927_Whole_Table.Rda"))
t2 <- readRDS("GSE18927_Sample_Sheet.Rda")
View(t2)
otherSampleSheetGenerator(GSE29692), "GSE29692_Sample_Sheet.Rda")
otherSampleSheetGenerator(GSE29692)
View(GSE29692)
getwd()
readRDS("/HDD/Anna/SpideR_Packaging201709/Roadmap_20171207/GSE29692_Sample_Sheet.Rda")
identical("/HDD/Anna/SpideR_Packaging201709/Roadmap_20171207/GSE18927_Sample_Sheet.Rda", readRDS("GSE18927_Sample_Sheet.Rda"))
identical(readRDS("/HDD/Anna/SpideR_Packaging201709/Roadmap_20171207/GSE18927_Sample_Sheet.Rda"), readRDS("GSE18927_Sample_Sheet.Rda"))
identical(readRDS("/HDD/Anna/SpideR_Packaging201709/Roadmap_20171207/GSE18927_Whole_Table.Rda"), readRDS("GSE18927_Whole_Table.Rda"))
identical(readRDS("/HDD/Anna/SpideR_Packaging201709/Roadmap_20171207/GSE29692_Whole_Table.Rda"), readRDS("GSE29692_Whole_Table.Rda"))
sum(grepl("cell description", GSE29692$characteristics_ch1))
rm(searchForAccession_temp)
rm(t_sra_df)
rm(t_geo_df)
rm(t_geo_srr_gsm_df)
rm(t_geo_srr_gsm_sra_df)
rm(proba)
rm(t1)
rm(t2)
length(factors(GSE29692$source_name_ch1))
length(factor(GSE29692$source_name_ch1))
length(levels(factor(GSE29692$source_name_ch1)))
View(GSE18927)
levels(factor(GSE18927$study_accession))
length(unique(GSE18927$run_accession))
GSE18927[ duplicated(GSE18927$run_accession),]
t1 <- GSE18927[ duplicated(GSE18927$run_accession),]
View(t1)
srr_gsm
dbGetQuery(srr_gsm, "SELECT * WHERE gsm = "GSM1463265)
dbGetQuery(srr_gsm, "SELECT * WHERE gsm = "GSM1463265"")
dbGetQuery(srr_gsm, "SELECT * WHERE gsm = "GSM1463265")
dbGetQuery(srr_gsm, "SELECT * WHERE gsm = 'GSM1463265'")
dbGetQuery(srr_gsm, "SELECT * FROM srr_gsm WHERE gsm = 'GSM1463265'")
t2 <- readRDS("/HDD/Anna/SpideR_Packaging201709/20171207_Roadmap/GSE18927_Sample_Sheet.Rda")
View(t2)
sum(grepl("SRR", t2$run_accession))
View(t2[!grepl("SRR", t2%run_accession)])
View(t2[!grepl("SRR", t2%run_accession),])
View(t2[(!grepl("SRR", t2$run_accession)),])
saveRDS(t1, "GSE18927_GEO_only.Rda")
rm(t2)
rm(GSE18927)
rm(GSE29692)
rm(Dora_roadmap_a)
load("/HDD/Anna/SpideR_Packaging201709/20171207_Roadmap/GSE18927_GEO_only.Rda")
load("/HDD/Anna/SpideR_Packaging201709/20171207_Roadmap/GSE18927_Whole_Table.Rda")
load("/HDD/Anna/SpideR_Packaging201709/20171207_Roadmap/GSE18927_GEO_only.Rda")
source("/HDD/Anna/SpideR_Packaging201709/20171207_Roadmap/GSE18927_GEO_only.Rda")
source("/HDD/Anna/SpideR_Packaging201709/20171207_Roadmap/GSE18927_GEO_only.Rda")
readRDS("/HDD/Anna/SpideR_Packaging201709/20171207_Roadmap/GSE18927_GEO_only.Rda")
test<- readRDS("/HDD/Anna/SpideR_Packaging201709/20171207_Roadmap/GSE18927_GEO_only.Rda")
str(test)
?readRDS
dir()
load(file="/HDD/Anna/SpideR_Packaging201709/20171207_Roadmap/GSE18927_Whole_Table.Rda")
