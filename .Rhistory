dim(sra_df)
unique(sra_df$study_accession)
convertAccession("SRP076433 ")
convertAccession("SRP076433")
sum(sra_df$study_accession=="SRP076433")
## code to prepare `Demo_DBs` dataset
# Setup ####
devtools::load_all()
startSpideR(getwd())
library(DBI)
# Accessions of interest ####
# Find total number of records
#gse_tot <- as.numeric(dbGetQuery(geo_con, "SELECT count(DISTINCT gse) FROM gse")) # 114406
#srp_tot <- as.numeric(dbGetQuery(sra_con, "SELECT count(DISTINCT study_accession) FROM sra")) # 160612
#gses <- DBI::dbGetQuery(geo_con, "SELECT gse FROM gse GROUP BY RANDOM() LIMIT 10")$gse
#srps <- DBI::dbGetQuery(sra_con, "SELECT study_accession FROM sra GROUP BY RANDOM() LIMIT 10")$study_accession
#Original Accessions generated (some problematic due to db issues)
#gses <- c('GSE48253', 'GSE69001', 'GSE114512', 'GSE27360', 'GSE82246', 'GSE80852', 'GSE36467', 'GSE76553', 'GSE119855', 'GSE10309')
#srps <- c('SRP042189', 'SRP119890', 'SRP134708', 'ERP004444', 'ERP010785', 'SRP029441', 'SRP018785', 'SRP100699', 'SRP065899', 'SRP120023')
gses <- c('GSE48253', 'GSE69001', 'GSE27360', 'GSE82246', 'GSE36467', 'GSE76553', 'GSE10309', 'GSE116221', 'GSE80767')
srps <- c('SRP134708', 'DRP003157', 'SRP061795', 'SRP029758', 'SRP076433', 'SRP148363', 'SRP062911')
# Functions ####
searchGSEs <- function(gses){
gse_df <- data.frame()
for (g in seq_along(gses)){
gse_chunk <- dbGetQuery(geo_con, paste0("SELECT * FROM gse WHERE gse = '", gses[g], "'"))
gse_df <- rbind(gse_df, gse_chunk)
}
return(gse_df)
}
searchGSEsInGSM <- function(gses){
gsm_df <- data.frame()
for (g in seq_along(gses)){
query <- paste0("SELECT * FROM gsm WHERE series_id LIKE '%", gses[g], "' OR series_id LIKE '%", gses[g], ",%'")
print(query)
gsm_chunk <- dbGetQuery(geo_con, query)
gsm_df <- rbind(gsm_df, gsm_chunk)
}
return(gsm_df)
}
searchGSMsInGSM <- function(gsms){
gsm_df <- data.frame()
for (g in seq_along(gsms)){
gsm_chunk <- dbGetQuery(geo_con, paste0("SELECT * FROM gsm WHERE gsm = '", gsms[g], "'"))
gsm_df <- rbind(gsm_df, gsm_chunk)
}
return(gsm_df)
}
searchGSMsInSRRGSM <- function(gsms){
srr_df <- data.frame()
for (g in seq_along(gsms)){
srr_chunk <- dbGetQuery(srr_gsm, paste0("SELECT * FROM srr_gsm WHERE gsm = '", gsms[g], "'"))
srr_df <- rbind(srr_df, srr_chunk)
}
return(srr_df)
}
searchSRPsInSRRGSM <- function(srps){
srr_df <- data.frame()
for (g in seq_along(srps)){
srr_chunk <- dbGetQuery(srr_gsm, paste0("SELECT * FROM srr_gsm WHERE study_accession = '", srps[g], "'"))
srr_df <- rbind(srr_df, srr_chunk)
}
return(srr_df)
}
searchSRRsInSRA <- function(srrs){
sra_df <- data.frame()
for (s in seq_along(srrs)){
sra_chunk <- dbGetQuery(sra_con, paste0("SELECT * FROM sra WHERE run_accession = '", srrs[s], "'"))
sra_df <- rbind(sra_df, sra_chunk)
}
return(sra_df)
}
searchSRPsInSRA <- function(srps){
sra_df <- data.frame()
for (s in seq_along(srps)){
sra_chunk <- dbGetQuery(sra_con, paste0("SELECT * FROM sra WHERE study_accession = '", srps[s], "'"))
sra_df <- rbind(sra_df, sra_chunk)
}
return(sra_df)
}
# Search for GSEs ####
# Search in GEO
# Search for original matches
gse_df <- searchGSEs(gses) # gse
gsm_df <- searchGSEsInGSM(gse_df$gse) #gsm
# Extract extra gses from the df
extra_geo_gses <- unique(unlist(strsplit(gsm_df$series_id, split = ",")))
extra_geo_gses <- extra_geo_gses[!(extra_geo_gses %in% gses)] # Only use gses not found before
# Search for extra gses and their corresponding gses
gsm_df <- rbind(gsm_df, searchGSEsInGSM(extra_geo_gses))
gsm_df <- unique(gsm_df)
extra_geo_gses <- unique(unlist(strsplit(gsm_df$series_id, split = ",")))
extra_geo_gses <- extra_geo_gses[!(extra_geo_gses %in% gses)]
gse_df <- rbind(gse_df, searchGSEs(extra_geo_gses))
gse_df <- unique(gse_df)
# Search in conversion db
srr_df <- searchGSMsInSRRGSM(gsm_df$gsm)
print(unique(srr_df$study_accession))
# Search in SRA
sra_df <- searchSRPsInSRA(srr_df$study_accession)
# Search for SRPs ####
sra_df <- rbind(sra_df, searchSRPsInSRA(srps))
srr_df_sra <- rbind(srr_df, searchSRPsInSRRGSM(srps)) # search for srps to avoid repetition
srr_df <- rbind(srr_df, srr_df_sra)
# Search GSMs
gsm_df_sra <- searchGSMsInGSM(srr_df_sra$gsm)
# Find all GSEs
gses_sra <- unique(unlist(strsplit(gsm_df_sra$series_id, split = ",")))
gsm_df_sra <- rbind(gsm_df_sra, searchGSEsInGSM(gses_sra))
gsm_df_sra <- unique(gsm_df_sra)
gsm_df <- rbind(gsm_df, gsm_df_sra)
gses_sra_2 <- unique(unlist(strsplit(gsm_df_sra$series_id, split = ",")))
gse_df <- rbind(gse_df, searchGSEs(gses_sra_2))
# Tidy up
gse_df <- unique(gse_df)
gsm_df <- unique(gsm_df)
srr_df <- unique(srr_df)
sra_df <- unique(sra_df)
gse_demo <- gse_df
gsm_demo <- gsm_df
srr_demo <- srr_df
sra_demo <- sra_df
#saveRDS(gsm_df, "gsm_df.Rda")
#saveRDS(gse_df, "gse_df.Rda")
#saveRDS(srr_df, "srr_df.Rda")
#saveRDS(sra_df, "sra_df.Rda")
usethis::use_data(gse_demo)
usethis::use_data(gsm_demo)
usethis::use_data(srr_demo)
usethis::use_data(sra_demo)
#usethis::use_data("Demo_DBs")
dim(sra_df)
dim(gsm_df)
dim(unique(gsm_df))
unlist(strsplit(gsm_df$series_id, split = ","))
unique(unlist(strsplit(gsm_df$series_id, split = ",")))
totgse <- unique(unlist(strsplit(gsm_df$series_id, split = ",")))
gse_counts <- data.frame()
for (t in seq_along(totgse)){
gse_counts <- rbind(gse_counts, data.frame(gse = totgse[t], count = sum(grepl(totgse[t], gsm_df$series_id)))
}
gse_counts <- data.frame()
for (t in seq_along(totgse)){
gse_counts <- rbind(gse_counts, data.frame(gse = totgse[t], count = sum(grepl(totgse[t], gsm_df$series_id))))
}
ggse_counts
gse_counts
## code to prepare `Demo_DBs` dataset
# Setup ####
devtools::load_all()
startSpideR(getwd())
library(DBI)
# Accessions of interest ####
# Find total number of records
#gse_tot <- as.numeric(dbGetQuery(geo_con, "SELECT count(DISTINCT gse) FROM gse")) # 114406
#srp_tot <- as.numeric(dbGetQuery(sra_con, "SELECT count(DISTINCT study_accession) FROM sra")) # 160612
#gses <- DBI::dbGetQuery(geo_con, "SELECT gse FROM gse GROUP BY RANDOM() LIMIT 10")$gse
#srps <- DBI::dbGetQuery(sra_con, "SELECT study_accession FROM sra GROUP BY RANDOM() LIMIT 10")$study_accession
#Original Accessions generated (some problematic due to db issues)
#gses <- c('GSE48253', 'GSE69001', 'GSE114512', 'GSE27360', 'GSE82246', 'GSE80852', 'GSE36467', 'GSE76553', 'GSE119855', 'GSE10309')
#srps <- c('SRP042189', 'SRP119890', 'SRP134708', 'ERP004444', 'ERP010785', 'SRP029441', 'SRP018785', 'SRP100699', 'SRP065899', 'SRP120023')
gses <- c('GSE48253', 'GSE69001', 'GSE27360', 'GSE82246', 'GSE36467', 'GSE76553', 'GSE10309', 'GSE80767')
srps <- c('SRP134708', 'DRP003157', 'SRP061795', 'SRP029758', 'SRP076433', 'SRP148363', 'SRP062911')
# Functions ####
searchGSEs <- function(gses){
gse_df <- data.frame()
for (g in seq_along(gses)){
gse_chunk <- dbGetQuery(geo_con, paste0("SELECT * FROM gse WHERE gse = '", gses[g], "'"))
gse_df <- rbind(gse_df, gse_chunk)
}
return(gse_df)
}
searchGSEsInGSM <- function(gses){
gsm_df <- data.frame()
for (g in seq_along(gses)){
query <- paste0("SELECT * FROM gsm WHERE series_id LIKE '%", gses[g], "' OR series_id LIKE '%", gses[g], ",%'")
print(query)
gsm_chunk <- dbGetQuery(geo_con, query)
gsm_df <- rbind(gsm_df, gsm_chunk)
}
return(gsm_df)
}
searchGSMsInGSM <- function(gsms){
gsm_df <- data.frame()
for (g in seq_along(gsms)){
gsm_chunk <- dbGetQuery(geo_con, paste0("SELECT * FROM gsm WHERE gsm = '", gsms[g], "'"))
gsm_df <- rbind(gsm_df, gsm_chunk)
}
return(gsm_df)
}
searchGSMsInSRRGSM <- function(gsms){
srr_df <- data.frame()
for (g in seq_along(gsms)){
srr_chunk <- dbGetQuery(srr_gsm, paste0("SELECT * FROM srr_gsm WHERE gsm = '", gsms[g], "'"))
srr_df <- rbind(srr_df, srr_chunk)
}
return(srr_df)
}
searchSRPsInSRRGSM <- function(srps){
srr_df <- data.frame()
for (g in seq_along(srps)){
srr_chunk <- dbGetQuery(srr_gsm, paste0("SELECT * FROM srr_gsm WHERE study_accession = '", srps[g], "'"))
srr_df <- rbind(srr_df, srr_chunk)
}
return(srr_df)
}
searchSRRsInSRA <- function(srrs){
sra_df <- data.frame()
for (s in seq_along(srrs)){
sra_chunk <- dbGetQuery(sra_con, paste0("SELECT * FROM sra WHERE run_accession = '", srrs[s], "'"))
sra_df <- rbind(sra_df, sra_chunk)
}
return(sra_df)
}
searchSRPsInSRA <- function(srps){
sra_df <- data.frame()
for (s in seq_along(srps)){
sra_chunk <- dbGetQuery(sra_con, paste0("SELECT * FROM sra WHERE study_accession = '", srps[s], "'"))
sra_df <- rbind(sra_df, sra_chunk)
}
return(sra_df)
}
# Search for GSEs ####
# Search in GEO
# Search for original matches
gse_df <- searchGSEs(gses) # gse
gsm_df <- searchGSEsInGSM(gse_df$gse) #gsm
# Extract extra gses from the df
extra_geo_gses <- unique(unlist(strsplit(gsm_df$series_id, split = ",")))
extra_geo_gses <- extra_geo_gses[!(extra_geo_gses %in% gses)] # Only use gses not found before
# Search for extra gses and their corresponding gses
gsm_df <- rbind(gsm_df, searchGSEsInGSM(extra_geo_gses))
gsm_df <- unique(gsm_df)
extra_geo_gses <- unique(unlist(strsplit(gsm_df$series_id, split = ",")))
extra_geo_gses <- extra_geo_gses[!(extra_geo_gses %in% gses)]
gse_df <- rbind(gse_df, searchGSEs(extra_geo_gses))
gse_df <- unique(gse_df)
# Search in conversion db
srr_df <- searchGSMsInSRRGSM(gsm_df$gsm)
print(unique(srr_df$study_accession))
# Search in SRA
sra_df <- searchSRPsInSRA(srr_df$study_accession)
# Search for SRPs ####
sra_df <- rbind(sra_df, searchSRPsInSRA(srps))
srr_df_sra <- rbind(srr_df, searchSRPsInSRRGSM(srps)) # search for srps to avoid repetition
srr_df <- rbind(srr_df, srr_df_sra)
# Search GSMs
gsm_df_sra <- searchGSMsInGSM(srr_df_sra$gsm)
# Find all GSEs
gses_sra <- unique(unlist(strsplit(gsm_df_sra$series_id, split = ",")))
gsm_df_sra <- rbind(gsm_df_sra, searchGSEsInGSM(gses_sra))
gsm_df_sra <- unique(gsm_df_sra)
gsm_df <- rbind(gsm_df, gsm_df_sra)
gses_sra_2 <- unique(unlist(strsplit(gsm_df_sra$series_id, split = ",")))
gse_df <- rbind(gse_df, searchGSEs(gses_sra_2))
# Tidy up
gse_df <- unique(gse_df)
gsm_df <- unique(gsm_df)
srr_df <- unique(srr_df)
sra_df <- unique(sra_df)
gse_demo <- gse_df
gsm_demo <- gsm_df
srr_demo <- srr_df
sra_demo <- sra_df
#saveRDS(gsm_df, "gsm_df.Rda")
#saveRDS(gse_df, "gse_df.Rda")
#saveRDS(srr_df, "srr_df.Rda")
#saveRDS(sra_df, "sra_df.Rda")
usethis::use_data(gse_demo)
usethis::use_data(gsm_demo)
usethis::use_data(srr_demo)
usethis::use_data(sra_demo)
#usethis::use_data("Demo_DBs")
usethis::use_data(gse_demo)
usethis::use_data(gsm_demo)
usethis::use_data(srr_demo)
usethis::use_data(sra_demo)
gse_counts <- data.frame()
for (t in seq_along(totgse)){
gse_counts <- rbind(gse_counts, data.frame(gse = totgse[t], count = sum(grepl(totgse[t], gsm_df$series_id))))
}
gse_counts
getGSECounts <- function(gses, df){
gse_counts <- data.frame()
for (t in seq_along(gses)){
gse_counts <- rbind(gse_counts, data.frame(gse = gses[t], count = sum(grepl(gses[t], df$series_id))))
}
return(gse_counts)
}
getGSECounts(gsm_df)
getGSECounts(totgse, gsm_df)
getGSECounts <- function(df){
gses <- unique(unlist(strsplit(df$series_id, split = ",")))
gse_counts <- data.frame()
for (t in seq_along(gses)){
gse_counts <- rbind(gse_counts, data.frame(gse = gses[t], count = sum(grepl(gses[t], df$series_id))))
}
return(gse_counts)
}
getGSECounts(gsm_df)
dim(gsm_df)
list(getGSECounts(gsm_df),getGSECounts(gsm_df))
gsm_df %>% count(gsm) %>% group_by(series_id)
library(dplyr)
gsm_df %>% count(gsm) %>% group_by(series_id)
colnames(gsm_df)
gsm_df %>% count(gsm) %>% group_by('series_id')
gsm_df %>% count(gsm) %>% group_by(series_id)
df <- gsm_df
colnames(df)=="series_id" <- "gse"
"gse" <- colnames(df)=="series_id"
colnames(df)
" colnames(df)[colnames(df)=="series_id"] <- "gse
" colnames(df)[colnames(df)=="series_id"] <- "gse"
colnames(df)[colnames(df)=="series_id"] <- "gse"
colnames(df)
df %>% count(gsm) %>% group_by(series_id)
df %>% count(gsm) %>% group_by(gse)
df
df %>% dplyr::count(gsm) %>% dplyr::group_by(gse)
df %>% count(gsm) %>% group_by(gse)
colnames(df)
df %>% count(gse) %>% group_by(gse)
getGSECounts <- function(df){
gses <- unique(unlist(strsplit(df$series_id, split = ",")))
gse_counts <- list()
colnames(df)[colnames(df)=="series_id"] <- "gse"
gse_counts[[1]] <- df %>% dplyr::count(gse) %>% dplyr::group_by(gse)
gse_counts[[1]] <- as.data.frame(gse_counts[[1]])
gse_counts[[2]] <- data.frame()
for (t in seq_along(gses)){
gse_counts[[2]] <- rbind(gse_counts[[2]], data.frame(gse = gses[t], count = sum(grepl(gses[t], df$gse))))
}
return(gse_counts)
}
getGSECounts(gsm_df)
dim(gsm_df)
dim(sra_df)
dim(srr_df)
getGSECounts <- function(df){
df <- unique(df)
gses <- unique(unlist(strsplit(df$series_id, split = ",")))
gse_counts <- list()
colnames(df)[colnames(df)=="series_id"] <- "gse"
gse_counts[[1]] <- df %>% dplyr::count(gse) %>% dplyr::group_by(gse)
gse_counts[[1]] <- as.data.frame(gse_counts[[1]])
gse_counts[[2]] <- data.frame()
for (t in seq_along(gses)){
gse_counts[[2]] <- rbind(gse_counts[[2]], data.frame(gse = gses[t], count = sum(grepl(gses[t], df$gse))))
}
return(gse_counts)
}
getGSECounts(gsm_df)
getGSECounts <- function(df){
df <- unique(df)
gses <- unique(unlist(strsplit(df$series_id, split = ",")))
gse_counts <- list()
colnames(df)[colnames(df)=="series_id"] <- "gse"
gse_counts[[1]] <- df %>% dplyr::count(gse) %>% dplyr::group_by(gse)
gse_counts[[1]] <- as.data.frame(gse_counts[[1]])
gse_counts[[2]] <- data.frame()
for (t in seq_along(gses)){
gse_counts[[2]] <- rbind(gse_counts[[2]], data.frame(gse = gses[t], count = sum(grepl(gses[t], df$gse))))
}
gse_counts[[3]] <- dim(df)
return(gse_counts)
}
getGSECounts(gsm_df)
t <- .Last.value
names(t)
names(t) <- c(1,23)
names(t) <- c(1,2,3)
names(t)
t
getGSECounts <- function(df){
df <- unique(df)
gses <- unique(unlist(strsplit(df$series_id, split = ",")))
gse_counts <- list()
colnames(df)[colnames(df)=="series_id"] <- "gse"
gse_counts[[1]] <- df %>% dplyr::count(gse) %>% dplyr::group_by(gse)
gse_counts[[1]] <- as.data.frame(gse_counts[[1]])
gse_counts[[2]] <- data.frame()
for (t in seq_along(gses)){
gse_counts[[2]] <- rbind(gse_counts[[2]], data.frame(gse = gses[t], count = sum(grepl(gses[t], df$gse))))
}
gse_counts[[3]] <- dim(df)
names(gse_counts) <- c("GSE counts (together)", "GSE counts (separated)", "df dimensions")
return(gse_counts)
}
getGSECounts(gsm_df)
devtools::load_all()
startSpideRDemo()
dbGetQuery(sra_con, "SELECT study_accession FROM sra")
dbListTables(sra_con)
dbListTables(geo_con)
dbListTables(srr_gsm)
devtools::load_all()
startSpideRDemo()
sra_con
class(sra_con)
?`SQLiteConnection-class`
atttr(sra_con)
attr(sra_con)
attributes(sra_con)
sra_con$dbname
attr(sra_con, "dbname")
attr(get("sra_con", envir = get(".GlobalEnv")), "dbname")
rm(get("sra_con"))
rm("sra_con")
startSpideRDemo()
cleanDB <- function(database_name){
dbenv <- ".GlobalEnv"
dbfile <- attr(get(database_name, envir = get(dbenv)), "dbname")
rm(database_name, envir = get(dbenv))
protected_dbs <- c("SRAmetadb.sqlite", "GEOmetadb.sqlite", "SRR_GSM.sqlite")
for (p in seq_along(protected_dbs)){
checksum <- grepl(protected_dbs[p], dbfile)
}
if (checksum > 0) stop("Database is protected")
file.remove(dbfile)
}
cleanDB("geo_con")
cleanDB <- function(database_name){
dbenv <- ".GlobalEnv"
dbfile <- attr(get(database_name, envir = get(dbenv)), "dbname")
rm(get(database_name), envir = get(dbenv))
protected_dbs <- c("SRAmetadb.sqlite", "GEOmetadb.sqlite", "SRR_GSM.sqlite")
for (p in seq_along(protected_dbs)){
checksum <- grepl(protected_dbs[p], dbfile)
}
if (checksum > 0) stop("Database is protected")
file.remove(dbfile)
}
cleanDB("geo_con")
database_name
t <- "s"
rm(t)
t <- "s"
rm(get(t))
cleanDB <- function(database_name){
dbenv <- ".GlobalEnv"
dbfile <- attr(get(database_name, envir = get(dbenv)), "dbname")
rm(get(database_name, envir = get(dbenv)))
protected_dbs <- c("SRAmetadb.sqlite", "GEOmetadb.sqlite", "SRR_GSM.sqlite")
for (p in seq_along(protected_dbs)){
checksum <- grepl(protected_dbs[p], dbfile)
}
if (checksum > 0) stop("Database is protected")
file.remove(dbfile)
}
cleanDB("geo_con")
t <- "s"
namet <- "t"
rm(quote(nameet))
rm(quote(namet))
rm(list = namet)
t <- "s"
rm(list = namet, envir = get(".GlobalEnv"))
t
getAnywhere(t)
[]
getAnywhere(t)[]
getAnywhere(t)[1]
getAnywhere(t)[2]
cleanDB <- function(database_name){
dbenv <- ".GlobalEnv"
dbfile <- attr(get(database_name, envir = get(dbenv)), "dbname")
rm(list =database_name, envir = get(dbenv))
protected_dbs <- c("SRAmetadb.sqlite", "GEOmetadb.sqlite", "SRR_GSM.sqlite")
for (p in seq_along(protected_dbs)){
checksum <- grepl(protected_dbs[p], dbfile)
}
if (checksum > 0) stop("Database is protected")
file.remove(dbfile)
}
cleanDB("geo_con")
cleanDB("srr_gsm")
startSpideR(getwd())
cleanDB("srr_gsm")
cleanDB("geo_con")
cleanDB <- function(database_name){
dbenv <- ".GlobalEnv"
dbfile <- attr(get(database_name, envir = get(dbenv)), "dbname")
rm(list =database_name, envir = get(dbenv))
protected_dbs <- c("SRAmetadb.sqlite", "GEOmetadb.sqlite", "SRR_GSM.sqlite")
for (p in seq_along(protected_dbs)){
checksum <- sum(checksum, grepl(protected_dbs[p], dbfile))
}
if (checksum > 0) stop("Database is protected")
file.remove(dbfile)
}
cleanDB("geo_con")
cleanDB("sra_con")
cleanDB <- function(database_name){
dbenv <- ".GlobalEnv"
dbfile <- attr(get(database_name, envir = get(dbenv)), "dbname")
rm(list =database_name, envir = get(dbenv))
protected_dbs <- c("SRAmetadb.sqlite", "GEOmetadb.sqlite", "SRR_GSM.sqlite")
checksum <- 0
for (p in seq_along(protected_dbs)){
checksum <- sum(checksum, grepl(protected_dbs[p], dbfile))
}
if (checksum > 0) stop("Database is protected")
file.remove(dbfile)
}
cleanDB("sra_con")
startSpideR(getwd())
startSpideR(getwd())
startSpideR(getwd())
startSpideR(getwd())
startSpideR(getwd())
startSpideR(getwd())
