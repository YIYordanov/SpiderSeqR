x <- t$gsm
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1")
gsm_df <- searchGEOForGSM(x, geo_columns = gsm_columns)
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate one of the columns
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
#Search gse table of GEO
gse_list <- unique(gsm_df$series_id_sep)
gse_df <- searchGEOForGSE_GSE(gse_list, geo_columns = c("gse", "pubmed_id"))
#Create a temporary merged df for gse information
geo_temp <- merge(gsm_df[,c("gsm", "series_id", "series_id_sep")], gse_df, by.x = "series_id_sep", by.y = "gse", all.x = TRUE)
geo_temp <- geo_temp[,-grep("series_id_sep", colnames(geo_temp))] #Drop series_id_sep column
geo_temp <- unique(geo_temp)
#Add count column
geo_temp <- geo_temp %>% add_count(gsm, series_id) %>% group_by(gsm, series_id) #%>% mutate(multiple_rows = n>1)
#Get indices
geo_multiple_rows <- (geo_temp$n > 1)
geo_na <- is.na(geo_temp$pubmed_id)
geo_remove <- geo_multiple_rows & geo_na
#Remove rows with na
geo_temp <- geo_temp[-geo_remove, ]
geo_temp <- geo_temp[ , -c("n")] #Remove count column
geo_df <- merge(gsm_df, geo_temp, by.x = c("gsm", "series_id"), by.y = c("gsm", "series_id"), all.x = TRUE)
View(geo_df)
search()
devtools::load_all()
View(gse_df)
colnames(geo_temp)
x <- t$gsm
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1")
gsm_df <- searchGEOForGSM(x, geo_columns = gsm_columns)
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate one of the columns
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
#Search gse table of GEO
gse_list <- unique(gsm_df$series_id_sep)
gse_df <- searchGEOForGSE_GSE(gse_list, geo_columns = c("gse", "pubmed_id"))
#Create a temporary merged df for gse information
geo_temp <- merge(gsm_df[,c("gsm", "series_id", "series_id_sep")], gse_df, by.x = "series_id_sep", by.y = "gse", all.x = TRUE)
#geo_temp <- geo_temp[,-grep("series_id_sep", colnames(geo_temp))] #Drop series_id_sep column
geo_temp <- unique(geo_temp)
#Add count column
geo_temp <- geo_temp %>% add_count(gsm, series_id) %>% group_by(gsm, series_id) #%>% mutate(multiple_rows = n>1)
#Get indices
geo_multiple_rows <- (geo_temp$n > 1)
geo_na <- is.na(geo_temp$pubmed_id)
geo_remove <- geo_multiple_rows & geo_na
#Remove rows with na
geo_temp <- geo_temp[-geo_remove, ]
geo_temp <- geo_temp[ , -c("n")] #Remove count column
geo_df <- merge(gsm_df, geo_temp, by.x = c("gsm", "series_id"), by.y = c("gsm", "series_id"), all.x = TRUE)
View(gsm_df)
View(geo_temp)
x <- t$gsm
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1")
gsm_df <- searchGEOForGSM(x, geo_columns = gsm_columns)
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate contents of series_id column into rows
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
#Search gse table of GEO
gse_list <- unique(gsm_df$series_id_sep)
#gse_df <- searchGEOForGSE_GSE(gse_list, geo_columns = c("gse", "pubmed_id"))
gse_df <- data.frame(gse=gse_list, pubmed_id=seq_along(gse_list))
#Create a temporary merged df for gse information
geo_temp <- merge(gsm_df[,c("gsm", "series_id", "series_id_sep")], gse_df, by.x = "series_id_sep", by.y = "gse", all.x = TRUE)
#geo_temp <- geo_temp[,-grep("series_id_sep", colnames(geo_temp))] #Drop series_id_sep column
geo_temp <- unique(geo_temp)
#Add count column
geo_temp <- geo_temp %>% add_count(gsm, series_id) %>% group_by(gsm, series_id) #%>% mutate(multiple_rows = n>1)
#Get indices
geo_multiple_rows <- (geo_temp$n > 1)
geo_na <- is.na(geo_temp$pubmed_id)
geo_remove <- geo_multiple_rows & geo_na
#Remove rows with na
geo_temp <- geo_temp[-geo_remove, ]
geo_temp <- geo_temp[ , -c("n")] #Remove count column
geo_df <- merge(gsm_df, geo_temp, by.x = c("gsm", "series_id"), by.y = c("gsm", "series_id"), all.x = TRUE)
View(geo_temp)
View(gse_df)
colnames(gse_df)
geo_temp <- merge(gsm_df[,c("gsm", "series_id", "series_id_sep")], gse_df, by.x = "series_id_sep", by.y = "gse", all.x = TRUE)
View(geo_temp)
rm(list(c("gsm_df", "gse_df")))
rm(c("gsm_df", "gse_df"))
?rm
l
l <- list("gsm_df", "gse_df")
l
rm(l)
l <- list("gsm_df", "gse_df")
rm(list = l)
l <- c("gsm_df", "gse_df")
rm(list = l)
l <- c("gsm_df", "gse_list", "gse_df", "geo_temp", "geo_df")
rm(list = l)
x <- t$gsm
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1")
gsm_df <- searchGEOForGSM(x, geo_columns = gsm_columns)
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate contents of series_id column into rows
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
#Search gse table of GEO
gse_list <- unique(gsm_df$series_id_sep)
#gse_df <- searchGEOForGSE_GSE(gse_list, geo_columns = c("gse", "pubmed_id"))
gse_df <- data.frame(gse=gse_list, pubmed_id=seq_along(gse_list))
#Create a temporary merged df for gse information
geo_temp <- merge(gsm_df[,c("gsm", "series_id", "series_id_sep")], gse_df, by.x = "series_id_sep", by.y = "gse", all.x = TRUE)
#geo_temp <- geo_temp[,-grep("series_id_sep", colnames(geo_temp))] #Drop series_id_sep column
geo_temp <- unique(geo_temp)
#Add count column
geo_temp <- geo_temp %>% add_count(gsm, series_id) %>% group_by(gsm, series_id) #%>% mutate(multiple_rows = n>1)
#Get indices
geo_multiple_rows <- (geo_temp$n > 1)
geo_na <- is.na(geo_temp$pubmed_id)
geo_remove <- geo_multiple_rows & geo_na
#Remove rows with na
geo_temp <- geo_temp[-geo_remove, ]
geo_temp <- geo_temp[ , -c("n")] #Remove count column
geo_df <- merge(gsm_df, geo_temp, by.x = c("gsm", "series_id"), by.y = c("gsm", "series_id"), all.x = TRUE)
#TO DO: sort out the fact that gsm_df had duplicate rows (to account for the separated gses....)
gse_df
View(geo_temp)
geo_temp <- merge(gsm_df[,c("gsm", "series_id", "series_id_sep")], gse_df, by.x = "series_id_sep", by.y = "gse", all.x = TRUE)
View(geo_temp)
geo_temp <- unique(geo_temp)
geo_temp <- merge(gsm_df[,c("gsm", "series_id", "series_id_sep")], gse_df, by.x = "series_id_sep", by.y = "gse", all.x = TRUE)
geo_temp <- geo_temp[,-grep("series_id_sep", colnames(geo_temp))] #Drop series_id_sep column
geo_temp <- unique(geo_temp)
geo_temp <- geo_temp %>% add_count(gsm, series_id) %>% group_by(gsm, series_id) #%>% mutate(multiple_rows = n>1)
#Get indices
geo_multiple_rows <- (geo_temp$n > 1)
geo_na <- is.na(geo_temp$pubmed_id)
geo_remove <- geo_multiple_rows & geo_na
sum(geo_remove)
geo_temp <- geo_temp[-geo_remove, ]
dim(geo_temp)
length(geo_remove)
#Remove previous objects
l <- c("gsm_df", "gse_list", "gse_df", "geo_temp", "geo_df")
rm(list = l)
#INPUTS
x <- t$gsm
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1")
gsm_df <- searchGEOForGSM(x, geo_columns = gsm_columns)
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate contents of series_id column into rows
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
#Search gse table of GEO
gse_list <- unique(gsm_df$series_id_sep)
#.gse_df <- searchGEOForGSE_GSE(gse_list, geo_columns = c("gse", "pubmed_id"))
gse_df <- data.frame(gse=gse_list, pubmed_id=seq_along(gse_list))
#Create a temporary merged df for gse information
geo_temp <- merge(gsm_df[,c("gsm", "series_id", "series_id_sep")], gse_df, by.x = "series_id_sep", by.y = "gse", all.x = TRUE)
#Remove series_id_sep column
geo_temp <- geo_temp[,-grep("series_id_sep", colnames(geo_temp))] #Drop series_id_sep column
geo_temp <- unique(geo_temp)
#Add count column
geo_temp <- geo_temp %>% add_count(gsm, series_id) %>% group_by(gsm, series_id) #%>% mutate(multiple_rows = n>1)
#Get indices
geo_multiple_rows <- (geo_temp$n > 1)
geo_na <- is.na(geo_temp$pubmed_id)
geo_remove <- geo_multiple_rows & geo_na
#Remove rows with na
if (sum(geo_remove)!=0){
geo_temp <- geo_temp[-geo_remove, ]
}
geo_temp <- geo_temp[ , -c("n")] #Remove count column
geo_df <- merge(gsm_df, geo_temp, by.x = c("gsm", "series_id"), by.y = c("gsm", "series_id"), all.x = TRUE)
geo_n <- grep("n", colnames(geo_temp))
geo_temp <- geo_temp[ , -geo_n]
q <- geo_temp %>% group_by(gsm, series_id) %>% summarise(pubmed_id = toString(pubmed_id)) %>% ungroup()
View(q)
#Remove previous objects
l <- c("gsm_df", "gse_list", "gse_df", "geo_temp", "geo_df")
rm(list = l)
#INPUTS
x <- t$gsm
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1")
gsm_df <- searchGEOForGSM(x, geo_columns = gsm_columns)
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate contents of series_id column into rows
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
#Search gse table of GEO
gse_list <- unique(gsm_df$series_id_sep)
#.gse_df <- searchGEOForGSE_GSE(gse_list, geo_columns = c("gse", "pubmed_id"))
gse_df <- data.frame(gse=gse_list, pubmed_id=seq_along(gse_list))
#Create a temporary merged df for gse information
geo_temp <- merge(gsm_df[,c("gsm", "series_id", "series_id_sep")], gse_df, by.x = "series_id_sep", by.y = "gse", all.x = TRUE)
#Remove series_id_sep column
geo_temp <- geo_temp[,-grep("series_id_sep", colnames(geo_temp))] #Drop series_id_sep column
geo_temp <- unique(geo_temp)
#Add count column
geo_temp <- geo_temp %>% add_count(gsm, series_id) %>% group_by(gsm, series_id) #%>% mutate(multiple_rows = n>1)
#Get indices
geo_multiple_rows <- (geo_temp$n > 1)
geo_na <- is.na(geo_temp$pubmed_id)
geo_remove <- geo_multiple_rows & geo_na
#Remove rows with na (which have multiple GSEs)
if (sum(geo_remove)!=0){
geo_temp <- geo_temp[-geo_remove, ]
}
#Remove count column
geo_n <- grep("n", colnames(geo_temp))
geo_temp <- geo_temp[ , -geo_n]
#Collapse multiple pubmed IDs into one row (comma separated)
geo_temp <- geo_temp %>% group_by(gsm, series_id) %>% summarise(pubmed_id = toString(pubmed_id)) %>% ungroup()
geo_df <- merge(gsm_df, geo_temp, by.x = c("gsm", "series_id"), by.y = c("gsm", "series_id"), all.x = TRUE)
#TO DO: sort out the fact that gsm_df had duplicate rows (to account for the separated gses....)
View(geo_df)
#Remove previous objects
l <- c("gsm_df", "gse_list", "gse_df", "geo_temp", "geo_df")
rm(list = l)
#INPUTS
x <- t$gsm
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1")
gsm_df <- searchGEOForGSM(x, geo_columns = gsm_columns)
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate contents of series_id column into rows
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
#Search gse table of GEO
gse_list <- unique(gsm_df$series_id_sep)
#.gse_df <- searchGEOForGSE_GSE(gse_list, geo_columns = c("gse", "pubmed_id"))
gse_df <- data.frame(gse=gse_list, pubmed_id=seq_along(gse_list))
#Create a temporary merged df for gse information
geo_temp <- merge(gsm_df[,c("gsm", "series_id", "series_id_sep")], gse_df, by.x = "series_id_sep", by.y = "gse", all.x = TRUE)
#Remove series_id_sep column
geo_temp <- geo_temp[,-grep("series_id_sep", colnames(geo_temp))] #Drop series_id_sep column
geo_temp <- unique(geo_temp)
#Add count column
geo_temp <- geo_temp %>% add_count(gsm, series_id) %>% group_by(gsm, series_id) #%>% mutate(multiple_rows = n>1)
#Get indices
geo_multiple_rows <- (geo_temp$n > 1)
geo_na <- is.na(geo_temp$pubmed_id)
geo_remove <- geo_multiple_rows & geo_na
#Remove rows with na (which have multiple GSEs)
if (sum(geo_remove)!=0){
geo_temp <- geo_temp[-geo_remove, ]
}
#Remove count column
geo_n <- grep("n", colnames(geo_temp))
geo_temp <- geo_temp[ , -geo_n]
#Collapse multiple pubmed IDs into one row (comma separated)
geo_temp <- geo_temp %>% group_by(gsm, series_id) %>% summarise(pubmed_id = toString(pubmed_id)) %>% ungroup()
#Drop series_id_sep column
gsm_df <- gsm_df[,-grep("series_id_sep", colnames(gsm_df))]
geo_df <- merge(gsm_df, geo_temp, by.x = c("gsm", "series_id"), by.y = c("gsm", "series_id"), all.x = TRUE)
#TO DO: sort out the fact that gsm_df had duplicate rows (to account for the separated gses....)
View(geo_df)
#Remove previous objects
l <- c("gsm_df", "gse_list", "gse_df", "geo_temp", "geo_df")
rm(list = l)
#INPUTS
x <- t$gsm
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1")
gsm_df <- searchGEOForGSM(x, geo_columns = gsm_columns)
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate contents of series_id column into rows
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
#Search gse table of GEO
gse_list <- unique(gsm_df$series_id_sep)
#.gse_df <- searchGEOForGSE_GSE(gse_list, geo_columns = c("gse", "pubmed_id"))
gse_df <- data.frame(gse=gse_list, pubmed_id=seq_along(gse_list))
#Create a temporary merged df for gse information
geo_temp <- merge(gsm_df[,c("gsm", "series_id", "series_id_sep")], gse_df, by.x = "series_id_sep", by.y = "gse", all.x = TRUE)
#Remove series_id_sep column
geo_temp <- geo_temp[,-grep("series_id_sep", colnames(geo_temp))] #Drop series_id_sep column
geo_temp <- unique(geo_temp)
#Add count column
geo_temp <- geo_temp %>% add_count(gsm, series_id) %>% group_by(gsm, series_id) #%>% mutate(multiple_rows = n>1)
#Get indices
geo_multiple_rows <- (geo_temp$n > 1)
geo_na <- is.na(geo_temp$pubmed_id)
geo_remove <- geo_multiple_rows & geo_na
#Remove rows with na (which have multiple GSEs)
if (sum(geo_remove)!=0){
geo_temp <- geo_temp[-geo_remove, ]
}
#Remove count column
geo_n <- grep("n", colnames(geo_temp))
geo_temp <- geo_temp[ , -geo_n]
#Collapse multiple pubmed IDs into one row (comma separated)
geo_temp <- geo_temp %>% group_by(gsm, series_id) %>% summarise(pubmed_id = toString(pubmed_id)) %>% ungroup()
#Drop series_id_sep column
gsm_df <- gsm_df[,-grep("series_id_sep", colnames(gsm_df))]
gsm_df <- unique(gsm_df)
geo_df <- merge(gsm_df, geo_temp, by.x = c("gsm", "series_id"), by.y = c("gsm", "series_id"), all.x = TRUE)
#TO DO: sort out the fact that gsm_df had duplicate rows (to account for the separated gses....)
#Remove previous objects
l <- c("gsm_df", "gse_list", "gse_df", "geo_temp", "geo_df")
rm(list = l)
#INPUTS
x <- t$gsm
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1")
gsm_df <- searchGEOForGSM(x, geo_columns = gsm_columns)
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate contents of series_id column into rows
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
#Search gse table of GEO
gse_list <- unique(gsm_df$series_id_sep)
#.gse_df <- searchGEOForGSE_GSE(gse_list, geo_columns = c("gse", "pubmed_id"))
gse_df <- data.frame(gse=gse_list, pubmed_id=seq_along(gse_list))
gse_df$pubmed_id[2] <- NA
#Create a temporary merged df for gse information
geo_temp <- merge(gsm_df[,c("gsm", "series_id", "series_id_sep")], gse_df, by.x = "series_id_sep", by.y = "gse", all.x = TRUE)
#Remove series_id_sep column
geo_temp <- geo_temp[,-grep("series_id_sep", colnames(geo_temp))] #Drop series_id_sep column
geo_temp <- unique(geo_temp)
#Add count column
geo_temp <- geo_temp %>% add_count(gsm, series_id) %>% group_by(gsm, series_id) #%>% mutate(multiple_rows = n>1)
#Get indices
geo_multiple_rows <- (geo_temp$n > 1)
geo_na <- is.na(geo_temp$pubmed_id)
geo_remove <- geo_multiple_rows & geo_na
#Remove rows with na (which have multiple GSEs)
if (sum(geo_remove)!=0){
geo_temp <- geo_temp[-geo_remove, ]
}
#Remove count column
geo_n <- grep("n", colnames(geo_temp))
geo_temp <- geo_temp[ , -geo_n]
#Collapse multiple pubmed IDs into one row (comma separated)
geo_temp <- geo_temp %>% group_by(gsm, series_id) %>% summarise(pubmed_id = toString(pubmed_id)) %>% ungroup()
#Drop series_id_sep column
gsm_df <- gsm_df[,-grep("series_id_sep", colnames(gsm_df))]
gsm_df <- unique(gsm_df)
geo_df <- merge(gsm_df, geo_temp, by.x = c("gsm", "series_id"), by.y = c("gsm", "series_id"), all.x = TRUE)
#TO DO: sort out the fact that gsm_df had duplicate rows (to account for the separated gses....)
geo_remove
dim(geo_temp)
View(geo_temp)
#Remove previous objects
l <- c("gsm_df", "gse_list", "gse_df", "geo_temp", "geo_df")
rm(list = l)
#INPUTS
x <- t$gsm
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1")
gsm_df <- searchGEOForGSM(x, geo_columns = gsm_columns)
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate contents of series_id column into rows
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
#Search gse table of GEO
gse_list <- unique(gsm_df$series_id_sep)
#.gse_df <- searchGEOForGSE_GSE(gse_list, geo_columns = c("gse", "pubmed_id"))
gse_df <- data.frame(gse=gse_list, pubmed_id=seq_along(gse_list))
gse_df$pubmed_id[2] <- NA
#Create a temporary merged df for gse information
geo_temp <- merge(gsm_df[,c("gsm", "series_id", "series_id_sep")], gse_df, by.x = "series_id_sep", by.y = "gse", all.x = TRUE)
#Remove series_id_sep column
geo_temp <- geo_temp[,-grep("series_id_sep", colnames(geo_temp))] #Drop series_id_sep column
geo_temp <- unique(geo_temp)
#Add count column
geo_temp <- geo_temp %>% add_count(gsm, series_id) %>% group_by(gsm, series_id) #%>% mutate(multiple_rows = n>1)
#Get indices
geo_multiple_rows <- (geo_temp$n > 1)
geo_na <- is.na(geo_temp$pubmed_id)
geo_remove <- geo_multiple_rows & geo_na
#Remove rows with na (which have multiple GSEs)
if (sum(geo_remove)!=0){
geo_temp <- geo_temp[-geo_remove, ]
}
#Remove count column
geo_n <- grep("n", colnames(geo_temp))
geo_temp <- geo_temp[-geo_n, ]
#Collapse multiple pubmed IDs into one row (comma separated)
geo_temp <- geo_temp %>% group_by(gsm, series_id) %>% summarise(pubmed_id = toString(pubmed_id)) %>% ungroup()
#Drop series_id_sep column
gsm_df <- gsm_df[,-grep("series_id_sep", colnames(gsm_df))]
gsm_df <- unique(gsm_df)
geo_df <- merge(gsm_df, geo_temp, by.x = c("gsm", "series_id"), by.y = c("gsm", "series_id"), all.x = TRUE)
#TO DO: sort out the fact that gsm_df had duplicate rows (to account for the separated gses....)
geo_remove
geo_multiple_rows
geo_na
geo_temp
#Remove previous objects
l <- c("gsm_df", "gse_list", "gse_df", "geo_temp", "geo_df")
rm(list = l)
#INPUTS
x <- t$gsm
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1")
gsm_df <- searchGEOForGSM(x, geo_columns = gsm_columns)
View(gsm_df)
View(gsm_df)
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate contents of series_id column into rows
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
#Search gse table of GEO
gse_list <- unique(gsm_df$series_id_sep)
#.gse_df <- searchGEOForGSE_GSE(gse_list, geo_columns = c("gse", "pubmed_id"))
gse_df <- data.frame(gse=gse_list, pubmed_id=seq_along(gse_list))
gse_df$pubmed_id[2] <- NA
View(gsm_df)
View(gse_df)
geo_temp <- merge(gsm_df[,c("gsm", "series_id", "series_id_sep")], gse_df, by.x = "series_id_sep", by.y = "gse", all.x = TRUE)
View(geo_temp)
geo_temp <- geo_temp[,-grep("series_id_sep", colnames(geo_temp))] #Drop series_id_sep column
geo_temp <- unique(geo_temp)
geo_temp <- geo_temp %>% add_count(gsm, series_id) %>% group_by(gsm, series_id) #%>% mutate(multiple_rows = n>1)
geo_multiple_rows <- (geo_temp$n > 1)
geo_na <- is.na(geo_temp$pubmed_id)
geo_remove <- geo_multiple_rows & geo_na
geo_na
geo_multiple_rows
geo_remove
if (sum(geo_remove)!=0){
geo_temp2 <- geo_temp[-geo_remove, ]
}
View(geo_temp2)
geo_temp$gsm==geo_temp2$gsm
compareStringVectors(geo_temp, geo_temp2, order = TRUE)
compareStringVectors(geo_temp$gsm, geo_temp2$gsm, order = TRUE)
diff(geo_temp$gsm, geo_temp2$gsm)
intersect(geo_temp$gsm)
intersect(geo_temp$gsm, geo_temp2$gsm)
?intersect
setdiff(geo_temp$gsm, geo_temp2$gsm)
table(geo_temp2$gsm)
p <- data.frame(x = c("A", "A", "B", "B", "C"), y = c(1,2,1,1,3), z = c(NA, "NA", "x", "y", "NA"))
o
p
p[-1,]
i <- c(1,3,5)
p[-i,]
i <- c(T,F,T,F,T)
p[-i,]
which(i)
#Remove previous objects
l <- c("gsm_df", "gse_list", "gse_df", "geo_temp", "geo_df")
rm(list = l)
#INPUTS
x <- t$gsm
gsm_columns = c("gsm", "series_id", "gpl", "title", "source_name_ch1", "organism_ch1", "characteristics_ch1")
gsm_df <- searchGEOForGSM(x, geo_columns = gsm_columns)
#Duplicate series_id column
gsm_df$series_id_sep <- gsm_df$series_id
#Separate contents of series_id column into rows
gsm_df <- separate_rows(gsm_df, series_id_sep, sep = ",")
#Search gse table of GEO
gse_list <- unique(gsm_df$series_id_sep)
#.gse_df <- searchGEOForGSE_GSE(gse_list, geo_columns = c("gse", "pubmed_id"))
gse_df <- data.frame(gse=gse_list, pubmed_id=seq_along(gse_list))
gse_df$pubmed_id[2] <- NA
#Create a temporary merged df for gse information
geo_temp <- merge(gsm_df[,c("gsm", "series_id", "series_id_sep")], gse_df, by.x = "series_id_sep", by.y = "gse", all.x = TRUE)
#Remove series_id_sep column
geo_temp <- geo_temp[,-grep("series_id_sep", colnames(geo_temp))] #Drop series_id_sep column
geo_temp <- unique(geo_temp)
#Add count column
geo_temp <- geo_temp %>% add_count(gsm, series_id) %>% group_by(gsm, series_id) #%>% mutate(multiple_rows = n>1)
#Get indices
geo_multiple_rows <- (geo_temp$n > 1)
geo_na <- is.na(geo_temp$pubmed_id)
geo_remove <- geo_multiple_rows & geo_na
geo_remove_ind <- which(geo_remove)
#Remove rows with na (which have multiple GSEs)
if (sum(geo_remove)!=0){
geo_temp <- geo_temp[-geo_remove_ind, ]
}
#Remove count column
geo_n <- grep("n", colnames(geo_temp))
geo_temp <- geo_temp[-geo_n, ]
#Collapse multiple pubmed IDs into one row (comma separated)
geo_temp <- geo_temp %>% group_by(gsm, series_id) %>% summarise(pubmed_id = toString(pubmed_id)) %>% ungroup()
#Drop series_id_sep column
gsm_df <- gsm_df[,-grep("series_id_sep", colnames(gsm_df))]
gsm_df <- unique(gsm_df)
geo_df <- merge(gsm_df, geo_temp, by.x = c("gsm", "series_id"), by.y = c("gsm", "series_id"), all.x = TRUE)
#TO DO: sort out the fact that gsm_df had duplicate rows (to account for the separated gses....)
View(geo_temp)
View(geo_df)
devtools::load_all()
searchForTerm(library_strategy = "ChIP-Seq", antibody = "SMAD2", secondary_library_strategy = "RNA-Seq")
searchForTerm(library_strategy = "ChIP-Seq", antibody = "SMAD2", secondary_library_strategy = "RNA-Seq", species = "9606")
searchForTerm(library_strategy = "ChIP-Seq", antibody = "SMAD3", secondary_library_strategy = "RNA-Seq")
searchForTerm(library_strategy = "RNA-Seq", gene=c("TGF-β", "Tgfb1"), species = "9606")
searchForTerm(library_strategy = "RNA-Seq", gene=c("TGF-β", "Tgfb1", "tgfb"), species = "9606")
searchForTerm(library_strategy = "RNA-Seq", gene=c("hN1", "Neurogenic locus notch homolog protein 1", "Notch1", "TAN1", "Translocation-associated notch protein", "TAN-1"), species = "9606")
searchForTerm(library_strategy = "RNA-Seq", gene=c("wnt", "INT1", "Proto-oncogene Int-1 homolog", "Proto-oncogene Wnt-1", "wnt-1"), species = "9606")
View(t)
View(t)
?searchForTerm
??searchForTerm
args(searchForTerm)
devtools::load_all()
searchForTerm(library_strategy = "ChIP-Seq", antibody = "SMAD2", secondary_library_strategy = "RNA-Seq", species = "9606")
searchForTerm(library_strategy = "RNA-Seq", gene=c("hN1", "Neurogenic locus notch homolog protein 1", "Notch1", "TAN1", "Translocation-associated notch protein", "TAN-1"), species = "9606")
ist <- readRDS("st_copy.Rda")
ist
searchForTerm(library_strategy = "RNA-Seq", gene=c("TGF-β1", "tgfb1", "transforming.growth.factor.beta.1", "CED", "DPD1", "LAP", "TGFbeta", "TGF-beta-1"), species = "9606")
ist
order(ist$gene)
order(ist$gene, decreasing = TRUE)
ist$gene[order(ist$gene)]
ist
ist[[2]]
ist[[2]][order(ist[[2]])]
write.table(ist, "test.csv")
?writeLines
writeLines(ist)
writeLines(unlist(ist))
readLines()
