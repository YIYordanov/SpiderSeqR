{
    "collab_server" : "",
    "contents" : "#INPUT\naccession_vector <- \"ERP010604\"\n\n#INITIAL PROCESSING\nx <- unique(accession_vector)\nx <- x[digitSort(x)]\n\n#NUMBER OF ACCESSIONS\ntotal_accessions <- length(x)\nconverted_accessions <- 0 #initiate counter for converted accessions\n\n#DATABASE CONNECTIONS ===*=== Come back and redo\n.GlobalEnv$sra_con <- dbConnect(SQLite(), dbname = 'SRAmetadb.sqlite')\n.GlobalEnv$geo_con <- dbConnect(SQLite(),'GEOmetadb.sqlite')\n\nsra_database_name <- \"sra_con\"\ngeo_database_name <- \"geo_con\"\n\n#CLASS DETERMINATION\naccession_class <- accessionClassifier(x)\n\n#===*===\n# Have an if statement here!!!\n#===*===\n\n#SRA procedure\n\n\n#===*===\n# Convert pseudocode\n#===*===\n\n#sra_df <- data.frame() #===*=== check if this is the correct df initialisation\n#For each element in accession_vector:\n\n#Search in SRA according to class\n#If the dimension of the dataframe is non-zero:\n\n#Add one to the counter\n#Merge the dataframe with sra_df\n\n#Remove duplicates\n#Arrange in the order of accessions (SRR, SRX, SRS, SRP)\n#\n\n\ngsm_list <- c(\"GSM2538939\", \"GSM2539030\")\n\n\n\nsearchForGSMinSRA <- function(gsm_list, sra_columns=NA){\n  if (accessionClassifier(gsm_list)!=\"gsm\"){\n    stop(\"gsm_list must only contain GSM entries\")\n  }\n\n  #Remove duplicates\n  gsm_list <- unique(gsm_list)\n  gsm_list <- gsm_list[digitSort(gsm_list)]\n\n  #Get the total and count\n  gsm_total <- length(gsm_list)\n  gsm_count <- 0\n\n  #Set parameters\n  gsm_columns <- c(\"experiment_title\", \"run_alias\") #===*=== Re-investigate\n\n  if (is.na(sra_columns)){\n    sra_columns <- c(\"study_accession\", \"sample_accession\", \"experiment_accession\", \"run_accession\")\n  }\n  sra_columns <- append(sra_columns, gsm_columns) #Must include gsm_columns to later verify the match\n  sra_columns_sql <- paste(sra_columns, collapse = \", \")\n\n\n  #Initialise the output data frame\n  output_df <- data.frame()\n\n  for (g in seq_along(gsm_list)){ #For each GSM\n    query <- paste0(\"SELECT \", sra_columns_sql, \" FROM sra WHERE \", queryWriter(gsm_list[g], gsm_columns))\n    current_chunk <- dbGetQuery(sra_con, query)\n    #print(dim(current_chunk))\n\n    #Verify that correct GSMs have been captured\n    gsm_regexp <- paste0(gsm_list[g], \"[^0-9]\")\n    current_chunk <- current_chunk[conditionVerifier2(current_chunk, gsm_regexp, gsm_columns),]\n\n    if (dim(current_chunk)[1] != 0){\n      output_df <- rbind(output_df, current_chunk) #Add current chunk to the output\n      gsm_count <- gsm_count + 1 #Increase the counter\n    }\n  }\n  print(paste0(\"Found results for \", gsm_count, \" out of \", gsm_total, \" GSMs\"))\n  return(output_df)\n}\n\n\n\n\n\n\n\n\n\n\n#-------------------------------------------\n\n\n\n#PRIOR TO WRAPPING\n\n#searchForGSMinSRA <- function(gsm_list, sra_columns=NA){}\n\ngsm_list <- c(\"GSM2538939\", \"GSM2539030\")\n\n# duplicates\ngsm_list <- unique(gsm_list)\ngsm_list <- gsm_list[digitSort(gsm_list)]\n\n#Get the total and count\ngsm_total <- length(gsm_list)\ngsm_count <- 0\n\n#Set parameters\ngsm_columns <- c(\"experiment_title\", \"run_alias\") #===*=== Re-investigate\n\nif (is.na(sra_columns)){\n  sra_columns <- c(\"study_accession\", \"sample_accession\", \"experiment_accession\", \"run_accession\")\n  sra_columns <- append(sra_columns, gsm_columns)\n}\n\nsra_columns_sql <- paste(sra_columns, collapse = \", \")\n\noutput_df <- data.frame() #Initialise the output data frame\n\nfor (g in seq_along(gsm_list)){ #For each GSM\n  query <- paste0(\"SELECT \", sra_columns_sql, \" FROM sra WHERE \", queryWriter(gsm_list[g], gsm_columns))\n  current_chunk <- dbGetQuery(sra_con, query)\n  #print(dim(current_chunk))\n\n  #Verify that correct GSMs have been captured\n  gsm_regexp <- paste0(gsm_list[g], \"[^0-9]\")\n  current_chunk <- current_chunk[conditionVerifier2(current_chunk, gsm_regexp, gsm_columns),]\n\n  if (dim(current_chunk)[1] != 0){\n    output_df <- rbind(output_df, current_chunk) #Add current chunk to the output\n    gsm_count <- gsm_count + 1 #Increase the counter\n  }\n}\n\n\n#- for each GSM in gsm_list search SRA in one of the GSM-containing columns\n#- verify that GSM is contained - conditionVerifier2 (?)\n#   conditionVerifier2(current_chunk, )\n\n",
    "created" : 1505480273777.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3669470130",
    "id" : "F42941FC",
    "lastKnownWriteTime" : 1505499365,
    "last_content_update" : 1505499365311,
    "path" : "~/Documents/Anna/Spider201709/accessionConverter_revamped.R",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}