{
    "collab_server" : "",
    "contents" : "#SEARCH_FUNCTIONS.R\n#Merged indev2.R script and testf function\n\n\n#USAGE\n#st <- list(library_strategy=\"ChIP-Seq\", gene=\"STAT1\", antibody=\"STAT1\", secondary_library_strategy = \"RNA-Seq\")\n#do.call(searchForTerm, st)\n\n\n#NEW searchForTerm FUNCTION (in progress) - WILL BE COMPLETED IN INDEV3.R\nsearchForTerm <- function(library_strategy, gene=NULL, antibody=NULL, cell_type=NULL, treatment=NULL, species=NULL, platform=NULL, secondary_library_strategy=NULL){\n  #Function for searching\n  #Inputs: search terms\n  #REQUIRED: library_strategy AND at least one of gene, antibody, cell_type or treatment\n  #OPTIONAL: species, platform, secondary_library_strategy\n  \n  #============================================================================\n  # Checking arguments\n  #============================================================================\n  \n  #REMOVE EMPTY STRINGS FROM PROVIDED INPUTS\n  variable_list <- c(\"library_strategy\", \"gene\", \"antibody\", \"cell_type\", \"treatment\", \"species\", \"platform\", \"secondary_library_strategy\")\n  \n  e <- environment()\n  \n  supported_library_strategy <- c(\"ChIP-Seq\", \"RNA-Seq\")\n  supported_secondary_library_strategy <- supported_library_strategy\n  \n  #Require library_strategy (not missing, not NULL, not \"\", not a vector of length >1, must belong to the list)\n  if (missing(library_strategy)){\n    stop(\"No library_strategy provided\")\n  } else if (is.null(library_strategy)) { #NULL needs to be checked before NA (otherwise will get logical(0))\n    stop(\"No library_strategy provided\")\n  } else if (is.na(library_strategy)){\n    stop(\"No library_strategy provided\")\n  } else if (library_strategy == \"\") {\n    stop(\"No library_strategy provided\")\n  } else if (length(library_strategy) != 1 ) {\n    stop(\"Only one library_strategy can be supported at any given time\")\n  } else if (!(library_strategy %in% supported_library_strategy)){\n    sls <- paste(supported_library_strategy, collapse = \", \")\n    stop(paste0(\"Library strategy does not belong to the list of supported library strategies. Please try one of: \", sls, \".\"))\n  }\n  \n  \n  #Check validity of secondary_library_strategy (may be NULL, BUT not NA, not \"\", all elements belong to the list)\n  if (!is.null(secondary_library_strategy)){\n    if (is.na(secondary_library_strategy)){\n      stop(\"No secondary_library_strategy provided\")\n    } else if (secondary_library_strategy == \"\") {\n      stop(\"No secondary_library_strategy provided\")\n    } else {\n      for (l in seq_along(secondary_library_strategy)){\n        if (!(secondary_library_strategy[[l]] %in% supported_secondary_library_strategy)) {\n          sls <- paste(supported_secondary_library_strategy, collapse = \", \")\n          stop(paste0(\"Library strategy does not belong to the list of supported library strategies. Please try one of: \", sls, \".\"))\n        }\n      }\n    }\n  }\n  \n  \n  \n  for (v in seq_along(variable_list)){\n    cn <- variable_list[v]\n    for (i in seq_along(get(cn))){\n      #print(e[[cn]][i])\n      if (get(cn)[i]==\"\"){\n        #print(e[[cn]][i])\n        e[[cn]] <- e[[cn]][-i]\n      }\n    }\n  }\n  #NOTE: this converts empty string elements (of length 1) into empty elements (of length 0)\n  #To test for presence of a search term, use length(search_term)==0\n  \n  #CHECK IF AT LEAST ONE OF REQUIRED SEARCH_TERMS IS PROVIDED\n  min_one_required <- c(\"gene\", \"antibody\", \"cell_type\", \"treatment\")\n  l <- 0\n  for (v in seq_along(min_one_required)){\n    l <- l + length(e[[min_one_required[v]]])\n  }\n  if (l==0){\n    mess <- paste0(\"Minimum one search term is required from the following list: \", paste0(min_one_required, collapse = \", \"))\n    stop(mess)\n  }\n  \n  #PRINT SEARCH CONDITIONS SUMMARY\n  print(\"SEARCH CONDITIONS SUMMARY\")\n  print(paste0(\"Selected gene: \", paste(gene, collapse = \" OR \")))\n  print(paste0(\"Selected antibody: \", paste(antibody, collapse = \" OR \")))\n  print(paste0(\"Selected cell type: \", paste(cell_type, collapse = \" OR \")))\n  print(paste0(\"Selected treatment: \", paste(treatment, collapse = \" OR \")))\n  print(paste0(\"Selected species: \", paste(species, collapse = \" OR \")))\n  print(paste0(\"Selected library strategy: \", paste(library_strategy, collapse = \" OR \")))\n  print(paste0(\"Selected platform: \", paste(platform, collapse = \" OR \")))\n  print(paste0(\"Selected secondary library_strategy: \", paste(secondary_library_strategy, collapse = \" OR \")))\n  \n  \n  #============================================================================\n  \n  \n  \n  \n  \n  #============================================================================\n  # Save search terms as a list\n  #============================================================================\n  st <- list(library_strategy=library_strategy, gene=gene, antibody=antibody, cell_type=cell_type, treatment=treatment, species=species, platform=platform, secondary_library_strategy=secondary_library_strategy)\n  #============================================================================\n  \n  \n  \n  #============================================================================\n  #Find entries containing search_terms (sample_list)\n  #============================================================================\n  \n  sample_list <- do.call(searchSRA, st[-grep(\"secondary_library_strategy\", names(st))])\n  #============================================================================\n  \n  \n  #============================================================================\n  #Add input and control columns\n  #============================================================================\n  if (st$library_strategy == \"ChIP-Seq\"){\n    sample_list$input <- \"N\"\n  } else {\n    sample_list$input <- NA\n  }\n  \n  if (st$library_strategy == \"RNA-Seq\"){\n    sample_list$control <- \"N\"\n  } else {\n    sample_list$control <- NA\n  }\n  #============================================================================\n  \n  \n  \n  #============================================================================\n  #For all the projects from the sample list, find all the corresponding SRRs\n  #============================================================================\n  #all_list <- searchForSRPChildren(unique(sample_list$study_accession), sra_columns)\n  all_list <- searchForSRPChildren(unique(sample_list$study_accession), \"*\") #Changed to avoid problems with column management\n  all_list$input <- NA\n  all_list$control <- NA\n  #============================================================================\n  \n  \n  \n  \n  \n  #============================================================================\n  #Combine the sample_list with the list of all SRRs\n  #Mark SRRs from sample_list with \"N\" and the remaining SRRs with \"check\"\n  #============================================================================\n  #spider_combined <- rbindUnique(sample_list, all_list) #PREVIOUSLY\n  spider_combined <- rbindUniqueCols(x=sample_list, y = all_list, disregard_columns=c(\"input\", \"control\"))\n  #============================================================================\n  \n  #spider_combined$input <- \"check\" #===*===Pondered having a separate column for checking inputs (different from the one added by rbindUnique)\n  \n  ##Extracting information from sample_attribute column\n  #spider_combined$sra_sa_sample_type <- NA\n  #spider_combined$sra_sa_cell_line <- NA\n  #spider_combined$sra_sa_cell_type <- NA\n  #spider_combined$sra_sa_antibody <- NA\n  \n  \n  #===*===\n  #Search for input-like entries and label them \"I?\"\n  #===*===\n  #Decide which columns to search\n  \n  #============================================================================\n  #Extract GSMs from the experiment_title\n  #============================================================================\n  spider_combined <- gsmExtractor(spider_combined)\n  #============================================================================\n  \n  \n  \n  \n  \n  #============================================================================\n  #Extract SRA sample attributes\n  #============================================================================\n  #PREVIOUSLY\n  #sra_attr_keywords <- list(c(\"tissue: \", \"cell.line: \", \"source.name: \", \"cell.type: \"), \n  #                          c(\"antibody: \"),\n  #                          c(\"hgn: \"),\n  #                          c(\"treatment: \"))\n  #===*=== Make a better choice \n  \n  sra_tissue <- c(\"strain\", \"tissue\", \"source.?name\", \"isolation.?source\", \"isolate\", \"body.?site\", \"sample.?type\", \"cell.?type\", \"cell.?line\", \"ArrayExpress-CellType\", \"inferred.?cell.?type\", \"cell\", \"cre.?line\", \"cell.?description\", \"cell.?subtype\", \"cell.?or.?tisue.?type\",\n                  \"ArrayExpress-StrainOrLine\", \"lineage\", \"line\", \"strain.?or.?line\", \n                  \"body.?site\", \"site\", \"corrected.?sample.?site\", \"host.?body.?site\",\n                  \"tissue.?type\", \"host.?tissue.?sampled\", \"tissue.?depot\", \n                  \"source_material_id\", \"source\",\n                  \"organism.?part\") #TISSUE #ONLY USED HERE #RESEARCHED WELL\n  sra_tissue <- paste0(sra_tissue, \": \")\n  \n  sra_antibody <- c(\"chip.antibody\", \"antibody\", \"ArrayExpress.Immunoprecipitate\", \"ip.antibody\", \"rip.antibody\", \"medip.antibody\", \"clip.antibody\", \"frip.antibody\", \"chip-seq.antibody\") #ANTIBODY #RESEARCHED WELL\n  sra_antibody <- paste0(sra_antibody, \": \")\n  \n  sra_gene <- c(\"genotype\", \"ArrayExpress.Genotype\", \"genotype/variation\", \"target.gene\", \"genetic.background\", \"host.genotype\", \"Plant.genotype\", \"genetic.modification\", \"transgene\", \"gene.id\", \"myd88.genotype\", \"gene.perturbation.type\", \"genetic.condition\", \"cytogenetics\", \"concise.genotype.name\", \"genspecies.abbr\", \"melanoma.genetic.conditions\", \"marker.gene\", \"gene\", \"strain/genotype\", \"genotype/variation\", \"knockout\", \"knockdown\", \"hgn\") #GENE #RESEARCHED (based on sa_categories)\n  sra_gene <- paste0(sra_gene, \": \")\n  \n  sra_treatment <- c(\"treatment\", \"ArrayExpress.Treatment\", \"treated.with\", \"treatment.description\", \"drug.treatment\", \"treatment.protocol\", \"Vaccine.Treatment\", \"experimental.treatment\", \"diet.treatment\", \"treatment.group\") #TREATMENT #RESEARCHED\n  sra_treatment <- paste0(sra_treatment, \": \")\n  \n  sra_attr_keywords <- list(sra_tissue, sra_antibody, sra_gene, sra_treatment)\n  \n  \n  sra_sep_split <- \" \\\\|\\\\| \"\n  sra_sep_collapse <- \" || \"\n  \n  spider_sra_attr <- ldply(spider_combined$sample_attribute, function(x) universalExtractor(x, sra_sep_split, sra_sep_collapse, sra_attr_keywords))\n  \n  colnames(spider_sra_attr) <- c(\"sa_original\", \"sa_remainder\", \"sa_tissue\", \"sa_antibody\", \"sa_gene\", \"sa_treatment\")\n  spider_combined <- cbind(spider_combined, spider_sra_attr[,(-1)]) #Combine extracted columns with df (except attr_original column)\n  #============================================================================\n  \n  \n  \n  \n  #============================================================================\n  #Detect inputs (ChIP) and controls (RNA)\n  #============================================================================\n  spider_combined <- inputDetector(spider_combined) #Detect ChIP-Seq inputs\n  \n  #spider_combined$rna_control <- NA #Add new column\n  spider_combined <- controlDetector(spider_combined) #Detect RNA-Seq controls\n  #============================================================================\n  \n  \n  \n  #============================================================================\n  #Add columns for sample sheets (lane and merge* (will label it mer to avoid interference with merge function))\n  #============================================================================\n  spider_combined <- mergeDetector(spider_combined)\n  missingRunVerifier(spider_combined$run_accession) #Check if there are any missing runs\n  #============================================================================\n  \n  \n  #============================================================================\n  #Add pairedEnd column\n  #============================================================================\n  spider_combined <- pairedEndConverter(spider_combined)\n  #============================================================================\n  \n  \n  \n  #============================================================================\n  #Search for entries in GEO\n  #============================================================================\n  #-------------------------\n  #Inputs\n  gsm_db_name <- \"geo_con\"\n  gsm_columns <- c(\"gsm\", \"series_id\", \"gpl\", \"title\", \"source_name_ch1\", \"organism_ch1\", \"characteristics_ch1\")\n  \n  #gse_columns <- c(\"title\", \"pubmed_id\")\n  gse_columns <- c(\"pubmed_id\")\n  \n  \n  #gsm_list <- test12[1:10, 2]\n  #gsm_list <- c(\"GSM2342088\")\n  #gsm_list <- c(\"GSM2342088\", \"GSM2140962\")\n  \n  gsm_list <- spider_combined$sample #Get GSMs from column created by gsmExtractor()\n  gsm_list <- unique(gsm_list[!is.na(gsm_list)]) #Leave only unique, non-na entries\n  #-------------------------\n  \n  spider_geo <- geoFinder(gsm_db_name = gsm_db_name, gsm_list = gsm_list, gsm_columns = gsm_columns, gse_columns = gse_columns)\n  \n  #============================================================================\n  \n  \n  \n  #============================================================================\n  #Extract characteristics_ch1 into separate columns\n  #============================================================================\n  \n  #===*=== Come back and add more choices to the category names\n  \n  geo_tissue <- c(\"tissue\", \"cell.?type\", \"cell.?line\") #NOT RESEARCHED\n  geo_tissue <- paste0(geo_tissue, \": \")\n  \n  geo_antibody <- c(\"antibody\") #NOT RESEARCHED\n  geo_antibody <- paste0(geo_antibody, \": \")\n  \n  geo_gene <- c(\"genotype\") #NOT RESEARCHED\n  geo_gene <- paste0(geo_gene, \": \")\n  \n  geo_treatment <- c(\"treatment\") #NOT RESEARCHED\n  geo_treatment <- paste0(geo_treatment, \": \")\n  \n  geo_char_keywords <- list(geo_tissue, geo_antibody, geo_gene, geo_treatment)\n  \n  geo_sep_split <- \";\\t\"\n  geo_sep_collapse <- \";\\t\"\n  \n  spider_geo_char <-  ldply(spider_geo$characteristics_ch1, function(x) universalExtractor(x, geo_sep_split, geo_sep_collapse, geo_char_keywords))\n  \n  colnames(spider_geo_char) <- c(\"ch1_original\", \"ch1_remainder\", \"ch1_tissue\", \"ch1_antibody\", \"ch1_gene\", \"ch1_treatment\")\n  spider_geo <- cbind(spider_geo, spider_geo_char[, (-1)]) #Combine extracted columns with geo df (except ch1_original column)\n  #============================================================================\n  \n  \n  #============================================================================\n  #Merge spider_comibined and spider_geo\n  #============================================================================\n  spider_combined <- merge(spider_combined, spider_geo, by.x = \"sample\", by.y = \"gsm\", all.x = TRUE)\n  superseriesVerifier(spider_combined$series_id) #Give info on superseries\n  #============================================================================\n  \n  \n  \n  #============================================================================\n  # Generate outputs\n  #============================================================================\n  outputGenerator(spider_combined, st = st)\n  #============================================================================\n  return(spider_combined)\n  \n  \n}",
    "created" : 1505320417305.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3070654164",
    "id" : "F16F9130",
    "lastKnownWriteTime" : 1504289840,
    "last_content_update" : 1504289840,
    "path" : "~/Documents/Anna/Spider201709/SpideR/R/Search_Functions.R",
    "project_path" : "R/Search_Functions.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}