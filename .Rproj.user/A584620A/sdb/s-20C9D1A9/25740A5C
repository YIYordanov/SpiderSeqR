{
    "collab_server" : "",
    "contents" : "---\ntitle: \"README\"\nauthor: \"A.Sozanska\"\ndate: \"`r Sys.Date()`\"\noutput: rmarkdown::html_vignette\nvignette: >\n  %\\VignetteIndexEntry{README}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}\n---\n\nThis is a quick introduction into usage of the SpideRleg for capturing information from SRA and GEO databases.\n\n#Database Search\n##Searching for terms - searchForTerm()\nThis function allows one to specify one or more terms that should be present in each of the entries.\nUsage:\n```{r searchForTerm-General, eval=FALSE}\nsearchForTerm(library_strategy, gene = NULL, antibody = NULL, cell_type = NULL, \n    treatment = NULL, species = NULL, platform = NULL, secondary_library_strategy = NULL)\n```\n\nNOTE: all conditions set by the specified arguments need to be fulfilled in each entry, for example:\n\n```{r, eval = FALSE}\nsearchForTerm(library_strategy = \"ChIP-Seq\", antibody = \"p53\", cell_type = \"fibroblast\")\n```\nwould only return entries with p53 antibody and fibroblast cell type.\n\n\n\n###Arguments\n* library_strategy - a character with the type of sequencing used; needs to exactly match one of the library strategies used by SRA (e.g. ChIP-Seq, RNA-Seq); multiple library_strategies are not permitted\n* gene - a character or character vector with the name of the gene\n* antibody - a character or character vector with the name of the antibody \n* treatment - a character or character vector with the treatment\n* cell_type - a character or character vector with details related to the sample source, such as cell type, cell line, tissue or organ\n* species - a character or character vector with the species code (e.g. \"9606\" for human)\n* platform - a character or character vector with the platform (e.g. \"ILLUMINA\")\n* secondary_library_strategy - additional library strategy (in the same format as library_strategy); specifying secondary_library_strategy results in ouput of additional files which contain samples from the same study, but which belonged to the secondary_library_strategy.\nNote that secondary_library_strategy output is provided raw, i.e. not matched against any of the other search terms  \n\nEach of the gene, antibody, treatment and cell_type are first matched against their corresponding attributes (such as genotype, antibody, treatment, cell_type).  \nFor example, when searching for gene, every returned sample is required to have a match in genotype attribute if it is specified, otherwise matches may occur across a range of database fields, such as sample_name.\n\n###Argument Requirements\nAlways required: library_strategy  \nMinimum one from: gene, antibody, cell_type, treatment  \nCompletely optional: platform, secondary_library_strategy  \n\n\n###Synonyms\nWith the exception of library_strategy and secondary_library_strategy (===*===), all the other arguments can be character vectors. Only the first vector element will be used for output files, but all the synonyms will be used for searching. A matching entry would contain at least one of the synonyms for a given search term.  \n\nIn order to prevent spurious matches (such as CTCF when searching for TCF), there are some safeguards in place which prevent matching words with letters preceding an entry (e.g. when searching for p53, tp53 will not be accepted, but entries containing \"p53\", \"3p53\", \"_p53\" etc. would).\n\nTherefore, it is strongly recommended to provide at least a few likely synonyms for search term (although this may slow the function to some extent), for example:\n```{r, eval = FALSE}\nsearchForTerm(library_strategy = \"ChIP-Seq\", antibody = c(\"p53\", \"tp53\", \"trp53\"), cell_type = \"fibroblast\")\n```\n\nAlternatively, one can run separate searches for each of the synonyms and combine the outputs.\n\n\n\n##Searching for accessions - searchForAccession()\n\n#Other functionalities\n\n##Finding about superseries - superseriesFinder()\n\n##Converting accessions - accessionConverter()\n\n\n  \n  \n-------\n  \n  \n#Auto-generated\n\n## Figures\n\nThe figure sizes have been customised so that you can easily put two images side-by-side. \n\n```{r, fig.show='hold'}\nplot(1:10)\nplot(10:1)\n```\n\nYou can enable figure captions by `fig_caption: yes` in YAML:\n\n    output:\n      rmarkdown::html_vignette:\n        fig_caption: yes\n\nThen you can use the chunk option `fig.cap = \"Your figure caption.\"` in **knitr**.\n\n## More Examples\n\nYou can write math expressions, e.g. $Y = X\\beta + \\epsilon$, footnotes^[A footnote here.], and tables, e.g. using `knitr::kable()`.\n\n```{r, echo=FALSE, results='asis'}\nknitr::kable(head(mtcars, 10))\n```\n\nAlso a quote using `>`:\n\n> \"He who gives up [code] safety for [code] speed deserves neither.\"\n([via](https://twitter.com/hadleywickham/status/504368538874703872))\n",
    "created" : 1505322022460.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1415935505",
    "id" : "25740A5C",
    "lastKnownWriteTime" : 1505329497,
    "last_content_update" : 1505329497359,
    "path" : "~/Documents/Anna/Spider201709/SpideR/vignettes/README.Rmd",
    "project_path" : "vignettes/README.Rmd",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}